{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/icalm/source/assets/bilibili.svg","path":"assets/bilibili.svg","modified":1,"renderable":1},{"_id":"themes/icalm/source/assets/github.svg","path":"assets/github.svg","modified":1,"renderable":1},{"_id":"themes/icalm/source/assets/jianshu.svg","path":"assets/jianshu.svg","modified":1,"renderable":1},{"_id":"themes/icalm/source/assets/weibo.svg","path":"assets/weibo.svg","modified":1,"renderable":1},{"_id":"themes/icalm/source/assets/bin.svg","path":"assets/bin.svg","modified":1,"renderable":1},{"_id":"themes/icalm/source/assets/github.css","path":"assets/github.css","modified":1,"renderable":1},{"_id":"themes/icalm/source/assets/zhihu.svg","path":"assets/zhihu.svg","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/CONTRIBUTING.md","path":"css/normalize/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/LICENSE.md","path":"css/normalize/LICENSE.md","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/CHANGELOG.md","path":"css/normalize/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/README.md","path":"css/normalize/README.md","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/bower.json","path":"css/normalize/bower.json","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/test.html","path":"css/normalize/test.html","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/normalize.css","path":"css/normalize/normalize.css","modified":1,"renderable":1},{"_id":"themes/icalm/source/css/normalize/package.json","path":"css/normalize/package.json","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/LICENSE","path":"js/pager/LICENSE","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/Makefile","path":"js/pager/Makefile","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/README.md","path":"js/pager/README.md","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/package.json","path":"js/pager/package.json","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/rollup.config.js","path":"js/pager/rollup.config.js","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/dist/singlepager.js","path":"js/pager/dist/singlepager.js","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/src/singlepager.ts","path":"js/pager/src/singlepager.ts","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/test/test.html","path":"js/pager/test/test.html","modified":1,"renderable":1},{"_id":"themes/icalm/source/js/pager/test/test1.html","path":"js/pager/test/test1.html","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"50048045f261df598b89109b3f94abfd159afe79","modified":1530715388979},{"_id":"source/favicon.ico","hash":"00e1312a5677aa85b2bc7e8d860d011e823ef983","modified":1530795194318},{"_id":"source/favicon.png","hash":"0ab0db730d12abb50b2b7e0aa72f218046cf32f6","modified":1530715241821},{"_id":"themes/icalm/_config.yml","hash":"9028bad42551d7622f83a67eb35b412d968e9f7a","modified":1530932112844},{"_id":"themes/icalm/LICENSE","hash":"95bbad5059e6bb42688d491abc00b969b7b95968","modified":1530795194321},{"_id":"themes/icalm/README.md","hash":"109b2d0fc8cc8145598f3bc282c8d1f25136a0a8","modified":1530795194321},{"_id":"source/_draft/machine-learning-decision-tree.md","hash":"45db9693bfe749704288dbb33e613b87cb23789c","modified":1530625470391},{"_id":"source/_posts/bus-waiting-paradox.md","hash":"1a729422f7c4f9afe1c9bd8ee1ead973e5736d23","modified":1530625470391},{"_id":"source/_posts/connector-wechat-bot-1.md","hash":"cf4b1238093e75ecc9f73b75ba409441eab9a5ac","modified":1530625470392},{"_id":"source/_posts/connector-wechat-bot-2.md","hash":"4de73b30d476e55d650a5630701a56b7aabcca02","modified":1530625470392},{"_id":"source/_posts/connector-wechat-bot-3.md","hash":"1ca24488260c78762063f8cc0791ce4e986babbb","modified":1530625470393},{"_id":"source/_posts/connector-wechat-bot-4.md","hash":"4c5a0aab1a38b97834309da1224c623eb7f74940","modified":1530625470393},{"_id":"source/_posts/leetcode-111.md","hash":"bb363a4d7eea91f68005bd574c04fecf917b1bbf","modified":1530801160064},{"_id":"source/_posts/leetcode-189.md","hash":"5d8aab9687f1a9803bee7ee3b1b7ab3565fa9f83","modified":1530630889257},{"_id":"source/_posts/.DS_Store","hash":"03280161553632008ebacf7b1eb8161316a25de6","modified":1530631123295},{"_id":"source/_posts/leetcode-207.md","hash":"128ee111690b356a0065c9f55265af8700ea88ae","modified":1530713470052},{"_id":"source/_posts/leetcode-3.md","hash":"a7d24872ca690148f7a356559c5098ca753b119b","modified":1530629254159},{"_id":"source/_posts/machine-learning-basic-concepts.md","hash":"5c3169b682a2b76c2856287ee8f8b1e3ea4a45d5","modified":1530625470393},{"_id":"source/_posts/leetcode-2.md","hash":"12df6bf92568c592e505dd930a043ac93780a775","modified":1530629263521},{"_id":"source/_posts/tldr-pages.md","hash":"e7fb66ebdfe573d39f94be571236086de420271b","modified":1530625470393},{"_id":"source/_posts/topcoder-srm-726-div1-unpacking.md","hash":"b5d346fc337a33b596ab31cad64bb27ddbd7c824","modified":1530708442655},{"_id":"source/_posts/weibo-login-20lines.md","hash":"18e76bd8e4d4f610775f72e8351e44f4684d142d","modified":1530625470394},{"_id":"source/_posts/youtube-dl.md","hash":"a545b51257245d3a1e4ceb5964072c88822b6757","modified":1530625470394},{"_id":"source/categories/index.md","hash":"9e2218fc6256295b7095facc006cd56ac321d723","modified":1530795194318},{"_id":"source/images/avatar.jpg","hash":"e500ab32fbbaf67c20137c02af03112b01e517e5","modified":1530795194320},{"_id":"themes/icalm/layout/archive.ejs","hash":"68bd893a75698ae911d2c86b912220c05d50dac7","modified":1530795194326},{"_id":"themes/icalm/layout/category.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1530795194326},{"_id":"themes/icalm/layout/index.ejs","hash":"7141a6cf698526543a1bffe8f2dc3eda90546b24","modified":1530795194326},{"_id":"themes/icalm/layout/layout.ejs","hash":"0f090ee0fa2e010c38a231a066e3df185d0eac58","modified":1530796341751},{"_id":"themes/icalm/layout/page.ejs","hash":"29c0b2c51f6beb1c1abe311288e4e307d72d8b37","modified":1530795194327},{"_id":"themes/icalm/layout/post.ejs","hash":"da23f6a9168f7032173e27ce4b2832725d90a32f","modified":1530795194328},{"_id":"themes/icalm/layout/tag.ejs","hash":"25422985e84d98c4124009f722a7180eb15f8e29","modified":1530795194328},{"_id":"themes/icalm/layout/tags.ejs","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1530795194329},{"_id":"themes/icalm/layout/_partial/comment.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1530795194322},{"_id":"themes/icalm/layout/_partial/content-view.ejs","hash":"e74209c72656468f667f30803f02e4a90f0d8694","modified":1530795194322},{"_id":"themes/icalm/layout/_partial/footer.ejs","hash":"40fc7fb8e63b0d045b19af21d41d42c4079cc657","modified":1530795194323},{"_id":"themes/icalm/layout/_partial/list-view.ejs","hash":"89590b74a483858850c19d85b69624e50dcdc6be","modified":1530795194323},{"_id":"themes/icalm/layout/_partial/head.ejs","hash":"6c44b50d9ca441bf306e8ca4e6c11199a437e746","modified":1530795194323},{"_id":"themes/icalm/layout/_partial/sidebar.ejs","hash":"6a4b1af564b9f280ec56a0e0b555a391ce89b9d8","modified":1530795194324},{"_id":"themes/icalm/layout/_partial/meta.ejs","hash":"de18ccc762c0ee30bc691cda349a3da7dcabfcb0","modified":1530795194324},{"_id":"themes/icalm/layout/_partial/tag-list.ejs","hash":"a4247a7e56c31b8c41d639489d6653caad980924","modified":1530795194325},{"_id":"themes/icalm/layout/_partial/time-sec.ejs","hash":"bc94d6402f85855d77b0515d07b340f0d1aba3ac","modified":1530795194325},{"_id":"themes/icalm/source/assets/bilibili.svg","hash":"1a0a8dbebb6c1cb7c13395eacee9c43059ee1002","modified":1530931810311},{"_id":"themes/icalm/source/assets/github.svg","hash":"e5e61a745e2d621897ca16280415760408ff8fd2","modified":1530931810311},{"_id":"themes/icalm/source/assets/jianshu.svg","hash":"c68336944597034fd7ae2157f5f5a335871d921e","modified":1530931810312},{"_id":"themes/icalm/source/assets/weibo.svg","hash":"2ba01ddccb66e864b3451fa787cf1946df7b7733","modified":1530931810312},{"_id":"themes/icalm/source/assets/bin.svg","hash":"10c98979d69d4278bdce97eb1b576da81028d0f9","modified":1530795194329},{"_id":"themes/icalm/source/assets/github.css","hash":"06dd7af250791fa3a1550be960faf6c550caabbb","modified":1530795194330},{"_id":"themes/icalm/source/assets/zhihu.svg","hash":"a67f55c0abde69b719abf7faffdd6f2623a87690","modified":1530931810312},{"_id":"themes/icalm/source/css/style.styl","hash":"bf55a1291d10d8e4b2d0c6952e6584348b668da5","modified":1530795194336},{"_id":"themes/icalm/source/css/_partial/post.styl","hash":"2e5fb05fe8f63d2601b35c1b1f5b99daa337c51e","modified":1530795194331},{"_id":"themes/icalm/source/css/_partial/layout.styl","hash":"492b4e98135eb2600699a0ff1cb56083e432a674","modified":1530795194331},{"_id":"themes/icalm/source/css/_partial/sidebar.styl","hash":"4ad6ab904a4b1468bc8bd9a31dac1047a967bf0f","modified":1530795194332},{"_id":"themes/icalm/source/css/_partial/time-sec.styl","hash":"bd7ce80df01bb89db05572d96ac79c1dfd13dcf3","modified":1530795194332},{"_id":"themes/icalm/source/css/normalize/CONTRIBUTING.md","hash":"90bde4931b5479fe97eb2e33f2047d5bdb04a825","modified":1530795194333},{"_id":"themes/icalm/source/css/normalize/LICENSE.md","hash":"b038d1a51028b10dd7ffc08769e433321feb3030","modified":1530795194333},{"_id":"themes/icalm/source/css/normalize/CHANGELOG.md","hash":"bdccfe87a93c9294d31cc149b24efe7eec113388","modified":1530795194332},{"_id":"themes/icalm/source/css/normalize/README.md","hash":"73bcdd03f22c6cd0ceddbbfcd4214c5510d37da1","modified":1530795194334},{"_id":"themes/icalm/source/css/normalize/bower.json","hash":"56f5ced32582fc3c4073bead870126b5431d4b32","modified":1530795194334},{"_id":"themes/icalm/source/css/normalize/test.html","hash":"e715a73343b017d87f78da2aae073cfd849b230e","modified":1530795194335},{"_id":"themes/icalm/source/css/normalize/normalize.css","hash":"b2e67ca61fc06e08530de1a70c476c72000fa297","modified":1530795194334},{"_id":"themes/icalm/source/css/normalize/package.json","hash":"8cbd23c1e94f691f82f97de49f960547f16a9b5a","modified":1530795194335},{"_id":"themes/icalm/source/js/pager/LICENSE","hash":"c9e69c202fa2046fa96086557c74e37eb983762f","modified":1530795194337},{"_id":"themes/icalm/source/js/pager/Makefile","hash":"01c1c29bde86f45167f56ad5b44fcfbd6a9551ee","modified":1530795194337},{"_id":"themes/icalm/source/js/pager/README.md","hash":"0745ce8429baa6a58ae8a37b7cb04284dbca256c","modified":1530795194337},{"_id":"themes/icalm/source/js/pager/package.json","hash":"3e5d0f9ea81bce122079f1790b3d7754d1301bda","modified":1530795194338},{"_id":"themes/icalm/source/js/pager/rollup.config.js","hash":"b784a6e03d6e13a7c6c5e82d6bbd456beb37719e","modified":1530795194338},{"_id":"themes/icalm/source/js/pager/dist/singlepager.js","hash":"89f0974fe54128d541b0f983209f461229bb3ee0","modified":1530795194338},{"_id":"themes/icalm/source/js/pager/src/singlepager.ts","hash":"b6c229d01a8e2cea1f0654f42e3bfbde8da6c7da","modified":1530795194339},{"_id":"themes/icalm/source/js/pager/test/test.html","hash":"8d18b73414e2ad45b54ec69017d8b91e0d7ac6c5","modified":1530795194339},{"_id":"themes/icalm/source/js/pager/test/test1.html","hash":"1b12e906898c4c240f59eccaaef7032902437868","modified":1530795194339},{"_id":"public/content.json","hash":"4fd3966d77fcd1abe6694f796921a819427b7ece","modified":1530932124144},{"_id":"public/categories/index.html","hash":"08534aafe204021b6a1e993b9c8bf8cd35286035","modified":1530932124244},{"_id":"public/2018/07/leetcode-111/index.html","hash":"e0c4373a53e417e4c5f237e777de2c61e62ad5a2","modified":1530932124244},{"_id":"public/2018/07/leetcode-207/index.html","hash":"5e13c27a2379084949a8a2e28bb9f8722ec34cfd","modified":1530932124244},{"_id":"public/2018/07/topcoder-srm-726-div1-unpacking/index.html","hash":"f32a8b3ff95321c36522aaa31c9601a96ee04ffa","modified":1530932124245},{"_id":"public/2018/07/leetcode-3/index.html","hash":"811964d72fd2c44a75323e6fdd3667ec19d7c306","modified":1530932124246},{"_id":"public/2018/07/leetcode-2/index.html","hash":"a35afbe187a9d7876065a575df445be3ccbc7fb7","modified":1530932124246},{"_id":"public/2017/07/youtube-dl/index.html","hash":"efba64b5dd8fcaad797651637f06ac8c402ac436","modified":1530932124246},{"_id":"public/2017/06/connector-wechat-bot-4/index.html","hash":"72d01f9edd1803f5a36cfd509a32c48a680c2a5e","modified":1530932124246},{"_id":"public/2017/06/connector-wechat-bot-3/index.html","hash":"82d1fdc9ea5299924200628361555b30bbd14166","modified":1530932124246},{"_id":"public/archives/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124246},{"_id":"public/archives/page/2/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124246},{"_id":"public/archives/2017/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124246},{"_id":"public/archives/2017/06/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124246},{"_id":"public/archives/2017/07/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124246},{"_id":"public/archives/2017/09/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124247},{"_id":"public/archives/2018/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124247},{"_id":"public/archives/2018/05/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124247},{"_id":"public/archives/2018/07/index.html","hash":"eeacc42c6f1a53171598f86ceaabb67328e8cdf7","modified":1530932124247},{"_id":"public/page/2/index.html","hash":"d4bd5f503b2d84281d29997098fa9b6958e48310","modified":1530932124247},{"_id":"public/categories/解题报告/index.html","hash":"cb1ced525e27d5e5b411decc9bfb05f034638ed0","modified":1530932124247},{"_id":"public/categories/软件推荐/index.html","hash":"7b4f4a5e6523e95d7703410f606b332c477dcab8","modified":1530932124247},{"_id":"public/tags/概率论/index.html","hash":"4f2947c3853e16c2f1d49d8b358431f2565715ee","modified":1530932124247},{"_id":"public/tags/统计学/index.html","hash":"87b38027c7bbdef22746208ea8eed2a036493694","modified":1530932124247},{"_id":"public/tags/聊天机器人/index.html","hash":"48d763d1ab5db70aa20d6c7a8b905c46e21b9d2a","modified":1530932124247},{"_id":"public/tags/解题报告/index.html","hash":"99219397e7880cee11700db532bde264a579260b","modified":1530932124247},{"_id":"public/tags/LeetCode/index.html","hash":"a23dfa332413c64e0b9158f7755baf21283c8550","modified":1530932124248},{"_id":"public/tags/树/index.html","hash":"1aead3ad9ce9e1b4bb76503b745c8fbad0da12f8","modified":1530932124248},{"_id":"public/tags/递归/index.html","hash":"3f0643458ea687a0523331611fa49818229d0713","modified":1530932124248},{"_id":"public/tags/数组/index.html","hash":"bb0f72a7e493f9b7010685c61de8adb0e89e9306","modified":1530932124248},{"_id":"public/tags/模拟/index.html","hash":"c0eee8a3e1a4711c2a7b6113a143bdc83c6ff021","modified":1530932124248},{"_id":"public/tags/数论/index.html","hash":"034365488f5b68b3456e02b74591518f9caa1601","modified":1530932124248},{"_id":"public/tags/图论/index.html","hash":"5c99e4543c880f562945492e254837d3f74e70d7","modified":1530932124248},{"_id":"public/tags/字符串/index.html","hash":"0d075416a37e5a69edb71039ae9cdf35d4ed6d19","modified":1530932124248},{"_id":"public/tags/贪心/index.html","hash":"8a2e126846ebc4dd0dfd378855d89a8524ae231e","modified":1530932124249},{"_id":"public/tags/机器学习/index.html","hash":"e6eaf9aab178549c4cdb26af85a06db70b2759be","modified":1530932124249},{"_id":"public/tags/软件/index.html","hash":"e50357064d91ecc045aedca949c8b864fc595b2a","modified":1530932124249},{"_id":"public/tags/命令行/index.html","hash":"55723c12995b00287de7763e3e7e5dd12a129fe6","modified":1530932124249},{"_id":"public/tags/TopCoder/index.html","hash":"65b47477f13a42758710573d946d52735c926fd6","modified":1530932124249},{"_id":"public/tags/动态规划/index.html","hash":"13e1ad35e874e36dc3d85bab525844581b4ca597","modified":1530932124249},{"_id":"public/tags/背包问题/index.html","hash":"8205d9c71a366c254f770c0af489845424aeedf1","modified":1530932124249},{"_id":"public/tags/爬虫/index.html","hash":"715cfc3fe9c7978990ea2f72b57e4661492279dd","modified":1530932124249},{"_id":"public/2018/07/leetcode-189/index.html","hash":"1af116d7965a7f424d271171e7be90b0fdc70613","modified":1530932124249},{"_id":"public/2018/05/bus-waiting-paradox/index.html","hash":"2d92353aaa295292e18d5582b6f387b3d311970e","modified":1530932124249},{"_id":"public/2017/09/tldr-pages/index.html","hash":"47df3b0a2cc658473b7ab489bec98879b602a4d4","modified":1530932124250},{"_id":"public/2017/07/machine-learning-basic-concepts/index.html","hash":"2a874c13800eec13a1fee96f79b5953670c0f81c","modified":1530932124250},{"_id":"public/2017/07/weibo-login-20lines/index.html","hash":"2eb19c7cf5e234f6ab34096007ec6a1c6d81b309","modified":1530932124250},{"_id":"public/2017/06/connector-wechat-bot-2/index.html","hash":"e89bb5ca48f01ada194769a8340000def301efca","modified":1530932124250},{"_id":"public/2017/06/connector-wechat-bot-1/index.html","hash":"de5e8896ab55d5f80191dcb2b26deb8b9e1c9d7b","modified":1530932124250},{"_id":"public/index.html","hash":"d25862343dcde6dc4bd15cc4da5899a89e4db483","modified":1530932124250},{"_id":"public/categories/计算机课堂/index.html","hash":"971a691149ed29d52efcc3f7870a0a6addb4a860","modified":1530932124250},{"_id":"public/tags/Python/index.html","hash":"fc7307851783a9865f622f7f83565fa9f107b9df","modified":1530932124250},{"_id":"public/favicon.ico","hash":"00e1312a5677aa85b2bc7e8d860d011e823ef983","modified":1530932124256},{"_id":"public/favicon.png","hash":"0ab0db730d12abb50b2b7e0aa72f218046cf32f6","modified":1530932124256},{"_id":"public/images/avatar.jpg","hash":"e500ab32fbbaf67c20137c02af03112b01e517e5","modified":1530932124256},{"_id":"public/assets/bilibili.svg","hash":"1a0a8dbebb6c1cb7c13395eacee9c43059ee1002","modified":1530932124257},{"_id":"public/assets/github.svg","hash":"e5e61a745e2d621897ca16280415760408ff8fd2","modified":1530932124257},{"_id":"public/assets/jianshu.svg","hash":"c68336944597034fd7ae2157f5f5a335871d921e","modified":1530932124257},{"_id":"public/assets/weibo.svg","hash":"2ba01ddccb66e864b3451fa787cf1946df7b7733","modified":1530932124257},{"_id":"public/assets/bin.svg","hash":"10c98979d69d4278bdce97eb1b576da81028d0f9","modified":1530932124257},{"_id":"public/assets/zhihu.svg","hash":"a67f55c0abde69b719abf7faffdd6f2623a87690","modified":1530932124257},{"_id":"public/js/pager/LICENSE","hash":"c9e69c202fa2046fa96086557c74e37eb983762f","modified":1530932124257},{"_id":"public/js/pager/Makefile","hash":"01c1c29bde86f45167f56ad5b44fcfbd6a9551ee","modified":1530932124257},{"_id":"public/js/pager/src/singlepager.ts","hash":"b6c229d01a8e2cea1f0654f42e3bfbde8da6c7da","modified":1530932124257},{"_id":"public/assets/github.css","hash":"06dd7af250791fa3a1550be960faf6c550caabbb","modified":1530932124531},{"_id":"public/css/normalize/bower.json","hash":"f212fc3c7e921eec2011ccb04cd87c70add3a9bc","modified":1530932124531},{"_id":"public/css/normalize/test.html","hash":"e715a73343b017d87f78da2aae073cfd849b230e","modified":1530932124532},{"_id":"public/css/normalize/package.json","hash":"b375acff4742cb62f14a082eb4e8e015cd06f17f","modified":1530932124532},{"_id":"public/css/normalize/normalize.css","hash":"b2e67ca61fc06e08530de1a70c476c72000fa297","modified":1530932124532},{"_id":"public/js/pager/package.json","hash":"e9999665140b683a3ea7dde5e76ad9df0cc687a3","modified":1530932124532},{"_id":"public/js/pager/rollup.config.js","hash":"b784a6e03d6e13a7c6c5e82d6bbd456beb37719e","modified":1530932124532},{"_id":"public/js/pager/dist/singlepager.js","hash":"52d8a8f86357f1b907c6f6b3ddd117569dccb22f","modified":1530932124532},{"_id":"public/js/pager/test/test.html","hash":"3b07cb27a6942aea4515cc67902936153f310880","modified":1530932124532},{"_id":"public/js/pager/test/test1.html","hash":"9bea4ee467c99aadf39088cfbc8aa0e002d2359b","modified":1530932124532},{"_id":"public/css/style.css","hash":"d1c0c47050e26bb709153448791d4e1d1b2f979a","modified":1530932124532},{"_id":"public/css/normalize/LICENSE.html","hash":"1bc5294952ec602ba7eeb211921c44d943c58a41","modified":1530932124635},{"_id":"public/css/normalize/CHANGELOG.html","hash":"a5ce504ff11e83dbbd3d8be2d01f883efcc45fa1","modified":1530932124687},{"_id":"public/css/normalize/CONTRIBUTING.html","hash":"30e154f1322e83db042280a55f6dc0479fde7c31","modified":1530932124713},{"_id":"public/js/pager/README.html","hash":"89bf28f2d220b58741b38b72fca72b551b86750a","modified":1530932124883},{"_id":"public/css/normalize/README.html","hash":"4134eac769b06bcb855ed35e7f24d9d257d310e2","modified":1530932124896}],"Category":[{"name":"计算机课堂","_id":"cjjatgi3z0003xtd30xi1k6vs"},{"name":"解题报告","_id":"cjjatgi4h000kxtd31otol34l"},{"name":"软件推荐","_id":"cjjatgi4w0019xtd3krjoguv3"}],"Data":[],"Page":[{"title":"所有分类","date":"2018-07-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 所有分类\ndate: 2018-07-05 \ntype: categories\n---\n","updated":"2018-07-05T12:53:14.318Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjjatgi3w0001xtd3frpkq261","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"}],"Post":[{"title":"为什么公交车来的总比时间表上说的还久？","date":"2018-04-30T16:00:00.000Z","_content":"\n\n\n十字路口的红绿灯，每分钟交替一次的话，你在红灯的时候到达的平均等待时间是多久？\n\n$1分钟/2  = 半分钟$\n\n公交车平均五分钟来一次的话你等公交车要多久？\n\n$5分钟/2 =两分半$ \n\n错啦！这就是经典的等车悖论，因为公交车平均每五分钟来一辆，那么你的平均等待时间将是五分钟。\n\n\n\n# 均匀分布和指数分布\n\n红绿灯和公交车有什么不同的地方呢？\n\n<!--more-->\n\n我们往往假设，红绿灯每次交替的时间是固定的（假设是一分钟），是不随着雨天还是晴天而改变的。如果我们在任何时间抵达红绿灯前，我们到达的分布可以视作是均匀分布的（如下图）。\n\n![Uniform distribution PDF](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Uniform_distribution_PDF.png/350px-Uniform_distribution_PDF.png)\n\n也就是说，在每个红灯的前，我们可能的等待时间是从0分钟（一到灯就绿了）到1分钟之间（一到灯就红了）每个时间出现的可能性是完全一致的。因此我们可以简单地做一个平均运算来算出我们的期待值，也就是说：\n\n$E[X]={\\frac  {a+b}{2}} = {\\frac  {1+0}{2}} = {\\frac{1}{2}}$\n\n\n\n但是相比之下公交车则完全不同，公交车的到达时间是平均五分钟，这么说来和红绿灯则是完全不同。路况不同，路上的红绿灯稍有不同，就不可能在五分钟准时抵达。虽然人们脑海中认为公交车和红绿灯一样也是完全准时的，但事实却不是如此。我们往往将一段时间内到达公交车的数量假设为泊松分布，而公交车的间隔是指数分布的（下图）。\n\n![Probability density function](https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Exponential_pdf.svg/325px-Exponential_pdf.svg.png)\n\n如果从指数分布去考虑，我们等待的时间并不是均匀分布的。直观地说，我们到达等待时间更长的区间的可能性更大，因此我们等待的平均时间，并不是一个简单的算术平均值，而是一个加权平均值，而等待的时长也因此被拉高了。\n\n\n\n# 指数分布的无记忆性\n\n无记忆性指的是，指数分布的概率只和时间区间有关，和已经发生了多久（时间的起点）无关。用数学公式可以表达为：\n\n$\\Pr \\left (T > s + t | T > s \\right ) = \\Pr(T > t), \\qquad \\forall s, t \\ge 0$\n\n证明可以通过条件概率的贝叶斯定律。另外，由于对时间而言， $Pr(T>s+t\\cap T>s) = Pr(T>s+t)$ 易证上述公式成立。\n\n生活中有许多东西服从指数分布。例如电池等电子元件的寿命在低于某个值的时候：如果电池标示1000次充放电会坏，往往有些人的用了100次就坏了，而有些人的用了1000次也仍然完好无损。这和批次的质量等有关系，而在一个界限值之下，人们往往会将它的使用年限用指数分布来衡量：一块充放电100次的电池和一块充放300次的电池，在未来还能使用100次的概率是相同的。虽然听上去很不可思议，但是这也是由于指数分布的方差极大二导致的。\n\n同理，虽然听上去不可思议，但是你等公交车的时间往往也和上一辆车什么时候开走的没有什么关系，因为指数分布是没有记忆的，它不会“记得”上一次公交车经过的时间。而等待时间的平均值，和公交车间隔的平均值是相同的。\n\n\n\n# 等车悖论\n\n等车悖论告诉我们的不仅仅是你等车的时间要比你想象的长，更重要的是，我们必须要知道，我们脑海中假定的模型和现实生活中的模型总有一点偏差，而这点偏差往往导致的是我们捶胸顿足，发现自己又迟到了又赶不上车了。\n\n可能这就是所谓的“生活总有一些不如意吧”，因为是总有，所以背后就有其道理呀！","source":"_posts/bus-waiting-paradox.md","raw":"---\ntitle: 为什么公交车来的总比时间表上说的还久？\ndate: 2018-05-01\ncategory: 计算机课堂\ntags: \n- 概率论\n- 统计学\n---\n\n\n\n十字路口的红绿灯，每分钟交替一次的话，你在红灯的时候到达的平均等待时间是多久？\n\n$1分钟/2  = 半分钟$\n\n公交车平均五分钟来一次的话你等公交车要多久？\n\n$5分钟/2 =两分半$ \n\n错啦！这就是经典的等车悖论，因为公交车平均每五分钟来一辆，那么你的平均等待时间将是五分钟。\n\n\n\n# 均匀分布和指数分布\n\n红绿灯和公交车有什么不同的地方呢？\n\n<!--more-->\n\n我们往往假设，红绿灯每次交替的时间是固定的（假设是一分钟），是不随着雨天还是晴天而改变的。如果我们在任何时间抵达红绿灯前，我们到达的分布可以视作是均匀分布的（如下图）。\n\n![Uniform distribution PDF](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Uniform_distribution_PDF.png/350px-Uniform_distribution_PDF.png)\n\n也就是说，在每个红灯的前，我们可能的等待时间是从0分钟（一到灯就绿了）到1分钟之间（一到灯就红了）每个时间出现的可能性是完全一致的。因此我们可以简单地做一个平均运算来算出我们的期待值，也就是说：\n\n$E[X]={\\frac  {a+b}{2}} = {\\frac  {1+0}{2}} = {\\frac{1}{2}}$\n\n\n\n但是相比之下公交车则完全不同，公交车的到达时间是平均五分钟，这么说来和红绿灯则是完全不同。路况不同，路上的红绿灯稍有不同，就不可能在五分钟准时抵达。虽然人们脑海中认为公交车和红绿灯一样也是完全准时的，但事实却不是如此。我们往往将一段时间内到达公交车的数量假设为泊松分布，而公交车的间隔是指数分布的（下图）。\n\n![Probability density function](https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Exponential_pdf.svg/325px-Exponential_pdf.svg.png)\n\n如果从指数分布去考虑，我们等待的时间并不是均匀分布的。直观地说，我们到达等待时间更长的区间的可能性更大，因此我们等待的平均时间，并不是一个简单的算术平均值，而是一个加权平均值，而等待的时长也因此被拉高了。\n\n\n\n# 指数分布的无记忆性\n\n无记忆性指的是，指数分布的概率只和时间区间有关，和已经发生了多久（时间的起点）无关。用数学公式可以表达为：\n\n$\\Pr \\left (T > s + t | T > s \\right ) = \\Pr(T > t), \\qquad \\forall s, t \\ge 0$\n\n证明可以通过条件概率的贝叶斯定律。另外，由于对时间而言， $Pr(T>s+t\\cap T>s) = Pr(T>s+t)$ 易证上述公式成立。\n\n生活中有许多东西服从指数分布。例如电池等电子元件的寿命在低于某个值的时候：如果电池标示1000次充放电会坏，往往有些人的用了100次就坏了，而有些人的用了1000次也仍然完好无损。这和批次的质量等有关系，而在一个界限值之下，人们往往会将它的使用年限用指数分布来衡量：一块充放电100次的电池和一块充放300次的电池，在未来还能使用100次的概率是相同的。虽然听上去很不可思议，但是这也是由于指数分布的方差极大二导致的。\n\n同理，虽然听上去不可思议，但是你等公交车的时间往往也和上一辆车什么时候开走的没有什么关系，因为指数分布是没有记忆的，它不会“记得”上一次公交车经过的时间。而等待时间的平均值，和公交车间隔的平均值是相同的。\n\n\n\n# 等车悖论\n\n等车悖论告诉我们的不仅仅是你等车的时间要比你想象的长，更重要的是，我们必须要知道，我们脑海中假定的模型和现实生活中的模型总有一点偏差，而这点偏差往往导致的是我们捶胸顿足，发现自己又迟到了又赶不上车了。\n\n可能这就是所谓的“生活总有一些不如意吧”，因为是总有，所以背后就有其道理呀！","slug":"bus-waiting-paradox","published":1,"updated":"2018-07-03T13:44:30.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi3q0000xtd39n7kw2lk","content":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-beta/dist/katex.min.css\" integrity=\"sha384-9tPv11A+glH/on/wEu99NVwDPwkMQESOocs/ZGXPoIiLE8MU/qkqUcZ3zzL+6DuH\" crossorigin=\"anonymous\"><p>&#x5341;&#x5B57;&#x8DEF;&#x53E3;&#x7684;&#x7EA2;&#x7EFF;&#x706F;&#xFF0C;&#x6BCF;&#x5206;&#x949F;&#x4EA4;&#x66FF;&#x4E00;&#x6B21;&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x5728;&#x7EA2;&#x706F;&#x7684;&#x65F6;&#x5019;&#x5230;&#x8FBE;&#x7684;&#x5E73;&#x5747;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x662F;&#x591A;&#x4E45;&#xFF1F;</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">&#x5206;</mi><mi mathvariant=\"normal\">&#x949F;</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>=</mo><mi mathvariant=\"normal\">&#x534A;</mi><mi mathvariant=\"normal\">&#x5206;</mi><mi mathvariant=\"normal\">&#x949F;</mi></mrow><annotation encoding=\"application/x-tex\">1&#x5206;&#x949F;/2 = &#x534A;&#x5206;&#x949F;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">&#x5206;</span><span class=\"mord cjk_fallback\">&#x949F;</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">&#x534A;</span><span class=\"mord cjk_fallback\">&#x5206;</span><span class=\"mord cjk_fallback\">&#x949F;</span></span></span></span></p>\n<p>&#x516C;&#x4EA4;&#x8F66;&#x5E73;&#x5747;&#x4E94;&#x5206;&#x949F;&#x6765;&#x4E00;&#x6B21;&#x7684;&#x8BDD;&#x4F60;&#x7B49;&#x516C;&#x4EA4;&#x8F66;&#x8981;&#x591A;&#x4E45;&#xFF1F;</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>5</mn><mi mathvariant=\"normal\">&#x5206;</mi><mi mathvariant=\"normal\">&#x949F;</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>=</mo><mi mathvariant=\"normal\">&#x4E24;</mi><mi mathvariant=\"normal\">&#x5206;</mi><mi mathvariant=\"normal\">&#x534A;</mi></mrow><annotation encoding=\"application/x-tex\">5&#x5206;&#x949F;/2 =&#x4E24;&#x5206;&#x534A;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mord cjk_fallback\">&#x5206;</span><span class=\"mord cjk_fallback\">&#x949F;</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">&#x4E24;</span><span class=\"mord cjk_fallback\">&#x5206;</span><span class=\"mord cjk_fallback\">&#x534A;</span></span></span></span></p>\n<p>&#x9519;&#x5566;&#xFF01;&#x8FD9;&#x5C31;&#x662F;&#x7ECF;&#x5178;&#x7684;&#x7B49;&#x8F66;&#x6096;&#x8BBA;&#xFF0C;&#x56E0;&#x4E3A;&#x516C;&#x4EA4;&#x8F66;&#x5E73;&#x5747;&#x6BCF;&#x4E94;&#x5206;&#x949F;&#x6765;&#x4E00;&#x8F86;&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x7684;&#x5E73;&#x5747;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x5C06;&#x662F;&#x4E94;&#x5206;&#x949F;&#x3002;</p>\n<h1 id=\"&#x5747;&#x5300;&#x5206;&#x5E03;&#x548C;&#x6307;&#x6570;&#x5206;&#x5E03;\">&#x5747;&#x5300;&#x5206;&#x5E03;&#x548C;&#x6307;&#x6570;&#x5206;&#x5E03;</h1>\n<p>&#x7EA2;&#x7EFF;&#x706F;&#x548C;&#x516C;&#x4EA4;&#x8F66;&#x6709;&#x4EC0;&#x4E48;&#x4E0D;&#x540C;&#x7684;&#x5730;&#x65B9;&#x5462;&#xFF1F;</p>\n<a id=\"more\"></a>\n<p>&#x6211;&#x4EEC;&#x5F80;&#x5F80;&#x5047;&#x8BBE;&#xFF0C;&#x7EA2;&#x7EFF;&#x706F;&#x6BCF;&#x6B21;&#x4EA4;&#x66FF;&#x7684;&#x65F6;&#x95F4;&#x662F;&#x56FA;&#x5B9A;&#x7684;&#xFF08;&#x5047;&#x8BBE;&#x662F;&#x4E00;&#x5206;&#x949F;&#xFF09;&#xFF0C;&#x662F;&#x4E0D;&#x968F;&#x7740;&#x96E8;&#x5929;&#x8FD8;&#x662F;&#x6674;&#x5929;&#x800C;&#x6539;&#x53D8;&#x7684;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;&#x4EFB;&#x4F55;&#x65F6;&#x95F4;&#x62B5;&#x8FBE;&#x7EA2;&#x7EFF;&#x706F;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x5230;&#x8FBE;&#x7684;&#x5206;&#x5E03;&#x53EF;&#x4EE5;&#x89C6;&#x4F5C;&#x662F;&#x5747;&#x5300;&#x5206;&#x5E03;&#x7684;&#xFF08;&#x5982;&#x4E0B;&#x56FE;&#xFF09;&#x3002;</p>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Uniform_distribution_PDF.png/350px-Uniform_distribution_PDF.png\" alt=\"Uniform distribution PDF\"><figcaption>Uniform distribution PDF</figcaption>\n</figure>\n<p>&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5728;&#x6BCF;&#x4E2A;&#x7EA2;&#x706F;&#x7684;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x7684;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x662F;&#x4ECE;0&#x5206;&#x949F;&#xFF08;&#x4E00;&#x5230;&#x706F;&#x5C31;&#x7EFF;&#x4E86;&#xFF09;&#x5230;1&#x5206;&#x949F;&#x4E4B;&#x95F4;&#xFF08;&#x4E00;&#x5230;&#x706F;&#x5C31;&#x7EA2;&#x4E86;&#xFF09;&#x6BCF;&#x4E2A;&#x65F6;&#x95F4;&#x51FA;&#x73B0;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x662F;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#x7684;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5730;&#x505A;&#x4E00;&#x4E2A;&#x5E73;&#x5747;&#x8FD0;&#x7B97;&#x6765;&#x7B97;&#x51FA;&#x6211;&#x4EEC;&#x7684;&#x671F;&#x5F85;&#x503C;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF1A;</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mo>[</mo><mi>X</mi><mo>]</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>0</mn></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">E[X]={\\frac {a+b}{2}} = {\\frac {1+0}{2}} = {\\frac{1}{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">a</span><span class=\"mbin mtight\">+</span><span class=\"mord mathit mtight\">b</span></span></span></span></span><span class=\"vlist-s\">&#x200B;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">&#x200B;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">&#x200B;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>&#x4F46;&#x662F;&#x76F8;&#x6BD4;&#x4E4B;&#x4E0B;&#x516C;&#x4EA4;&#x8F66;&#x5219;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#xFF0C;&#x516C;&#x4EA4;&#x8F66;&#x7684;&#x5230;&#x8FBE;&#x65F6;&#x95F4;&#x662F;&#x5E73;&#x5747;&#x4E94;&#x5206;&#x949F;&#xFF0C;&#x8FD9;&#x4E48;&#x8BF4;&#x6765;&#x548C;&#x7EA2;&#x7EFF;&#x706F;&#x5219;&#x662F;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#x3002;&#x8DEF;&#x51B5;&#x4E0D;&#x540C;&#xFF0C;&#x8DEF;&#x4E0A;&#x7684;&#x7EA2;&#x7EFF;&#x706F;&#x7A0D;&#x6709;&#x4E0D;&#x540C;&#xFF0C;&#x5C31;&#x4E0D;&#x53EF;&#x80FD;&#x5728;&#x4E94;&#x5206;&#x949F;&#x51C6;&#x65F6;&#x62B5;&#x8FBE;&#x3002;&#x867D;&#x7136;&#x4EBA;&#x4EEC;&#x8111;&#x6D77;&#x4E2D;&#x8BA4;&#x4E3A;&#x516C;&#x4EA4;&#x8F66;&#x548C;&#x7EA2;&#x7EFF;&#x706F;&#x4E00;&#x6837;&#x4E5F;&#x662F;&#x5B8C;&#x5168;&#x51C6;&#x65F6;&#x7684;&#xFF0C;&#x4F46;&#x4E8B;&#x5B9E;&#x5374;&#x4E0D;&#x662F;&#x5982;&#x6B64;&#x3002;&#x6211;&#x4EEC;&#x5F80;&#x5F80;&#x5C06;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5185;&#x5230;&#x8FBE;&#x516C;&#x4EA4;&#x8F66;&#x7684;&#x6570;&#x91CF;&#x5047;&#x8BBE;&#x4E3A;&#x6CCA;&#x677E;&#x5206;&#x5E03;&#xFF0C;&#x800C;&#x516C;&#x4EA4;&#x8F66;&#x7684;&#x95F4;&#x9694;&#x662F;&#x6307;&#x6570;&#x5206;&#x5E03;&#x7684;&#xFF08;&#x4E0B;&#x56FE;&#xFF09;&#x3002;</p>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Exponential_pdf.svg/325px-Exponential_pdf.svg.png\" alt=\"Probability density function\"><figcaption>Probability density function</figcaption>\n</figure>\n<p>&#x5982;&#x679C;&#x4ECE;&#x6307;&#x6570;&#x5206;&#x5E03;&#x53BB;&#x8003;&#x8651;&#xFF0C;&#x6211;&#x4EEC;&#x7B49;&#x5F85;&#x7684;&#x65F6;&#x95F4;&#x5E76;&#x4E0D;&#x662F;&#x5747;&#x5300;&#x5206;&#x5E03;&#x7684;&#x3002;&#x76F4;&#x89C2;&#x5730;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x5230;&#x8FBE;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x66F4;&#x957F;&#x7684;&#x533A;&#x95F4;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x66F4;&#x5927;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x7B49;&#x5F85;&#x7684;&#x5E73;&#x5747;&#x65F6;&#x95F4;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x7B97;&#x672F;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x800C;&#x662F;&#x4E00;&#x4E2A;&#x52A0;&#x6743;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x800C;&#x7B49;&#x5F85;&#x7684;&#x65F6;&#x957F;&#x4E5F;&#x56E0;&#x6B64;&#x88AB;&#x62C9;&#x9AD8;&#x4E86;&#x3002;</p>\n<h1 id=\"&#x6307;&#x6570;&#x5206;&#x5E03;&#x7684;&#x65E0;&#x8BB0;&#x5FC6;&#x6027;\">&#x6307;&#x6570;&#x5206;&#x5E03;&#x7684;&#x65E0;&#x8BB0;&#x5FC6;&#x6027;</h1>\n<p>&#x65E0;&#x8BB0;&#x5FC6;&#x6027;&#x6307;&#x7684;&#x662F;&#xFF0C;&#x6307;&#x6570;&#x5206;&#x5E03;&#x7684;&#x6982;&#x7387;&#x53EA;&#x548C;&#x65F6;&#x95F4;&#x533A;&#x95F4;&#x6709;&#x5173;&#xFF0C;&#x548C;&#x5DF2;&#x7ECF;&#x53D1;&#x751F;&#x4E86;&#x591A;&#x4E45;&#xFF08;&#x65F6;&#x95F4;&#x7684;&#x8D77;&#x70B9;&#xFF09;&#x65E0;&#x5173;&#x3002;&#x7528;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x53EF;&#x4EE5;&#x8868;&#x8FBE;&#x4E3A;&#xFF1A;</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Pr</mi><mo>&#x2061;</mo><mrow><mo fence=\"true\">(</mo><mi>T</mi><mo>&gt;</mo><mi>s</mi><mo>+</mo><mi>t</mi><mi mathvariant=\"normal\">&#x2223;</mi><mi>T</mi><mo>&gt;</mo><mi>s</mi><mo fence=\"true\">)</mo></mrow><mo>=</mo><mi>Pr</mi><mo>&#x2061;</mo><mo>(</mo><mi>T</mi><mo>&gt;</mo><mi>t</mi><mo>)</mo><mo separator=\"true\">,</mo><mspace width=\"2em\"><mi mathvariant=\"normal\">&#x2200;</mi><mi>s</mi><mo separator=\"true\">,</mo><mi>t</mi><mo>&#x2265;</mo><mn>0</mn></mspace></mrow><annotation encoding=\"application/x-tex\">\\Pr \\left (T &gt; s + t | T &gt; s \\right ) = \\Pr(T &gt; t), \\qquad \\forall s, t \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">Pr</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathit\">t</span><span class=\"mord\">&#x2223;</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\">s</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">Pr</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord\">&#x2200;</span><span class=\"mord mathit\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&#x2265;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>&#x8BC1;&#x660E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6761;&#x4EF6;&#x6982;&#x7387;&#x7684;&#x8D1D;&#x53F6;&#x65AF;&#x5B9A;&#x5F8B;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x7531;&#x4E8E;&#x5BF9;&#x65F6;&#x95F4;&#x800C;&#x8A00;&#xFF0C; <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mo>(</mo><mi>T</mi><mo>&gt;</mo><mi>s</mi><mo>+</mo><mi>t</mi><mo>&#x2229;</mo><mi>T</mi><mo>&gt;</mo><mi>s</mi><mo>)</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo>(</mo><mi>T</mi><mo>&gt;</mo><mi>s</mi><mo>+</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">Pr(T&gt;s+t\\cap T&gt;s) = Pr(T&gt;s+t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathit\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">&#x2229;</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\">t</span><span class=\"mclose\">)</span></span></span></span> &#x6613;&#x8BC1;&#x4E0A;&#x8FF0;&#x516C;&#x5F0F;&#x6210;&#x7ACB;&#x3002;</p>\n<p>&#x751F;&#x6D3B;&#x4E2D;&#x6709;&#x8BB8;&#x591A;&#x4E1C;&#x897F;&#x670D;&#x4ECE;&#x6307;&#x6570;&#x5206;&#x5E03;&#x3002;&#x4F8B;&#x5982;&#x7535;&#x6C60;&#x7B49;&#x7535;&#x5B50;&#x5143;&#x4EF6;&#x7684;&#x5BFF;&#x547D;&#x5728;&#x4F4E;&#x4E8E;&#x67D0;&#x4E2A;&#x503C;&#x7684;&#x65F6;&#x5019;&#xFF1A;&#x5982;&#x679C;&#x7535;&#x6C60;&#x6807;&#x793A;1000&#x6B21;&#x5145;&#x653E;&#x7535;&#x4F1A;&#x574F;&#xFF0C;&#x5F80;&#x5F80;&#x6709;&#x4E9B;&#x4EBA;&#x7684;&#x7528;&#x4E86;100&#x6B21;&#x5C31;&#x574F;&#x4E86;&#xFF0C;&#x800C;&#x6709;&#x4E9B;&#x4EBA;&#x7684;&#x7528;&#x4E86;1000&#x6B21;&#x4E5F;&#x4ECD;&#x7136;&#x5B8C;&#x597D;&#x65E0;&#x635F;&#x3002;&#x8FD9;&#x548C;&#x6279;&#x6B21;&#x7684;&#x8D28;&#x91CF;&#x7B49;&#x6709;&#x5173;&#x7CFB;&#xFF0C;&#x800C;&#x5728;&#x4E00;&#x4E2A;&#x754C;&#x9650;&#x503C;&#x4E4B;&#x4E0B;&#xFF0C;&#x4EBA;&#x4EEC;&#x5F80;&#x5F80;&#x4F1A;&#x5C06;&#x5B83;&#x7684;&#x4F7F;&#x7528;&#x5E74;&#x9650;&#x7528;&#x6307;&#x6570;&#x5206;&#x5E03;&#x6765;&#x8861;&#x91CF;&#xFF1A;&#x4E00;&#x5757;&#x5145;&#x653E;&#x7535;100&#x6B21;&#x7684;&#x7535;&#x6C60;&#x548C;&#x4E00;&#x5757;&#x5145;&#x653E;300&#x6B21;&#x7684;&#x7535;&#x6C60;&#xFF0C;&#x5728;&#x672A;&#x6765;&#x8FD8;&#x80FD;&#x4F7F;&#x7528;100&#x6B21;&#x7684;&#x6982;&#x7387;&#x662F;&#x76F8;&#x540C;&#x7684;&#x3002;&#x867D;&#x7136;&#x542C;&#x4E0A;&#x53BB;&#x5F88;&#x4E0D;&#x53EF;&#x601D;&#x8BAE;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E5F;&#x662F;&#x7531;&#x4E8E;&#x6307;&#x6570;&#x5206;&#x5E03;&#x7684;&#x65B9;&#x5DEE;&#x6781;&#x5927;&#x4E8C;&#x5BFC;&#x81F4;&#x7684;&#x3002;</p>\n<p>&#x540C;&#x7406;&#xFF0C;&#x867D;&#x7136;&#x542C;&#x4E0A;&#x53BB;&#x4E0D;&#x53EF;&#x601D;&#x8BAE;&#xFF0C;&#x4F46;&#x662F;&#x4F60;&#x7B49;&#x516C;&#x4EA4;&#x8F66;&#x7684;&#x65F6;&#x95F4;&#x5F80;&#x5F80;&#x4E5F;&#x548C;&#x4E0A;&#x4E00;&#x8F86;&#x8F66;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x5F00;&#x8D70;&#x7684;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x5173;&#x7CFB;&#xFF0C;&#x56E0;&#x4E3A;&#x6307;&#x6570;&#x5206;&#x5E03;&#x662F;&#x6CA1;&#x6709;&#x8BB0;&#x5FC6;&#x7684;&#xFF0C;&#x5B83;&#x4E0D;&#x4F1A;&#x201C;&#x8BB0;&#x5F97;&#x201D;&#x4E0A;&#x4E00;&#x6B21;&#x516C;&#x4EA4;&#x8F66;&#x7ECF;&#x8FC7;&#x7684;&#x65F6;&#x95F4;&#x3002;&#x800C;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x7684;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x548C;&#x516C;&#x4EA4;&#x8F66;&#x95F4;&#x9694;&#x7684;&#x5E73;&#x5747;&#x503C;&#x662F;&#x76F8;&#x540C;&#x7684;&#x3002;</p>\n<h1 id=\"&#x7B49;&#x8F66;&#x6096;&#x8BBA;\">&#x7B49;&#x8F66;&#x6096;&#x8BBA;</h1>\n<p>&#x7B49;&#x8F66;&#x6096;&#x8BBA;&#x544A;&#x8BC9;&#x6211;&#x4EEC;&#x7684;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x4F60;&#x7B49;&#x8F66;&#x7684;&#x65F6;&#x95F4;&#x8981;&#x6BD4;&#x4F60;&#x60F3;&#x8C61;&#x7684;&#x957F;&#xFF0C;&#x66F4;&#x91CD;&#x8981;&#x7684;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x8981;&#x77E5;&#x9053;&#xFF0C;&#x6211;&#x4EEC;&#x8111;&#x6D77;&#x4E2D;&#x5047;&#x5B9A;&#x7684;&#x6A21;&#x578B;&#x548C;&#x73B0;&#x5B9E;&#x751F;&#x6D3B;&#x4E2D;&#x7684;&#x6A21;&#x578B;&#x603B;&#x6709;&#x4E00;&#x70B9;&#x504F;&#x5DEE;&#xFF0C;&#x800C;&#x8FD9;&#x70B9;&#x504F;&#x5DEE;&#x5F80;&#x5F80;&#x5BFC;&#x81F4;&#x7684;&#x662F;&#x6211;&#x4EEC;&#x6376;&#x80F8;&#x987F;&#x8DB3;&#xFF0C;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x53C8;&#x8FDF;&#x5230;&#x4E86;&#x53C8;&#x8D76;&#x4E0D;&#x4E0A;&#x8F66;&#x4E86;&#x3002;</p>\n<p>&#x53EF;&#x80FD;&#x8FD9;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#x201C;&#x751F;&#x6D3B;&#x603B;&#x6709;&#x4E00;&#x4E9B;&#x4E0D;&#x5982;&#x610F;&#x5427;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x603B;&#x6709;&#xFF0C;&#x6240;&#x4EE5;&#x80CC;&#x540E;&#x5C31;&#x6709;&#x5176;&#x9053;&#x7406;&#x5440;&#xFF01;</p>\n","site":{"data":{}},"excerpt":"<p>十字路口的红绿灯，每分钟交替一次的话，你在红灯的时候到达的平均等待时间是多久？</p>\n<p><span class=\"math inline\">\\(1分钟/2 = 半分钟\\)</span></p>\n<p>公交车平均五分钟来一次的话你等公交车要多久？</p>\n<p><span class=\"math inline\">\\(5分钟/2 =两分半\\)</span></p>\n<p>错啦！这就是经典的等车悖论，因为公交车平均每五分钟来一辆，那么你的平均等待时间将是五分钟。</p>\n<h1 id=\"均匀分布和指数分布\">均匀分布和指数分布</h1>\n<p>红绿灯和公交车有什么不同的地方呢？</p>","more":"<p>我们往往假设，红绿灯每次交替的时间是固定的（假设是一分钟），是不随着雨天还是晴天而改变的。如果我们在任何时间抵达红绿灯前，我们到达的分布可以视作是均匀分布的（如下图）。</p>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Uniform_distribution_PDF.png/350px-Uniform_distribution_PDF.png\" alt=\"Uniform distribution PDF\"><figcaption>Uniform distribution PDF</figcaption>\n</figure>\n<p>也就是说，在每个红灯的前，我们可能的等待时间是从0分钟（一到灯就绿了）到1分钟之间（一到灯就红了）每个时间出现的可能性是完全一致的。因此我们可以简单地做一个平均运算来算出我们的期待值，也就是说：</p>\n<p><span class=\"math inline\">\\(E[X]={\\frac {a+b}{2}} = {\\frac {1+0}{2}} = {\\frac{1}{2}}\\)</span></p>\n<p>但是相比之下公交车则完全不同，公交车的到达时间是平均五分钟，这么说来和红绿灯则是完全不同。路况不同，路上的红绿灯稍有不同，就不可能在五分钟准时抵达。虽然人们脑海中认为公交车和红绿灯一样也是完全准时的，但事实却不是如此。我们往往将一段时间内到达公交车的数量假设为泊松分布，而公交车的间隔是指数分布的（下图）。</p>\n<figure>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Exponential_pdf.svg/325px-Exponential_pdf.svg.png\" alt=\"Probability density function\"><figcaption>Probability density function</figcaption>\n</figure>\n<p>如果从指数分布去考虑，我们等待的时间并不是均匀分布的。直观地说，我们到达等待时间更长的区间的可能性更大，因此我们等待的平均时间，并不是一个简单的算术平均值，而是一个加权平均值，而等待的时长也因此被拉高了。</p>\n<h1 id=\"指数分布的无记忆性\">指数分布的无记忆性</h1>\n<p>无记忆性指的是，指数分布的概率只和时间区间有关，和已经发生了多久（时间的起点）无关。用数学公式可以表达为：</p>\n<p><span class=\"math inline\">\\(\\Pr \\left (T &gt; s + t | T &gt; s \\right ) = \\Pr(T &gt; t), \\qquad \\forall s, t \\ge 0\\)</span></p>\n<p>证明可以通过条件概率的贝叶斯定律。另外，由于对时间而言， <span class=\"math inline\">\\(Pr(T&gt;s+t\\cap T&gt;s) = Pr(T&gt;s+t)\\)</span> 易证上述公式成立。</p>\n<p>生活中有许多东西服从指数分布。例如电池等电子元件的寿命在低于某个值的时候：如果电池标示1000次充放电会坏，往往有些人的用了100次就坏了，而有些人的用了1000次也仍然完好无损。这和批次的质量等有关系，而在一个界限值之下，人们往往会将它的使用年限用指数分布来衡量：一块充放电100次的电池和一块充放300次的电池，在未来还能使用100次的概率是相同的。虽然听上去很不可思议，但是这也是由于指数分布的方差极大二导致的。</p>\n<p>同理，虽然听上去不可思议，但是你等公交车的时间往往也和上一辆车什么时候开走的没有什么关系，因为指数分布是没有记忆的，它不会“记得”上一次公交车经过的时间。而等待时间的平均值，和公交车间隔的平均值是相同的。</p>\n<h1 id=\"等车悖论\">等车悖论</h1>\n<p>等车悖论告诉我们的不仅仅是你等车的时间要比你想象的长，更重要的是，我们必须要知道，我们脑海中假定的模型和现实生活中的模型总有一点偏差，而这点偏差往往导致的是我们捶胸顿足，发现自己又迟到了又赶不上车了。</p>\n<p>可能这就是所谓的“生活总有一些不如意吧”，因为是总有，所以背后就有其道理呀！</p>"},{"title":"从零开始微信机器人（一）：wxpy简介","date":"2017-06-22T16:00:00.000Z","_content":"\n在过去的几个月中，由于在新生群中回答问题费时费力，同时又有许多重复而又有固定答案的回答，我受到一些知乎文章的启发，维护了一个基于itchat的群聊机器人。从刚开始接入图灵机器人时只会尬聊的机器人，之后又加入了api.ai的按照消息内容自动回复，而后再加入了回复表情功能，使得机器人变得越来越有趣。\n\n现在，由于itchat的更新和被wxpy一些更有趣的功能所吸引，我计划将这个机器人分步重写，并将完整的机器人构建步骤展现给大家。这是我第一次做这样的事，有诸多不足之处，也希望多多谅解和指正。\n\n<!--more-->\n\n本文很大程度上面向仅对python入门或是了解较少的开发者因此较为详细，希望最大程度上帮助大家从零开始构建一个属于自己的微信机器人，哪怕仅有很少的编程基础。每一篇会将长度控制在较短、能够快速阅读完的范围内。\n\n本文基于python 2.7，与python 3.5可能有语法上区别。\n\n\n\n## 安装wxpy\n\n安装wxpy非常简单，如果你拥有pip，请直接按照Github中的方法安装：\n\n> 从 PYPI 官方源下载安装 (在国内可能比较慢或不稳定):\n\n```shell\npip install -U wxpy\n```\n\n> 从豆瓣 PYPI 镜像源下载安装 (**推荐国内用户选用**):\n\n```shell\npip install -U wxpy -i \"https://pypi.doubanio.com/simple/\"\n```\n\n\n\n## 登录微信\n\n（这里吐槽一下wxpy文档中登录错写为登陆）\n\nGithub上和文档中给出了最简单的登录机器人的方式，在程序中写上这两行并运行，会通过图片扫描二维码并登录微信。\n\n```python\n# 导入模块\nfrom wxpy import *\n# 初始化机器人，扫码登陆\nbot = Bot()\n```\n\n有些情况下，可能不能通过终端打开图片（例如部署在服务器上时），我们可以通过参数选择在终端内显示二维码，这样代码会变为：\n\n```python\nfrom wxpy import *\nbot = Bot(console_qr=True)\n```\n\n如果你发现这样设置终端中的二维码变形了，可以尝试传入`console_qr=1`（或其他倍数）来进行调整字幅宽度。如果需要反色显示，可以使用负数来进行反色操作。\n\n如果你认为每次都需要扫描二维码很麻烦，可以启用缓存，来保存自己的登录状态：\n\n```python\nbot = Bot(console_qr=True, cache_path=True)\n```\n\n\n\n## 发送消息\n\n首先我们尝试给自己和文件传输助手发消息：\n\n```python\n# 给机器人自己发送消息\nbot.self.send('Hello World!')\n# 给文件传输助手发送消息\nbot.file_helper.send('Hello World!')\n```\n\n如果无法给机器人自身发送消息，请参考http://wxpy.readthedocs.io/zh/latest/bot.html#wxpy.Bot.self\n\n```python\n# 查找昵称为'乙醚。'的好友\nmy_friend = bot.friends().search(u'乙醚。')[0]\n# <Friend: 乙醚。>\n```\n\nwxpy同时也包括了发送不同类型消息的方法，通过这些方法我们可以发送各种不同类型的消息。以下是文档给出的样例使用方式：\n\n```python\n# 发送文本\nmy_friend.send('Hello, WeChat!')\n# 发送图片\nmy_friend.send_image('my_picture.png')\n# 发送视频\nmy_friend.send_video('my_video.mov')\n# 发送文件\nmy_friend.send_file('my_file.zip')\n# 以动态的方式发送图片\nmy_friend.send('@img@my_picture.png')\n```\n\n通过使用这些方法，我们就可以自定义一个在合适的时候做合适的事情的机器人了！\n\n由于群聊机器人设计暂时需要好友相关内容不多，此处不再作过过多赘述，如果有需要搜索好友的可以参考http://wxpy.readthedocs.io/zh/latest/chats.html#module-wxpy\n\n\n\n## 自动处理消息\n\nwxpy提供了注册消息的方法，可以简单将各种类型的消息注册并自定义处理方式。\n\n注册消息使用简单的`@bot.register()`方法，\n\n```python\n# 获取所有类型的消息（好友消息、群聊、公众号，不包括任何自己发送的消息）\n# 并将获得的消息打印到控制台\n@bot.register()\ndef print_others(msg):\n    print(msg)\n```\n\n同时wxpy也可以给注册消息的类型加上限制，\n\n```python\n# 回复 my_friend 发送的消息\n@bot.register(my_friend)\ndef reply_my_friend(msg):\n    return 'received: {} ({})'.format(msg.text, msg.type)\n\n# 回复发送给自己的消息，可以使用这个方法来进行测试机器人而不影响到他人\n@bot.register(bot.self, except_self=False)\ndef reply_self(msg):\n    return 'received: {} ({})'.format(msg.text, msg.type)\n\n# 打印出所有群聊中@自己的文本消息，并自动回复相同内容\n# 这条注册消息是我们构建群聊机器人的基础\n@bot.register(Group, TEXT)\ndef print_group_msg(msg):\n\tif msg.is_at:\n\t    print(msg)\n\t    msg.reply(meg.text)\n```\n\n当然仅仅写以上内容，会导致你的程序主程序运行结束自然退出。wxpy给出了`embed()`方法，在程序末尾（或其他你想要暂停调试的地方）加上`embed()`方法就可以让程序保持运行，同时进入Python命令行。\n\n```python\n# 进入 Python 命令行、让程序保持运行\n# 推荐使用\nembed()\n\n# 或者仅仅堵塞线程\n# bot.join()\n```\n\n关于消息注册的文档，更多内容可以参考http://wxpy.readthedocs.io/zh/latest/messages.html#id11\n\n现在，你已经可以用这个微信机器人和自动回复消息玩了！刺不刺激呢！\n\n下一篇中，我将就如何将API接入机器人进行阐述。\n\n\n\n# 你可能会遇到的一些问题\n\n## 报错[SSL: CERTIFICATE_VERIFY_FAILED]\n\n可能的**解决方案**一：\n\n```shell\npip install -U requests[security]\n```\n\n可能的**解决方案**二：\n\n进如python后运行：\n\n```python\nimport certifi \nprint(certifi.old_where())\n```\n\n把打印出的路径（例如我的是`/usr/local/lib/python2.7/site-packages/certifi/weak.pem`）放入环境变量`REQUESTS_CA_BUNDLE`中。具体而言是在*nix环境下运行：\n\n```shell\nexport REQUESTS_CA_BUNDLE='What you get'\n```\n\n或是在Windows中使用系统面板进行修改。","source":"_posts/connector-wechat-bot-1.md","raw":"---\ntitle: 从零开始微信机器人（一）：wxpy简介\ndate: 2017-06-23\ncategory: 计算机课堂\ntags: \n- Python\n- 聊天机器人\n---\n\n在过去的几个月中，由于在新生群中回答问题费时费力，同时又有许多重复而又有固定答案的回答，我受到一些知乎文章的启发，维护了一个基于itchat的群聊机器人。从刚开始接入图灵机器人时只会尬聊的机器人，之后又加入了api.ai的按照消息内容自动回复，而后再加入了回复表情功能，使得机器人变得越来越有趣。\n\n现在，由于itchat的更新和被wxpy一些更有趣的功能所吸引，我计划将这个机器人分步重写，并将完整的机器人构建步骤展现给大家。这是我第一次做这样的事，有诸多不足之处，也希望多多谅解和指正。\n\n<!--more-->\n\n本文很大程度上面向仅对python入门或是了解较少的开发者因此较为详细，希望最大程度上帮助大家从零开始构建一个属于自己的微信机器人，哪怕仅有很少的编程基础。每一篇会将长度控制在较短、能够快速阅读完的范围内。\n\n本文基于python 2.7，与python 3.5可能有语法上区别。\n\n\n\n## 安装wxpy\n\n安装wxpy非常简单，如果你拥有pip，请直接按照Github中的方法安装：\n\n> 从 PYPI 官方源下载安装 (在国内可能比较慢或不稳定):\n\n```shell\npip install -U wxpy\n```\n\n> 从豆瓣 PYPI 镜像源下载安装 (**推荐国内用户选用**):\n\n```shell\npip install -U wxpy -i \"https://pypi.doubanio.com/simple/\"\n```\n\n\n\n## 登录微信\n\n（这里吐槽一下wxpy文档中登录错写为登陆）\n\nGithub上和文档中给出了最简单的登录机器人的方式，在程序中写上这两行并运行，会通过图片扫描二维码并登录微信。\n\n```python\n# 导入模块\nfrom wxpy import *\n# 初始化机器人，扫码登陆\nbot = Bot()\n```\n\n有些情况下，可能不能通过终端打开图片（例如部署在服务器上时），我们可以通过参数选择在终端内显示二维码，这样代码会变为：\n\n```python\nfrom wxpy import *\nbot = Bot(console_qr=True)\n```\n\n如果你发现这样设置终端中的二维码变形了，可以尝试传入`console_qr=1`（或其他倍数）来进行调整字幅宽度。如果需要反色显示，可以使用负数来进行反色操作。\n\n如果你认为每次都需要扫描二维码很麻烦，可以启用缓存，来保存自己的登录状态：\n\n```python\nbot = Bot(console_qr=True, cache_path=True)\n```\n\n\n\n## 发送消息\n\n首先我们尝试给自己和文件传输助手发消息：\n\n```python\n# 给机器人自己发送消息\nbot.self.send('Hello World!')\n# 给文件传输助手发送消息\nbot.file_helper.send('Hello World!')\n```\n\n如果无法给机器人自身发送消息，请参考http://wxpy.readthedocs.io/zh/latest/bot.html#wxpy.Bot.self\n\n```python\n# 查找昵称为'乙醚。'的好友\nmy_friend = bot.friends().search(u'乙醚。')[0]\n# <Friend: 乙醚。>\n```\n\nwxpy同时也包括了发送不同类型消息的方法，通过这些方法我们可以发送各种不同类型的消息。以下是文档给出的样例使用方式：\n\n```python\n# 发送文本\nmy_friend.send('Hello, WeChat!')\n# 发送图片\nmy_friend.send_image('my_picture.png')\n# 发送视频\nmy_friend.send_video('my_video.mov')\n# 发送文件\nmy_friend.send_file('my_file.zip')\n# 以动态的方式发送图片\nmy_friend.send('@img@my_picture.png')\n```\n\n通过使用这些方法，我们就可以自定义一个在合适的时候做合适的事情的机器人了！\n\n由于群聊机器人设计暂时需要好友相关内容不多，此处不再作过过多赘述，如果有需要搜索好友的可以参考http://wxpy.readthedocs.io/zh/latest/chats.html#module-wxpy\n\n\n\n## 自动处理消息\n\nwxpy提供了注册消息的方法，可以简单将各种类型的消息注册并自定义处理方式。\n\n注册消息使用简单的`@bot.register()`方法，\n\n```python\n# 获取所有类型的消息（好友消息、群聊、公众号，不包括任何自己发送的消息）\n# 并将获得的消息打印到控制台\n@bot.register()\ndef print_others(msg):\n    print(msg)\n```\n\n同时wxpy也可以给注册消息的类型加上限制，\n\n```python\n# 回复 my_friend 发送的消息\n@bot.register(my_friend)\ndef reply_my_friend(msg):\n    return 'received: {} ({})'.format(msg.text, msg.type)\n\n# 回复发送给自己的消息，可以使用这个方法来进行测试机器人而不影响到他人\n@bot.register(bot.self, except_self=False)\ndef reply_self(msg):\n    return 'received: {} ({})'.format(msg.text, msg.type)\n\n# 打印出所有群聊中@自己的文本消息，并自动回复相同内容\n# 这条注册消息是我们构建群聊机器人的基础\n@bot.register(Group, TEXT)\ndef print_group_msg(msg):\n\tif msg.is_at:\n\t    print(msg)\n\t    msg.reply(meg.text)\n```\n\n当然仅仅写以上内容，会导致你的程序主程序运行结束自然退出。wxpy给出了`embed()`方法，在程序末尾（或其他你想要暂停调试的地方）加上`embed()`方法就可以让程序保持运行，同时进入Python命令行。\n\n```python\n# 进入 Python 命令行、让程序保持运行\n# 推荐使用\nembed()\n\n# 或者仅仅堵塞线程\n# bot.join()\n```\n\n关于消息注册的文档，更多内容可以参考http://wxpy.readthedocs.io/zh/latest/messages.html#id11\n\n现在，你已经可以用这个微信机器人和自动回复消息玩了！刺不刺激呢！\n\n下一篇中，我将就如何将API接入机器人进行阐述。\n\n\n\n# 你可能会遇到的一些问题\n\n## 报错[SSL: CERTIFICATE_VERIFY_FAILED]\n\n可能的**解决方案**一：\n\n```shell\npip install -U requests[security]\n```\n\n可能的**解决方案**二：\n\n进如python后运行：\n\n```python\nimport certifi \nprint(certifi.old_where())\n```\n\n把打印出的路径（例如我的是`/usr/local/lib/python2.7/site-packages/certifi/weak.pem`）放入环境变量`REQUESTS_CA_BUNDLE`中。具体而言是在*nix环境下运行：\n\n```shell\nexport REQUESTS_CA_BUNDLE='What you get'\n```\n\n或是在Windows中使用系统面板进行修改。","slug":"connector-wechat-bot-1","published":1,"updated":"2018-07-03T13:44:30.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi3w0002xtd3fel56bwe","content":"<p>&#x5728;&#x8FC7;&#x53BB;&#x7684;&#x51E0;&#x4E2A;&#x6708;&#x4E2D;&#xFF0C;&#x7531;&#x4E8E;&#x5728;&#x65B0;&#x751F;&#x7FA4;&#x4E2D;&#x56DE;&#x7B54;&#x95EE;&#x9898;&#x8D39;&#x65F6;&#x8D39;&#x529B;&#xFF0C;&#x540C;&#x65F6;&#x53C8;&#x6709;&#x8BB8;&#x591A;&#x91CD;&#x590D;&#x800C;&#x53C8;&#x6709;&#x56FA;&#x5B9A;&#x7B54;&#x6848;&#x7684;&#x56DE;&#x7B54;&#xFF0C;&#x6211;&#x53D7;&#x5230;&#x4E00;&#x4E9B;&#x77E5;&#x4E4E;&#x6587;&#x7AE0;&#x7684;&#x542F;&#x53D1;&#xFF0C;&#x7EF4;&#x62A4;&#x4E86;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;itchat&#x7684;&#x7FA4;&#x804A;&#x673A;&#x5668;&#x4EBA;&#x3002;&#x4ECE;&#x521A;&#x5F00;&#x59CB;&#x63A5;&#x5165;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x65F6;&#x53EA;&#x4F1A;&#x5C2C;&#x804A;&#x7684;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x4E4B;&#x540E;&#x53C8;&#x52A0;&#x5165;&#x4E86;api.ai&#x7684;&#x6309;&#x7167;&#x6D88;&#x606F;&#x5185;&#x5BB9;&#x81EA;&#x52A8;&#x56DE;&#x590D;&#xFF0C;&#x800C;&#x540E;&#x518D;&#x52A0;&#x5165;&#x4E86;&#x56DE;&#x590D;&#x8868;&#x60C5;&#x529F;&#x80FD;&#xFF0C;&#x4F7F;&#x5F97;&#x673A;&#x5668;&#x4EBA;&#x53D8;&#x5F97;&#x8D8A;&#x6765;&#x8D8A;&#x6709;&#x8DA3;&#x3002;</p>\n<p>&#x73B0;&#x5728;&#xFF0C;&#x7531;&#x4E8E;itchat&#x7684;&#x66F4;&#x65B0;&#x548C;&#x88AB;wxpy&#x4E00;&#x4E9B;&#x66F4;&#x6709;&#x8DA3;&#x7684;&#x529F;&#x80FD;&#x6240;&#x5438;&#x5F15;&#xFF0C;&#x6211;&#x8BA1;&#x5212;&#x5C06;&#x8FD9;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x5206;&#x6B65;&#x91CD;&#x5199;&#xFF0C;&#x5E76;&#x5C06;&#x5B8C;&#x6574;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x6784;&#x5EFA;&#x6B65;&#x9AA4;&#x5C55;&#x73B0;&#x7ED9;&#x5927;&#x5BB6;&#x3002;&#x8FD9;&#x662F;&#x6211;&#x7B2C;&#x4E00;&#x6B21;&#x505A;&#x8FD9;&#x6837;&#x7684;&#x4E8B;&#xFF0C;&#x6709;&#x8BF8;&#x591A;&#x4E0D;&#x8DB3;&#x4E4B;&#x5904;&#xFF0C;&#x4E5F;&#x5E0C;&#x671B;&#x591A;&#x591A;&#x8C05;&#x89E3;&#x548C;&#x6307;&#x6B63;&#x3002;</p>\n<a id=\"more\"></a>\n<p>&#x672C;&#x6587;&#x5F88;&#x5927;&#x7A0B;&#x5EA6;&#x4E0A;&#x9762;&#x5411;&#x4EC5;&#x5BF9;python&#x5165;&#x95E8;&#x6216;&#x662F;&#x4E86;&#x89E3;&#x8F83;&#x5C11;&#x7684;&#x5F00;&#x53D1;&#x8005;&#x56E0;&#x6B64;&#x8F83;&#x4E3A;&#x8BE6;&#x7EC6;&#xFF0C;&#x5E0C;&#x671B;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x4E0A;&#x5E2E;&#x52A9;&#x5927;&#x5BB6;&#x4ECE;&#x96F6;&#x5F00;&#x59CB;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x5C5E;&#x4E8E;&#x81EA;&#x5DF1;&#x7684;&#x5FAE;&#x4FE1;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x54EA;&#x6015;&#x4EC5;&#x6709;&#x5F88;&#x5C11;&#x7684;&#x7F16;&#x7A0B;&#x57FA;&#x7840;&#x3002;&#x6BCF;&#x4E00;&#x7BC7;&#x4F1A;&#x5C06;&#x957F;&#x5EA6;&#x63A7;&#x5236;&#x5728;&#x8F83;&#x77ED;&#x3001;&#x80FD;&#x591F;&#x5FEB;&#x901F;&#x9605;&#x8BFB;&#x5B8C;&#x7684;&#x8303;&#x56F4;&#x5185;&#x3002;</p>\n<p>&#x672C;&#x6587;&#x57FA;&#x4E8E;python 2.7&#xFF0C;&#x4E0E;python 3.5&#x53EF;&#x80FD;&#x6709;&#x8BED;&#x6CD5;&#x4E0A;&#x533A;&#x522B;&#x3002;</p>\n<h2 id=\"&#x5B89;&#x88C5;wxpy\">&#x5B89;&#x88C5;wxpy</h2>\n<p>&#x5B89;&#x88C5;wxpy&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x62E5;&#x6709;pip&#xFF0C;&#x8BF7;&#x76F4;&#x63A5;&#x6309;&#x7167;Github&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x5B89;&#x88C5;&#xFF1A;</p>\n<blockquote>\n<p>&#x4ECE; PYPI &#x5B98;&#x65B9;&#x6E90;&#x4E0B;&#x8F7D;&#x5B89;&#x88C5; (&#x5728;&#x56FD;&#x5185;&#x53EF;&#x80FD;&#x6BD4;&#x8F83;&#x6162;&#x6216;&#x4E0D;&#x7A33;&#x5B9A;):</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U wxpy</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&#x4ECE;&#x8C46;&#x74E3; PYPI &#x955C;&#x50CF;&#x6E90;&#x4E0B;&#x8F7D;&#x5B89;&#x88C5; (<strong>&#x63A8;&#x8350;&#x56FD;&#x5185;&#x7528;&#x6237;&#x9009;&#x7528;</strong>):</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U wxpy -i &quot;https://pypi.doubanio.com/simple/&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x767B;&#x5F55;&#x5FAE;&#x4FE1;\">&#x767B;&#x5F55;&#x5FAE;&#x4FE1;</h2>\n<p>&#xFF08;&#x8FD9;&#x91CC;&#x5410;&#x69FD;&#x4E00;&#x4E0B;wxpy&#x6587;&#x6863;&#x4E2D;&#x767B;&#x5F55;&#x9519;&#x5199;&#x4E3A;&#x767B;&#x9646;&#xFF09;</p>\n<p>Github&#x4E0A;&#x548C;&#x6587;&#x6863;&#x4E2D;&#x7ED9;&#x51FA;&#x4E86;&#x6700;&#x7B80;&#x5355;&#x7684;&#x767B;&#x5F55;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x4E2D;&#x5199;&#x4E0A;&#x8FD9;&#x4E24;&#x884C;&#x5E76;&#x8FD0;&#x884C;&#xFF0C;&#x4F1A;&#x901A;&#x8FC7;&#x56FE;&#x7247;&#x626B;&#x63CF;&#x4E8C;&#x7EF4;&#x7801;&#x5E76;&#x767B;&#x5F55;&#x5FAE;&#x4FE1;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x5BFC;&#x5165;&#x6A21;&#x5757;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wxpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># &#x521D;&#x59CB;&#x5316;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x626B;&#x7801;&#x767B;&#x9646;</span></span><br><span class=\"line\">bot = Bot()</span><br></pre></td></tr></table></figure>\n<p>&#x6709;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x80FD;&#x4E0D;&#x80FD;&#x901A;&#x8FC7;&#x7EC8;&#x7AEF;&#x6253;&#x5F00;&#x56FE;&#x7247;&#xFF08;&#x4F8B;&#x5982;&#x90E8;&#x7F72;&#x5728;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x65F6;&#xFF09;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53C2;&#x6570;&#x9009;&#x62E9;&#x5728;&#x7EC8;&#x7AEF;&#x5185;&#x663E;&#x793A;&#x4E8C;&#x7EF4;&#x7801;&#xFF0C;&#x8FD9;&#x6837;&#x4EE3;&#x7801;&#x4F1A;&#x53D8;&#x4E3A;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> wxpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">bot = Bot(console_qr=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x53D1;&#x73B0;&#x8FD9;&#x6837;&#x8BBE;&#x7F6E;&#x7EC8;&#x7AEF;&#x4E2D;&#x7684;&#x4E8C;&#x7EF4;&#x7801;&#x53D8;&#x5F62;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5;&#x4F20;&#x5165;<code>console_qr=1</code>&#xFF08;&#x6216;&#x5176;&#x4ED6;&#x500D;&#x6570;&#xFF09;&#x6765;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x5B57;&#x5E45;&#x5BBD;&#x5EA6;&#x3002;&#x5982;&#x679C;&#x9700;&#x8981;&#x53CD;&#x8272;&#x663E;&#x793A;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8D1F;&#x6570;&#x6765;&#x8FDB;&#x884C;&#x53CD;&#x8272;&#x64CD;&#x4F5C;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x8BA4;&#x4E3A;&#x6BCF;&#x6B21;&#x90FD;&#x9700;&#x8981;&#x626B;&#x63CF;&#x4E8C;&#x7EF4;&#x7801;&#x5F88;&#x9EBB;&#x70E6;&#xFF0C;&#x53EF;&#x4EE5;&#x542F;&#x7528;&#x7F13;&#x5B58;&#xFF0C;&#x6765;&#x4FDD;&#x5B58;&#x81EA;&#x5DF1;&#x7684;&#x767B;&#x5F55;&#x72B6;&#x6001;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bot = Bot(console_qr=<span class=\"keyword\">True</span>, cache_path=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x53D1;&#x9001;&#x6D88;&#x606F;\">&#x53D1;&#x9001;&#x6D88;&#x606F;</h2>\n<p>&#x9996;&#x5148;&#x6211;&#x4EEC;&#x5C1D;&#x8BD5;&#x7ED9;&#x81EA;&#x5DF1;&#x548C;&#x6587;&#x4EF6;&#x4F20;&#x8F93;&#x52A9;&#x624B;&#x53D1;&#x6D88;&#x606F;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x7ED9;&#x673A;&#x5668;&#x4EBA;&#x81EA;&#x5DF1;&#x53D1;&#x9001;&#x6D88;&#x606F;</span></span><br><span class=\"line\">bot.self.send(<span class=\"string\">&apos;Hello World!&apos;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x7ED9;&#x6587;&#x4EF6;&#x4F20;&#x8F93;&#x52A9;&#x624B;&#x53D1;&#x9001;&#x6D88;&#x606F;</span></span><br><span class=\"line\">bot.file_helper.send(<span class=\"string\">&apos;Hello World!&apos;</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x7ED9;&#x673A;&#x5668;&#x4EBA;&#x81EA;&#x8EAB;&#x53D1;&#x9001;&#x6D88;&#x606F;&#xFF0C;&#x8BF7;&#x53C2;&#x8003;http://wxpy.readthedocs.io/zh/latest/bot.html#wxpy.Bot.self</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x67E5;&#x627E;&#x6635;&#x79F0;&#x4E3A;&apos;&#x4E59;&#x919A;&#x3002;&apos;&#x7684;&#x597D;&#x53CB;</span></span><br><span class=\"line\">my_friend = bot.friends().search(<span class=\"string\">u&apos;&#x4E59;&#x919A;&#x3002;&apos;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># &lt;Friend: &#x4E59;&#x919A;&#x3002;&gt;</span></span><br></pre></td></tr></table></figure>\n<p>wxpy&#x540C;&#x65F6;&#x4E5F;&#x5305;&#x62EC;&#x4E86;&#x53D1;&#x9001;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x5404;&#x79CD;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x6D88;&#x606F;&#x3002;&#x4EE5;&#x4E0B;&#x662F;&#x6587;&#x6863;&#x7ED9;&#x51FA;&#x7684;&#x6837;&#x4F8B;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x53D1;&#x9001;&#x6587;&#x672C;</span></span><br><span class=\"line\">my_friend.send(<span class=\"string\">&apos;Hello, WeChat!&apos;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x53D1;&#x9001;&#x56FE;&#x7247;</span></span><br><span class=\"line\">my_friend.send_image(<span class=\"string\">&apos;my_picture.png&apos;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x53D1;&#x9001;&#x89C6;&#x9891;</span></span><br><span class=\"line\">my_friend.send_video(<span class=\"string\">&apos;my_video.mov&apos;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x53D1;&#x9001;&#x6587;&#x4EF6;</span></span><br><span class=\"line\">my_friend.send_file(<span class=\"string\">&apos;my_file.zip&apos;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#x4EE5;&#x52A8;&#x6001;&#x7684;&#x65B9;&#x5F0F;&#x53D1;&#x9001;&#x56FE;&#x7247;</span></span><br><span class=\"line\">my_friend.send(<span class=\"string\">&apos;@img@my_picture.png&apos;</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5728;&#x5408;&#x9002;&#x7684;&#x65F6;&#x5019;&#x505A;&#x5408;&#x9002;&#x7684;&#x4E8B;&#x60C5;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x4E86;&#xFF01;</p>\n<p>&#x7531;&#x4E8E;&#x7FA4;&#x804A;&#x673A;&#x5668;&#x4EBA;&#x8BBE;&#x8BA1;&#x6682;&#x65F6;&#x9700;&#x8981;&#x597D;&#x53CB;&#x76F8;&#x5173;&#x5185;&#x5BB9;&#x4E0D;&#x591A;&#xFF0C;&#x6B64;&#x5904;&#x4E0D;&#x518D;&#x4F5C;&#x8FC7;&#x8FC7;&#x591A;&#x8D58;&#x8FF0;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x9700;&#x8981;&#x641C;&#x7D22;&#x597D;&#x53CB;&#x7684;&#x53EF;&#x4EE5;&#x53C2;&#x8003;http://wxpy.readthedocs.io/zh/latest/chats.html#module-wxpy</p>\n<h2 id=\"&#x81EA;&#x52A8;&#x5904;&#x7406;&#x6D88;&#x606F;\">&#x81EA;&#x52A8;&#x5904;&#x7406;&#x6D88;&#x606F;</h2>\n<p>wxpy&#x63D0;&#x4F9B;&#x4E86;&#x6CE8;&#x518C;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5C06;&#x5404;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x6D88;&#x606F;&#x6CE8;&#x518C;&#x5E76;&#x81EA;&#x5B9A;&#x4E49;&#x5904;&#x7406;&#x65B9;&#x5F0F;&#x3002;</p>\n<p>&#x6CE8;&#x518C;&#x6D88;&#x606F;&#x4F7F;&#x7528;&#x7B80;&#x5355;&#x7684;<code>@bot.register()</code>&#x65B9;&#x6CD5;&#xFF0C;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x83B7;&#x53D6;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x7684;&#x6D88;&#x606F;&#xFF08;&#x597D;&#x53CB;&#x6D88;&#x606F;&#x3001;&#x7FA4;&#x804A;&#x3001;&#x516C;&#x4F17;&#x53F7;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x4EFB;&#x4F55;&#x81EA;&#x5DF1;&#x53D1;&#x9001;&#x7684;&#x6D88;&#x606F;&#xFF09;</span></span><br><span class=\"line\"><span class=\"comment\"># &#x5E76;&#x5C06;&#x83B7;&#x5F97;&#x7684;&#x6D88;&#x606F;&#x6253;&#x5370;&#x5230;&#x63A7;&#x5236;&#x53F0;</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_others</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    print(msg)</span><br></pre></td></tr></table></figure>\n<p>&#x540C;&#x65F6;wxpy&#x4E5F;&#x53EF;&#x4EE5;&#x7ED9;&#x6CE8;&#x518C;&#x6D88;&#x606F;&#x7684;&#x7C7B;&#x578B;&#x52A0;&#x4E0A;&#x9650;&#x5236;&#xFF0C;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x56DE;&#x590D; my_friend &#x53D1;&#x9001;&#x7684;&#x6D88;&#x606F;</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register(my_friend)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reply_my_friend</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&apos;received: {} ({})&apos;</span>.format(msg.text, msg.type)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#x56DE;&#x590D;&#x53D1;&#x9001;&#x7ED9;&#x81EA;&#x5DF1;&#x7684;&#x6D88;&#x606F;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6765;&#x8FDB;&#x884C;&#x6D4B;&#x8BD5;&#x673A;&#x5668;&#x4EBA;&#x800C;&#x4E0D;&#x5F71;&#x54CD;&#x5230;&#x4ED6;&#x4EBA;</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register(bot.self, except_self=False)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reply_self</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&apos;received: {} ({})&apos;</span>.format(msg.text, msg.type)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#x6253;&#x5370;&#x51FA;&#x6240;&#x6709;&#x7FA4;&#x804A;&#x4E2D;@&#x81EA;&#x5DF1;&#x7684;&#x6587;&#x672C;&#x6D88;&#x606F;&#xFF0C;&#x5E76;&#x81EA;&#x52A8;&#x56DE;&#x590D;&#x76F8;&#x540C;&#x5185;&#x5BB9;</span></span><br><span class=\"line\"><span class=\"comment\"># &#x8FD9;&#x6761;&#x6CE8;&#x518C;&#x6D88;&#x606F;&#x662F;&#x6211;&#x4EEC;&#x6784;&#x5EFA;&#x7FA4;&#x804A;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x57FA;&#x7840;</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register(Group, TEXT)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_group_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msg.is_at:</span><br><span class=\"line\">\t    print(msg)</span><br><span class=\"line\">\t    msg.reply(meg.text)</span><br></pre></td></tr></table></figure>\n<p>&#x5F53;&#x7136;&#x4EC5;&#x4EC5;&#x5199;&#x4EE5;&#x4E0A;&#x5185;&#x5BB9;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x4F60;&#x7684;&#x7A0B;&#x5E8F;&#x4E3B;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x7ED3;&#x675F;&#x81EA;&#x7136;&#x9000;&#x51FA;&#x3002;wxpy&#x7ED9;&#x51FA;&#x4E86;<code>embed()</code>&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x672B;&#x5C3E;&#xFF08;&#x6216;&#x5176;&#x4ED6;&#x4F60;&#x60F3;&#x8981;&#x6682;&#x505C;&#x8C03;&#x8BD5;&#x7684;&#x5730;&#x65B9;&#xFF09;&#x52A0;&#x4E0A;<code>embed()</code>&#x65B9;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5;&#x8BA9;&#x7A0B;&#x5E8F;&#x4FDD;&#x6301;&#x8FD0;&#x884C;&#xFF0C;&#x540C;&#x65F6;&#x8FDB;&#x5165;Python&#x547D;&#x4EE4;&#x884C;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &#x8FDB;&#x5165; Python &#x547D;&#x4EE4;&#x884C;&#x3001;&#x8BA9;&#x7A0B;&#x5E8F;&#x4FDD;&#x6301;&#x8FD0;&#x884C;</span></span><br><span class=\"line\"><span class=\"comment\"># &#x63A8;&#x8350;&#x4F7F;&#x7528;</span></span><br><span class=\"line\">embed()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#x6216;&#x8005;&#x4EC5;&#x4EC5;&#x5835;&#x585E;&#x7EBF;&#x7A0B;</span></span><br><span class=\"line\"><span class=\"comment\"># bot.join()</span></span><br></pre></td></tr></table></figure>\n<p>&#x5173;&#x4E8E;&#x6D88;&#x606F;&#x6CE8;&#x518C;&#x7684;&#x6587;&#x6863;&#xFF0C;&#x66F4;&#x591A;&#x5185;&#x5BB9;&#x53EF;&#x4EE5;&#x53C2;&#x8003;http://wxpy.readthedocs.io/zh/latest/messages.html#id11</p>\n<p>&#x73B0;&#x5728;&#xFF0C;&#x4F60;&#x5DF2;&#x7ECF;&#x53EF;&#x4EE5;&#x7528;&#x8FD9;&#x4E2A;&#x5FAE;&#x4FE1;&#x673A;&#x5668;&#x4EBA;&#x548C;&#x81EA;&#x52A8;&#x56DE;&#x590D;&#x6D88;&#x606F;&#x73A9;&#x4E86;&#xFF01;&#x523A;&#x4E0D;&#x523A;&#x6FC0;&#x5462;&#xFF01;</p>\n<p>&#x4E0B;&#x4E00;&#x7BC7;&#x4E2D;&#xFF0C;&#x6211;&#x5C06;&#x5C31;&#x5982;&#x4F55;&#x5C06;API&#x63A5;&#x5165;&#x673A;&#x5668;&#x4EBA;&#x8FDB;&#x884C;&#x9610;&#x8FF0;&#x3002;</p>\n<h1 id=\"&#x4F60;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;\">&#x4F60;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;</h1>\n<h2 id=\"&#x62A5;&#x9519;ssl-certificate_verify_failed\">&#x62A5;&#x9519;[SSL: CERTIFICATE_VERIFY_FAILED]</h2>\n<p>&#x53EF;&#x80FD;&#x7684;<strong>&#x89E3;&#x51B3;&#x65B9;&#x6848;</strong>&#x4E00;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U requests[security]</span><br></pre></td></tr></table></figure>\n<p>&#x53EF;&#x80FD;&#x7684;<strong>&#x89E3;&#x51B3;&#x65B9;&#x6848;</strong>&#x4E8C;&#xFF1A;</p>\n<p>&#x8FDB;&#x5982;python&#x540E;&#x8FD0;&#x884C;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> certifi </span><br><span class=\"line\">print(certifi.old_where())</span><br></pre></td></tr></table></figure>\n<p>&#x628A;&#x6253;&#x5370;&#x51FA;&#x7684;&#x8DEF;&#x5F84;&#xFF08;&#x4F8B;&#x5982;&#x6211;&#x7684;&#x662F;<code>/usr/local/lib/python2.7/site-packages/certifi/weak.pem</code>&#xFF09;&#x653E;&#x5165;&#x73AF;&#x5883;&#x53D8;&#x91CF;<code>REQUESTS_CA_BUNDLE</code>&#x4E2D;&#x3002;&#x5177;&#x4F53;&#x800C;&#x8A00;&#x662F;&#x5728;*nix&#x73AF;&#x5883;&#x4E0B;&#x8FD0;&#x884C;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export REQUESTS_CA_BUNDLE=&apos;What you get&apos;</span><br></pre></td></tr></table></figure>\n<p>&#x6216;&#x662F;&#x5728;Windows&#x4E2D;&#x4F7F;&#x7528;&#x7CFB;&#x7EDF;&#x9762;&#x677F;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x3002;</p>\n","site":{"data":{}},"excerpt":"<p>在过去的几个月中，由于在新生群中回答问题费时费力，同时又有许多重复而又有固定答案的回答，我受到一些知乎文章的启发，维护了一个基于itchat的群聊机器人。从刚开始接入图灵机器人时只会尬聊的机器人，之后又加入了api.ai的按照消息内容自动回复，而后再加入了回复表情功能，使得机器人变得越来越有趣。</p>\n<p>现在，由于itchat的更新和被wxpy一些更有趣的功能所吸引，我计划将这个机器人分步重写，并将完整的机器人构建步骤展现给大家。这是我第一次做这样的事，有诸多不足之处，也希望多多谅解和指正。</p>","more":"<p>本文很大程度上面向仅对python入门或是了解较少的开发者因此较为详细，希望最大程度上帮助大家从零开始构建一个属于自己的微信机器人，哪怕仅有很少的编程基础。每一篇会将长度控制在较短、能够快速阅读完的范围内。</p>\n<p>本文基于python 2.7，与python 3.5可能有语法上区别。</p>\n<h2 id=\"安装wxpy\">安装wxpy</h2>\n<p>安装wxpy非常简单，如果你拥有pip，请直接按照Github中的方法安装：</p>\n<blockquote>\n<p>从 PYPI 官方源下载安装 (在国内可能比较慢或不稳定):</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U wxpy</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从豆瓣 PYPI 镜像源下载安装 (<strong>推荐国内用户选用</strong>):</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U wxpy -i \"https://pypi.doubanio.com/simple/\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"登录微信\">登录微信</h2>\n<p>（这里吐槽一下wxpy文档中登录错写为登陆）</p>\n<p>Github上和文档中给出了最简单的登录机器人的方式，在程序中写上这两行并运行，会通过图片扫描二维码并登录微信。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> wxpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># 初始化机器人，扫码登陆</span></span><br><span class=\"line\">bot = Bot()</span><br></pre></td></tr></table></figure>\n<p>有些情况下，可能不能通过终端打开图片（例如部署在服务器上时），我们可以通过参数选择在终端内显示二维码，这样代码会变为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> wxpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">bot = Bot(console_qr=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你发现这样设置终端中的二维码变形了，可以尝试传入<code>console_qr=1</code>（或其他倍数）来进行调整字幅宽度。如果需要反色显示，可以使用负数来进行反色操作。</p>\n<p>如果你认为每次都需要扫描二维码很麻烦，可以启用缓存，来保存自己的登录状态：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bot = Bot(console_qr=<span class=\"keyword\">True</span>, cache_path=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"发送消息\">发送消息</h2>\n<p>首先我们尝试给自己和文件传输助手发消息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给机器人自己发送消息</span></span><br><span class=\"line\">bot.self.send(<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 给文件传输助手发送消息</span></span><br><span class=\"line\">bot.file_helper.send(<span class=\"string\">'Hello World!'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果无法给机器人自身发送消息，请参考http://wxpy.readthedocs.io/zh/latest/bot.html#wxpy.Bot.self</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找昵称为'乙醚。'的好友</span></span><br><span class=\"line\">my_friend = bot.friends().search(<span class=\"string\">u'乙醚。'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># &lt;Friend: 乙醚。&gt;</span></span><br></pre></td></tr></table></figure>\n<p>wxpy同时也包括了发送不同类型消息的方法，通过这些方法我们可以发送各种不同类型的消息。以下是文档给出的样例使用方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送文本</span></span><br><span class=\"line\">my_friend.send(<span class=\"string\">'Hello, WeChat!'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 发送图片</span></span><br><span class=\"line\">my_friend.send_image(<span class=\"string\">'my_picture.png'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 发送视频</span></span><br><span class=\"line\">my_friend.send_video(<span class=\"string\">'my_video.mov'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 发送文件</span></span><br><span class=\"line\">my_friend.send_file(<span class=\"string\">'my_file.zip'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 以动态的方式发送图片</span></span><br><span class=\"line\">my_friend.send(<span class=\"string\">'@img@my_picture.png'</span>)</span><br></pre></td></tr></table></figure>\n<p>通过使用这些方法，我们就可以自定义一个在合适的时候做合适的事情的机器人了！</p>\n<p>由于群聊机器人设计暂时需要好友相关内容不多，此处不再作过过多赘述，如果有需要搜索好友的可以参考http://wxpy.readthedocs.io/zh/latest/chats.html#module-wxpy</p>\n<h2 id=\"自动处理消息\">自动处理消息</h2>\n<p>wxpy提供了注册消息的方法，可以简单将各种类型的消息注册并自定义处理方式。</p>\n<p>注册消息使用简单的<code>@bot.register()</code>方法，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取所有类型的消息（好友消息、群聊、公众号，不包括任何自己发送的消息）</span></span><br><span class=\"line\"><span class=\"comment\"># 并将获得的消息打印到控制台</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_others</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    print(msg)</span><br></pre></td></tr></table></figure>\n<p>同时wxpy也可以给注册消息的类型加上限制，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 回复 my_friend 发送的消息</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register(my_friend)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reply_my_friend</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'received: &#123;&#125; (&#123;&#125;)'</span>.format(msg.text, msg.type)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回复发送给自己的消息，可以使用这个方法来进行测试机器人而不影响到他人</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register(bot.self, except_self=False)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reply_self</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'received: &#123;&#125; (&#123;&#125;)'</span>.format(msg.text, msg.type)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印出所有群聊中@自己的文本消息，并自动回复相同内容</span></span><br><span class=\"line\"><span class=\"comment\"># 这条注册消息是我们构建群聊机器人的基础</span></span><br><span class=\"line\"><span class=\"meta\">@bot.register(Group, TEXT)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_group_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msg.is_at:</span><br><span class=\"line\">\t    print(msg)</span><br><span class=\"line\">\t    msg.reply(meg.text)</span><br></pre></td></tr></table></figure>\n<p>当然仅仅写以上内容，会导致你的程序主程序运行结束自然退出。wxpy给出了<code>embed()</code>方法，在程序末尾（或其他你想要暂停调试的地方）加上<code>embed()</code>方法就可以让程序保持运行，同时进入Python命令行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Python 命令行、让程序保持运行</span></span><br><span class=\"line\"><span class=\"comment\"># 推荐使用</span></span><br><span class=\"line\">embed()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者仅仅堵塞线程</span></span><br><span class=\"line\"><span class=\"comment\"># bot.join()</span></span><br></pre></td></tr></table></figure>\n<p>关于消息注册的文档，更多内容可以参考http://wxpy.readthedocs.io/zh/latest/messages.html#id11</p>\n<p>现在，你已经可以用这个微信机器人和自动回复消息玩了！刺不刺激呢！</p>\n<p>下一篇中，我将就如何将API接入机器人进行阐述。</p>\n<h1 id=\"你可能会遇到的一些问题\">你可能会遇到的一些问题</h1>\n<h2 id=\"报错ssl-certificate_verify_failed\">报错[SSL: CERTIFICATE_VERIFY_FAILED]</h2>\n<p>可能的<strong>解决方案</strong>一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U requests[security]</span><br></pre></td></tr></table></figure>\n<p>可能的<strong>解决方案</strong>二：</p>\n<p>进如python后运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> certifi </span><br><span class=\"line\">print(certifi.old_where())</span><br></pre></td></tr></table></figure>\n<p>把打印出的路径（例如我的是<code>/usr/local/lib/python2.7/site-packages/certifi/weak.pem</code>）放入环境变量<code>REQUESTS_CA_BUNDLE</code>中。具体而言是在*nix环境下运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export REQUESTS_CA_BUNDLE='What you get'</span><br></pre></td></tr></table></figure>\n<p>或是在Windows中使用系统面板进行修改。</p>"},{"title":"从零开始微信机器人（二）：使用图灵机器人和api.ai相关接口","date":"2017-06-23T16:00:00.000Z","_content":"\n\n\n# 图灵机器人相关接口\n\n图灵机器人是一个中文语境下的对话机器人，免费的机器人每天有5000次调用的，如果放在群聊中是完全够用的（如果只有@的消息才使用机器人回复的）。图灵机器人也包括一些简单的能力，比如讲笑话、故事大全、成语接龙、新闻资讯等，我们将介绍如何简单调用图灵机器人接口。\n\n\n\n## 前期准备\n\n1. 前往注册[图灵机器人](http://www.tuling123.com/)，增加一个机器人，并记录机器人的APIKey。具体注册方法可以前往[图灵API](http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc)查看。（如果你觉得很麻烦， 也可以暂时使用itchat提供的几个[key](http://itchat.readthedocs.io/zh/latest/tutorial/tutorial0/#3_1)）\n\n2. 安装[Requests: HTTP for Humans](http://docs.python-requests.org/)\n\n   ```shell\n   # 从 pip 安装 ()\n   pip install requests\n   ```\n\n   并在机器人中导入Requests包（写在程序最初）：\n\n   ```python\n   import requests\n   ```\n\n\n<!--more-->\n\n## 调用接口\n\nwxpy提供了图灵的接口，使用方法：\n\n```python\ntuling = Tuling(api_key='Your API Key') # 刚才申请的key\n\n@bot.register(my_friend) # 注册消息\ndef reply_my_friend(msg):\n    tuling.do_reply(msg)\n```\n\n为了让大家了解HTTP协议在python中的使用方式，我接下来会介绍如何使用请求获取信息。\n\n本节中内容如果没有特殊提示，都应写在你希望处理的某种注册了的消息方法中以保证它的正常运作。\n\n首先，将图灵API写入程序中：\n\n```python\nTULING_TOKEN = 'Your API Key'\n```\n\n然后，定义接口链接和需要传输的数据：\n\n```python\nurl_api = 'http://www.tuling123.com/openapi/api'\ndata = {\n    'key'    : TULING_TOKEN,\n    'info'   : msg.text, # 收到消息的文字内容\n}\n```\n根据文档，通过HTTP请求，我们将会得到一个json格式的文件。使用Requests包，我们可以简单的获得调用接口所返回的信息：\n\n```python\ns = requests.post(url_api, data=data).json()\nprint s # 打印所获得的json查看如何使用\n# {u'text': u'回复的内容', u'code': 100000}\n```\n\n我们发现经过请求，我们一般会得到一个字典内容，其中包括text和code两项：text是图灵机器人回复的文本，而code是返回的编号。详细的返回数据格式也可以在[图灵API](http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc)中看到，除了文字类还有新闻类、图片类、链接类等返回类型。在这里我们以文字类为例，介绍如何处理：\n\n```python\nif s['code'] == 100000:\n\t\tprint s['text'] # 查看回复消息的内容，可省略\n\t\tmsg.reply(s['text']) # 回复消息\n```\n\n如果需要回复其他类型的消息，也完全可以通过判断code确定消息类型，再决定如何回复。这里给出我的回复方法供大家参考（也可以选择不处理这一类内容）：\n\n```python\nif s['code'] == 200000: # 链接类：回复文字和链接\n    msg.reply(s['text'] + s['url'])\n```\n\n至此，我们已经成功调用了图灵机器人的API接口进行回复，完整程序如下：\n\n```python\n# -*- coding: utf-8 -*-\n\nfrom wxpy import *\nimport requests\n\nTULING_TOKEN = 'Your API Key'\nbot = Bot()\n\n@bot.register(Group, TEXT) # 这里注册了群聊中的文字消息，测试时可以设置为自己(上篇中提到过)\ndef group_msg(msg):\n\tif msg.is_at:\n\t\turl_api = 'http://www.tuling123.com/openapi/api'\n\t\tdata = {\n\t\t    'key'    : TULING_TOKEN,\n\t\t    'info'   : msg.text, # 收到消息的文字内容\n\t\t}\n\n\t\ts = requests.post(url_api, data=data).json()\n\t\tprint s # 打印所获得的json查看如何使用\n\n\t\tif s['code'] == 100000:\n\t\t\tprint s['text'] # 查看回复消息的内容，可省略\n\t\t\tmsg.reply(s['text']) # 回复消息\n        \nembed()\n```\n以下内容更加进阶，而文末有一些简单问题的解答。如果遇到其他问题，我也会在之后更新。\n\n\n\n## 番外：使用上下文\n\nwxpy给每个用户定义了一个相对稳定的对象/用户id，为puid，可以始终被获取到并有唯一的稳定性（根据文档），我们可以使用这个id来作为userid传给图灵机器人，以方便识别机器人或航班/列成信息的上下文。\n\n```python\nbot.enable_puid() # puid 需要手动开启，请将这句话写在登陆登录之后\n```\n\n这样传送给接口的数据也要同时修改为：\n\n```python\ndata = {\n    'key'    : TULING_TOKEN,\n    'info'   : msg.text, # 收到消息的文字内容\n    'userid' : msg.member.puid, # 使用群聊中发送者的 puid 作为 userid 传送给图灵接口， 如果是私聊可以使用 msg.sender.puid\n}\n```\n这样做的好处是，图灵机器人可以根据得userid来获取上下文信息。例如你询问『天气』，它会回复『亲爱的，悄悄地告诉我你在哪个城市？』。在这种情况下，如果你不使用userid参数，你再次回复城市，图灵机器人也无法正确找到天气；如果你使用了这一参数，且两次回复使用的userid相同，图灵机器人会为你回复你回复的城市的天气情况，完成这一对话。\n\n\n\n# 使用api.ai\n\napi.ai是一家被谷歌收购的人机交互系统，主要着重于对话机器人的开发。图灵机器人虽然包括一个知识库，但其语义识别的能力较差。我所需要的机器人主要用于新生群，很多问题人与人之间会有相当多不同的表达，图灵机器人无法满足我对于群聊机器人的要求。因此，我尝试使用api.ai进行回复有针对性的一些问题。\n\n如果你的英语相对糟糕，我不建议使用api.ai。api.ai的配置大多需要使用英语，虽然接口简单，但是后台设置相对复杂，如果没有英文背景不推荐使用。\n\n这一部分内容相对进阶，如果没有特殊需要，完全可以跳过不看。这里只作一个对api.ai使用方式上大体的介绍，希望能帮助大家了解这一网站。\n\n\n\n## 前期准备\n\n1. 前往[api.ai](https://api.ai/)注册，创建机器人，并获得APIkey。虽然被谷歌收购，但是这个网站是不需要翻墙的哦！\n\n2. 安装api.ai官方提供的Python SDK\n\n   ```shell\n   pip install apiai\n   ```\n\n3. 在文件头部加入（处理返回的消息时使用）\n\n   ```python\n   import json\n   ```\n\n\n\n## 调用接口\n\n首先，我们需要设置api.ai的Token，\n\n```python\nAPIAI_TOKEN = 'Your API Key'\n```\n\n而后我们发起一个最简单的请求，一下内容都可以通过[例子](https://github.com/api-ai/apiai-python-client/tree/master/examples)找到：\n\n```python\nai = apiai.ApiAI(APIAI_TOKEN)\nrequest = ai.text_request()\nrequest.lang = 'zh-CN' # 使用中文\nrequest.session_id = msg.member.puid # api.ai 中用 session id 来区分对话对象，必须\nrequest.query = msg.text # 消息文字内容\n```\n\n然后通过接口得到传回的json：\n\n```python\nresponse = request.getresponse()\ns = json.loads(response.read(), encoding='UTF-8') # 讲传回的json转换为python字典\nprint s\n# {u'lang': u'zh-cn', u'status': {u'errorType': u'success', u'code': 200}, u'timestamp': u'20}\n```\n\n我们发现，api.ai传回的json相对于图灵机器人更加复杂。参考[api.ai的query文档](https://docs.api.ai/docs/query)，我对对这部分回复进行了如下处理：\n\n```python\nif s['result']['action'] == 'input.unknown': # \n    raise Exception('api.ai cannot reply this message') # 抛出异常：使用 try 语句捕捉后使用图灵机器人回复\nif s['status']['code'] == 200:\n    msg.reply(s['result']['fulfillment']['speech']) # 回复 api.ai 返回的内容\n```\n\n\n\n## api.ai的设置和调试\n\n在进入api.ai的机器人后，你将会看到左边的多个菜单。\n\n如果你只是简单的需要特定语句回复的功能，只需要创建并设置[Intents](https://docs.api.ai/docs/concept-intents)就可以实现。在User Says一栏中填写消息可能是什么，在下方Response处填写可能回复的内容，然后保存即可。\n\napi.ai自带机器学习功能，它的参数可以在机器人设置中的ML settings里找到。可以通过调整参数和方式让你的机器人回复更加准确。\n\n在进入机器人后，api.ai的右侧会出现一个对话框。你可以使用它进行一些基础调试。在上方输入你的消息后，下方会给出机器人的回复，你可以通过这个对话框来了解是否正确设置了机器人。（需要翻墙）\n\n# 你可能会遇到的一些问题\n\n## 报错：No handlers could be found for logger \"wxpy.api.bot\"\n\n有报错但是无法显示，可以选择在代码头部加入：\n\n```python\nimport logging\nlogging.basicConfig()\n```\n\n\n\n## 消息处理：删除@内容\n\n如果不删除消息中@部分的内容，图灵机器人的回复可能会受到昵称内容的影响，导致回复不准确，或是识别不出一些应当识别出的内容。我们可以用一段简单的代码删除@到空格之间的内容并去除首尾多余的空格。\n\n```python\nmsg_content = re.sub('@[^\\s]*', '', unicodedata.normalize('NFKC', msg.text)).strip()\n```\n\n这里使用了正则表达式，匹配@以及它之后所有不为空的字符。如果你的微信昵称中没有空白字符，这条代码是可行的。（需要在代码开头添加`import re`）","source":"_posts/connector-wechat-bot-2.md","raw":"---\ntitle: 从零开始微信机器人（二）：使用图灵机器人和api.ai相关接口\ndate: 2017-06-24\ncategory: 计算机课堂\ntags: \n- Python\n- 聊天机器人\n---\n\n\n\n# 图灵机器人相关接口\n\n图灵机器人是一个中文语境下的对话机器人，免费的机器人每天有5000次调用的，如果放在群聊中是完全够用的（如果只有@的消息才使用机器人回复的）。图灵机器人也包括一些简单的能力，比如讲笑话、故事大全、成语接龙、新闻资讯等，我们将介绍如何简单调用图灵机器人接口。\n\n\n\n## 前期准备\n\n1. 前往注册[图灵机器人](http://www.tuling123.com/)，增加一个机器人，并记录机器人的APIKey。具体注册方法可以前往[图灵API](http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc)查看。（如果你觉得很麻烦， 也可以暂时使用itchat提供的几个[key](http://itchat.readthedocs.io/zh/latest/tutorial/tutorial0/#3_1)）\n\n2. 安装[Requests: HTTP for Humans](http://docs.python-requests.org/)\n\n   ```shell\n   # 从 pip 安装 ()\n   pip install requests\n   ```\n\n   并在机器人中导入Requests包（写在程序最初）：\n\n   ```python\n   import requests\n   ```\n\n\n<!--more-->\n\n## 调用接口\n\nwxpy提供了图灵的接口，使用方法：\n\n```python\ntuling = Tuling(api_key='Your API Key') # 刚才申请的key\n\n@bot.register(my_friend) # 注册消息\ndef reply_my_friend(msg):\n    tuling.do_reply(msg)\n```\n\n为了让大家了解HTTP协议在python中的使用方式，我接下来会介绍如何使用请求获取信息。\n\n本节中内容如果没有特殊提示，都应写在你希望处理的某种注册了的消息方法中以保证它的正常运作。\n\n首先，将图灵API写入程序中：\n\n```python\nTULING_TOKEN = 'Your API Key'\n```\n\n然后，定义接口链接和需要传输的数据：\n\n```python\nurl_api = 'http://www.tuling123.com/openapi/api'\ndata = {\n    'key'    : TULING_TOKEN,\n    'info'   : msg.text, # 收到消息的文字内容\n}\n```\n根据文档，通过HTTP请求，我们将会得到一个json格式的文件。使用Requests包，我们可以简单的获得调用接口所返回的信息：\n\n```python\ns = requests.post(url_api, data=data).json()\nprint s # 打印所获得的json查看如何使用\n# {u'text': u'回复的内容', u'code': 100000}\n```\n\n我们发现经过请求，我们一般会得到一个字典内容，其中包括text和code两项：text是图灵机器人回复的文本，而code是返回的编号。详细的返回数据格式也可以在[图灵API](http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc)中看到，除了文字类还有新闻类、图片类、链接类等返回类型。在这里我们以文字类为例，介绍如何处理：\n\n```python\nif s['code'] == 100000:\n\t\tprint s['text'] # 查看回复消息的内容，可省略\n\t\tmsg.reply(s['text']) # 回复消息\n```\n\n如果需要回复其他类型的消息，也完全可以通过判断code确定消息类型，再决定如何回复。这里给出我的回复方法供大家参考（也可以选择不处理这一类内容）：\n\n```python\nif s['code'] == 200000: # 链接类：回复文字和链接\n    msg.reply(s['text'] + s['url'])\n```\n\n至此，我们已经成功调用了图灵机器人的API接口进行回复，完整程序如下：\n\n```python\n# -*- coding: utf-8 -*-\n\nfrom wxpy import *\nimport requests\n\nTULING_TOKEN = 'Your API Key'\nbot = Bot()\n\n@bot.register(Group, TEXT) # 这里注册了群聊中的文字消息，测试时可以设置为自己(上篇中提到过)\ndef group_msg(msg):\n\tif msg.is_at:\n\t\turl_api = 'http://www.tuling123.com/openapi/api'\n\t\tdata = {\n\t\t    'key'    : TULING_TOKEN,\n\t\t    'info'   : msg.text, # 收到消息的文字内容\n\t\t}\n\n\t\ts = requests.post(url_api, data=data).json()\n\t\tprint s # 打印所获得的json查看如何使用\n\n\t\tif s['code'] == 100000:\n\t\t\tprint s['text'] # 查看回复消息的内容，可省略\n\t\t\tmsg.reply(s['text']) # 回复消息\n        \nembed()\n```\n以下内容更加进阶，而文末有一些简单问题的解答。如果遇到其他问题，我也会在之后更新。\n\n\n\n## 番外：使用上下文\n\nwxpy给每个用户定义了一个相对稳定的对象/用户id，为puid，可以始终被获取到并有唯一的稳定性（根据文档），我们可以使用这个id来作为userid传给图灵机器人，以方便识别机器人或航班/列成信息的上下文。\n\n```python\nbot.enable_puid() # puid 需要手动开启，请将这句话写在登陆登录之后\n```\n\n这样传送给接口的数据也要同时修改为：\n\n```python\ndata = {\n    'key'    : TULING_TOKEN,\n    'info'   : msg.text, # 收到消息的文字内容\n    'userid' : msg.member.puid, # 使用群聊中发送者的 puid 作为 userid 传送给图灵接口， 如果是私聊可以使用 msg.sender.puid\n}\n```\n这样做的好处是，图灵机器人可以根据得userid来获取上下文信息。例如你询问『天气』，它会回复『亲爱的，悄悄地告诉我你在哪个城市？』。在这种情况下，如果你不使用userid参数，你再次回复城市，图灵机器人也无法正确找到天气；如果你使用了这一参数，且两次回复使用的userid相同，图灵机器人会为你回复你回复的城市的天气情况，完成这一对话。\n\n\n\n# 使用api.ai\n\napi.ai是一家被谷歌收购的人机交互系统，主要着重于对话机器人的开发。图灵机器人虽然包括一个知识库，但其语义识别的能力较差。我所需要的机器人主要用于新生群，很多问题人与人之间会有相当多不同的表达，图灵机器人无法满足我对于群聊机器人的要求。因此，我尝试使用api.ai进行回复有针对性的一些问题。\n\n如果你的英语相对糟糕，我不建议使用api.ai。api.ai的配置大多需要使用英语，虽然接口简单，但是后台设置相对复杂，如果没有英文背景不推荐使用。\n\n这一部分内容相对进阶，如果没有特殊需要，完全可以跳过不看。这里只作一个对api.ai使用方式上大体的介绍，希望能帮助大家了解这一网站。\n\n\n\n## 前期准备\n\n1. 前往[api.ai](https://api.ai/)注册，创建机器人，并获得APIkey。虽然被谷歌收购，但是这个网站是不需要翻墙的哦！\n\n2. 安装api.ai官方提供的Python SDK\n\n   ```shell\n   pip install apiai\n   ```\n\n3. 在文件头部加入（处理返回的消息时使用）\n\n   ```python\n   import json\n   ```\n\n\n\n## 调用接口\n\n首先，我们需要设置api.ai的Token，\n\n```python\nAPIAI_TOKEN = 'Your API Key'\n```\n\n而后我们发起一个最简单的请求，一下内容都可以通过[例子](https://github.com/api-ai/apiai-python-client/tree/master/examples)找到：\n\n```python\nai = apiai.ApiAI(APIAI_TOKEN)\nrequest = ai.text_request()\nrequest.lang = 'zh-CN' # 使用中文\nrequest.session_id = msg.member.puid # api.ai 中用 session id 来区分对话对象，必须\nrequest.query = msg.text # 消息文字内容\n```\n\n然后通过接口得到传回的json：\n\n```python\nresponse = request.getresponse()\ns = json.loads(response.read(), encoding='UTF-8') # 讲传回的json转换为python字典\nprint s\n# {u'lang': u'zh-cn', u'status': {u'errorType': u'success', u'code': 200}, u'timestamp': u'20}\n```\n\n我们发现，api.ai传回的json相对于图灵机器人更加复杂。参考[api.ai的query文档](https://docs.api.ai/docs/query)，我对对这部分回复进行了如下处理：\n\n```python\nif s['result']['action'] == 'input.unknown': # \n    raise Exception('api.ai cannot reply this message') # 抛出异常：使用 try 语句捕捉后使用图灵机器人回复\nif s['status']['code'] == 200:\n    msg.reply(s['result']['fulfillment']['speech']) # 回复 api.ai 返回的内容\n```\n\n\n\n## api.ai的设置和调试\n\n在进入api.ai的机器人后，你将会看到左边的多个菜单。\n\n如果你只是简单的需要特定语句回复的功能，只需要创建并设置[Intents](https://docs.api.ai/docs/concept-intents)就可以实现。在User Says一栏中填写消息可能是什么，在下方Response处填写可能回复的内容，然后保存即可。\n\napi.ai自带机器学习功能，它的参数可以在机器人设置中的ML settings里找到。可以通过调整参数和方式让你的机器人回复更加准确。\n\n在进入机器人后，api.ai的右侧会出现一个对话框。你可以使用它进行一些基础调试。在上方输入你的消息后，下方会给出机器人的回复，你可以通过这个对话框来了解是否正确设置了机器人。（需要翻墙）\n\n# 你可能会遇到的一些问题\n\n## 报错：No handlers could be found for logger \"wxpy.api.bot\"\n\n有报错但是无法显示，可以选择在代码头部加入：\n\n```python\nimport logging\nlogging.basicConfig()\n```\n\n\n\n## 消息处理：删除@内容\n\n如果不删除消息中@部分的内容，图灵机器人的回复可能会受到昵称内容的影响，导致回复不准确，或是识别不出一些应当识别出的内容。我们可以用一段简单的代码删除@到空格之间的内容并去除首尾多余的空格。\n\n```python\nmsg_content = re.sub('@[^\\s]*', '', unicodedata.normalize('NFKC', msg.text)).strip()\n```\n\n这里使用了正则表达式，匹配@以及它之后所有不为空的字符。如果你的微信昵称中没有空白字符，这条代码是可行的。（需要在代码开头添加`import re`）","slug":"connector-wechat-bot-2","published":1,"updated":"2018-07-03T13:44:30.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi430005xtd3vjmeubo8","content":"<h1 id=\"&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x76F8;&#x5173;&#x63A5;&#x53E3;\">&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x76F8;&#x5173;&#x63A5;&#x53E3;</h1>\n<p>&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x662F;&#x4E00;&#x4E2A;&#x4E2D;&#x6587;&#x8BED;&#x5883;&#x4E0B;&#x7684;&#x5BF9;&#x8BDD;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x514D;&#x8D39;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x6BCF;&#x5929;&#x6709;5000&#x6B21;&#x8C03;&#x7528;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x653E;&#x5728;&#x7FA4;&#x804A;&#x4E2D;&#x662F;&#x5B8C;&#x5168;&#x591F;&#x7528;&#x7684;&#xFF08;&#x5982;&#x679C;&#x53EA;&#x6709;@&#x7684;&#x6D88;&#x606F;&#x624D;&#x4F7F;&#x7528;&#x673A;&#x5668;&#x4EBA;&#x56DE;&#x590D;&#x7684;&#xFF09;&#x3002;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x4E5F;&#x5305;&#x62EC;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x80FD;&#x529B;&#xFF0C;&#x6BD4;&#x5982;&#x8BB2;&#x7B11;&#x8BDD;&#x3001;&#x6545;&#x4E8B;&#x5927;&#x5168;&#x3001;&#x6210;&#x8BED;&#x63A5;&#x9F99;&#x3001;&#x65B0;&#x95FB;&#x8D44;&#x8BAF;&#x7B49;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x4ECB;&#x7ECD;&#x5982;&#x4F55;&#x7B80;&#x5355;&#x8C03;&#x7528;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x63A5;&#x53E3;&#x3002;</p>\n<h2 id=\"&#x524D;&#x671F;&#x51C6;&#x5907;\">&#x524D;&#x671F;&#x51C6;&#x5907;</h2>\n<ol type=\"1\">\n<li><p>&#x524D;&#x5F80;&#x6CE8;&#x518C;<a href=\"http://www.tuling123.com/\" target=\"_blank\" rel=\"noopener\">&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;</a>&#xFF0C;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x5E76;&#x8BB0;&#x5F55;&#x673A;&#x5668;&#x4EBA;&#x7684;APIKey&#x3002;&#x5177;&#x4F53;&#x6CE8;&#x518C;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x524D;&#x5F80;<a href=\"http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc\" target=\"_blank\" rel=\"noopener\">&#x56FE;&#x7075;API</a>&#x67E5;&#x770B;&#x3002;&#xFF08;&#x5982;&#x679C;&#x4F60;&#x89C9;&#x5F97;&#x5F88;&#x9EBB;&#x70E6;&#xFF0C; &#x4E5F;&#x53EF;&#x4EE5;&#x6682;&#x65F6;&#x4F7F;&#x7528;itchat&#x63D0;&#x4F9B;&#x7684;&#x51E0;&#x4E2A;<a href=\"http://itchat.readthedocs.io/zh/latest/tutorial/tutorial0/#3_1\" target=\"_blank\" rel=\"noopener\">key</a>&#xFF09;</p></li>\n<li><p>&#x5B89;&#x88C5;<a href=\"http://docs.python-requests.org/\" target=\"_blank\" rel=\"noopener\">Requests: HTTP for Humans</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> &#x4ECE; pip &#x5B89;&#x88C5; ()</span><br><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<p>&#x5E76;&#x5728;&#x673A;&#x5668;&#x4EBA;&#x4E2D;&#x5BFC;&#x5165;Requests&#x5305;&#xFF08;&#x5199;&#x5728;&#x7A0B;&#x5E8F;&#x6700;&#x521D;&#xFF09;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br></pre></td></tr></table></figure></li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"&#x8C03;&#x7528;&#x63A5;&#x53E3;\">&#x8C03;&#x7528;&#x63A5;&#x53E3;</h2>\n<p>wxpy&#x63D0;&#x4F9B;&#x4E86;&#x56FE;&#x7075;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuling = Tuling(api_key=<span class=\"string\">&apos;Your API Key&apos;</span>) <span class=\"comment\"># &#x521A;&#x624D;&#x7533;&#x8BF7;&#x7684;key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@bot.register(my_friend) # &#x6CE8;&#x518C;&#x6D88;&#x606F;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reply_my_friend</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    tuling.do_reply(msg)</span><br></pre></td></tr></table></figure>\n<p>&#x4E3A;&#x4E86;&#x8BA9;&#x5927;&#x5BB6;&#x4E86;&#x89E3;HTTP&#x534F;&#x8BAE;&#x5728;python&#x4E2D;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#xFF0C;&#x6211;&#x63A5;&#x4E0B;&#x6765;&#x4F1A;&#x4ECB;&#x7ECD;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x8BF7;&#x6C42;&#x83B7;&#x53D6;&#x4FE1;&#x606F;&#x3002;</p>\n<p>&#x672C;&#x8282;&#x4E2D;&#x5185;&#x5BB9;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7279;&#x6B8A;&#x63D0;&#x793A;&#xFF0C;&#x90FD;&#x5E94;&#x5199;&#x5728;&#x4F60;&#x5E0C;&#x671B;&#x5904;&#x7406;&#x7684;&#x67D0;&#x79CD;&#x6CE8;&#x518C;&#x4E86;&#x7684;&#x6D88;&#x606F;&#x65B9;&#x6CD5;&#x4E2D;&#x4EE5;&#x4FDD;&#x8BC1;&#x5B83;&#x7684;&#x6B63;&#x5E38;&#x8FD0;&#x4F5C;&#x3002;</p>\n<p>&#x9996;&#x5148;&#xFF0C;&#x5C06;&#x56FE;&#x7075;API&#x5199;&#x5165;&#x7A0B;&#x5E8F;&#x4E2D;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TULING_TOKEN = <span class=\"string\">&apos;Your API Key&apos;</span></span><br></pre></td></tr></table></figure>\n<p>&#x7136;&#x540E;&#xFF0C;&#x5B9A;&#x4E49;&#x63A5;&#x53E3;&#x94FE;&#x63A5;&#x548C;&#x9700;&#x8981;&#x4F20;&#x8F93;&#x7684;&#x6570;&#x636E;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_api = <span class=\"string\">&apos;http://www.tuling123.com/openapi/api&apos;</span></span><br><span class=\"line\">data = {</span><br><span class=\"line\">    <span class=\"string\">&apos;key&apos;</span>    : TULING_TOKEN,</span><br><span class=\"line\">    <span class=\"string\">&apos;info&apos;</span>   : msg.text, <span class=\"comment\"># &#x6536;&#x5230;&#x6D88;&#x606F;&#x7684;&#x6587;&#x5B57;&#x5185;&#x5BB9;</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>&#x6839;&#x636E;&#x6587;&#x6863;&#xFF0C;&#x901A;&#x8FC7;HTTP&#x8BF7;&#x6C42;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x4F1A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;json&#x683C;&#x5F0F;&#x7684;&#x6587;&#x4EF6;&#x3002;&#x4F7F;&#x7528;Requests&#x5305;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x83B7;&#x5F97;&#x8C03;&#x7528;&#x63A5;&#x53E3;&#x6240;&#x8FD4;&#x56DE;&#x7684;&#x4FE1;&#x606F;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = requests.post(url_api, data=data).json()</span><br><span class=\"line\"><span class=\"keyword\">print</span> s <span class=\"comment\"># &#x6253;&#x5370;&#x6240;&#x83B7;&#x5F97;&#x7684;json&#x67E5;&#x770B;&#x5982;&#x4F55;&#x4F7F;&#x7528;</span></span><br><span class=\"line\"><span class=\"comment\"># {u&apos;text&apos;: u&apos;&#x56DE;&#x590D;&#x7684;&#x5185;&#x5BB9;&apos;, u&apos;code&apos;: 100000}</span></span><br></pre></td></tr></table></figure>\n<p>&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x7ECF;&#x8FC7;&#x8BF7;&#x6C42;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x822C;&#x4F1A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x5185;&#x5BB9;&#xFF0C;&#x5176;&#x4E2D;&#x5305;&#x62EC;text&#x548C;code&#x4E24;&#x9879;&#xFF1A;text&#x662F;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x56DE;&#x590D;&#x7684;&#x6587;&#x672C;&#xFF0C;&#x800C;code&#x662F;&#x8FD4;&#x56DE;&#x7684;&#x7F16;&#x53F7;&#x3002;&#x8BE6;&#x7EC6;&#x7684;&#x8FD4;&#x56DE;&#x6570;&#x636E;&#x683C;&#x5F0F;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;<a href=\"http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc\" target=\"_blank\" rel=\"noopener\">&#x56FE;&#x7075;API</a>&#x4E2D;&#x770B;&#x5230;&#xFF0C;&#x9664;&#x4E86;&#x6587;&#x5B57;&#x7C7B;&#x8FD8;&#x6709;&#x65B0;&#x95FB;&#x7C7B;&#x3001;&#x56FE;&#x7247;&#x7C7B;&#x3001;&#x94FE;&#x63A5;&#x7C7B;&#x7B49;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x4EE5;&#x6587;&#x5B57;&#x7C7B;&#x4E3A;&#x4F8B;&#xFF0C;&#x4ECB;&#x7ECD;&#x5982;&#x4F55;&#x5904;&#x7406;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">&apos;code&apos;</span>] == <span class=\"number\">100000</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> s[<span class=\"string\">&apos;text&apos;</span>] <span class=\"comment\"># &#x67E5;&#x770B;&#x56DE;&#x590D;&#x6D88;&#x606F;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x53EF;&#x7701;&#x7565;</span></span><br><span class=\"line\">\t\tmsg.reply(s[<span class=\"string\">&apos;text&apos;</span>]) <span class=\"comment\"># &#x56DE;&#x590D;&#x6D88;&#x606F;</span></span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x9700;&#x8981;&#x56DE;&#x590D;&#x5176;&#x4ED6;&#x7C7B;&#x578B;&#x7684;&#x6D88;&#x606F;&#xFF0C;&#x4E5F;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5224;&#x65AD;code&#x786E;&#x5B9A;&#x6D88;&#x606F;&#x7C7B;&#x578B;&#xFF0C;&#x518D;&#x51B3;&#x5B9A;&#x5982;&#x4F55;&#x56DE;&#x590D;&#x3002;&#x8FD9;&#x91CC;&#x7ED9;&#x51FA;&#x6211;&#x7684;&#x56DE;&#x590D;&#x65B9;&#x6CD5;&#x4F9B;&#x5927;&#x5BB6;&#x53C2;&#x8003;&#xFF08;&#x4E5F;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x4E0D;&#x5904;&#x7406;&#x8FD9;&#x4E00;&#x7C7B;&#x5185;&#x5BB9;&#xFF09;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">&apos;code&apos;</span>] == <span class=\"number\">200000</span>: <span class=\"comment\"># &#x94FE;&#x63A5;&#x7C7B;&#xFF1A;&#x56DE;&#x590D;&#x6587;&#x5B57;&#x548C;&#x94FE;&#x63A5;</span></span><br><span class=\"line\">    msg.reply(s[<span class=\"string\">&apos;text&apos;</span>] + s[<span class=\"string\">&apos;url&apos;</span>])</span><br></pre></td></tr></table></figure>\n<p>&#x81F3;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x6210;&#x529F;&#x8C03;&#x7528;&#x4E86;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x7684;API&#x63A5;&#x53E3;&#x8FDB;&#x884C;&#x56DE;&#x590D;&#xFF0C;&#x5B8C;&#x6574;&#x7A0B;&#x5E8F;&#x5982;&#x4E0B;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> wxpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">TULING_TOKEN = <span class=\"string\">&apos;Your API Key&apos;</span></span><br><span class=\"line\">bot = Bot()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@bot.register(Group, TEXT) # &#x8FD9;&#x91CC;&#x6CE8;&#x518C;&#x4E86;&#x7FA4;&#x804A;&#x4E2D;&#x7684;&#x6587;&#x5B57;&#x6D88;&#x606F;&#xFF0C;&#x6D4B;&#x8BD5;&#x65F6;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E3A;&#x81EA;&#x5DF1;(&#x4E0A;&#x7BC7;&#x4E2D;&#x63D0;&#x5230;&#x8FC7;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">group_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msg.is_at:</span><br><span class=\"line\">\t\turl_api = <span class=\"string\">&apos;http://www.tuling123.com/openapi/api&apos;</span></span><br><span class=\"line\">\t\tdata = {</span><br><span class=\"line\">\t\t    <span class=\"string\">&apos;key&apos;</span>    : TULING_TOKEN,</span><br><span class=\"line\">\t\t    <span class=\"string\">&apos;info&apos;</span>   : msg.text, <span class=\"comment\"># &#x6536;&#x5230;&#x6D88;&#x606F;&#x7684;&#x6587;&#x5B57;&#x5185;&#x5BB9;</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ts = requests.post(url_api, data=data).json()</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> s <span class=\"comment\"># &#x6253;&#x5370;&#x6240;&#x83B7;&#x5F97;&#x7684;json&#x67E5;&#x770B;&#x5982;&#x4F55;&#x4F7F;&#x7528;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[<span class=\"string\">&apos;code&apos;</span>] == <span class=\"number\">100000</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">print</span> s[<span class=\"string\">&apos;text&apos;</span>] <span class=\"comment\"># &#x67E5;&#x770B;&#x56DE;&#x590D;&#x6D88;&#x606F;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x53EF;&#x7701;&#x7565;</span></span><br><span class=\"line\">\t\t\tmsg.reply(s[<span class=\"string\">&apos;text&apos;</span>]) <span class=\"comment\"># &#x56DE;&#x590D;&#x6D88;&#x606F;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">embed()</span><br></pre></td></tr></table></figure>\n<p>&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x66F4;&#x52A0;&#x8FDB;&#x9636;&#xFF0C;&#x800C;&#x6587;&#x672B;&#x6709;&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x7B54;&#x3002;&#x5982;&#x679C;&#x9047;&#x5230;&#x5176;&#x4ED6;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4E5F;&#x4F1A;&#x5728;&#x4E4B;&#x540E;&#x66F4;&#x65B0;&#x3002;</p>\n<h2 id=\"&#x756A;&#x5916;&#x4F7F;&#x7528;&#x4E0A;&#x4E0B;&#x6587;\">&#x756A;&#x5916;&#xFF1A;&#x4F7F;&#x7528;&#x4E0A;&#x4E0B;&#x6587;</h2>\n<p>wxpy&#x7ED9;&#x6BCF;&#x4E2A;&#x7528;&#x6237;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x76F8;&#x5BF9;&#x7A33;&#x5B9A;&#x7684;&#x5BF9;&#x8C61;/&#x7528;&#x6237;id&#xFF0C;&#x4E3A;puid&#xFF0C;&#x53EF;&#x4EE5;&#x59CB;&#x7EC8;&#x88AB;&#x83B7;&#x53D6;&#x5230;&#x5E76;&#x6709;&#x552F;&#x4E00;&#x7684;&#x7A33;&#x5B9A;&#x6027;&#xFF08;&#x6839;&#x636E;&#x6587;&#x6863;&#xFF09;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;id&#x6765;&#x4F5C;&#x4E3A;userid&#x4F20;&#x7ED9;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x4EE5;&#x65B9;&#x4FBF;&#x8BC6;&#x522B;&#x673A;&#x5668;&#x4EBA;&#x6216;&#x822A;&#x73ED;/&#x5217;&#x6210;&#x4FE1;&#x606F;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bot.enable_puid() <span class=\"comment\"># puid &#x9700;&#x8981;&#x624B;&#x52A8;&#x5F00;&#x542F;&#xFF0C;&#x8BF7;&#x5C06;&#x8FD9;&#x53E5;&#x8BDD;&#x5199;&#x5728;&#x767B;&#x9646;&#x767B;&#x5F55;&#x4E4B;&#x540E;</span></span><br></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x6837;&#x4F20;&#x9001;&#x7ED9;&#x63A5;&#x53E3;&#x7684;&#x6570;&#x636E;&#x4E5F;&#x8981;&#x540C;&#x65F6;&#x4FEE;&#x6539;&#x4E3A;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = {</span><br><span class=\"line\">    <span class=\"string\">&apos;key&apos;</span>    : TULING_TOKEN,</span><br><span class=\"line\">    <span class=\"string\">&apos;info&apos;</span>   : msg.text, <span class=\"comment\"># &#x6536;&#x5230;&#x6D88;&#x606F;&#x7684;&#x6587;&#x5B57;&#x5185;&#x5BB9;</span></span><br><span class=\"line\">    <span class=\"string\">&apos;userid&apos;</span> : msg.member.puid, <span class=\"comment\"># &#x4F7F;&#x7528;&#x7FA4;&#x804A;&#x4E2D;&#x53D1;&#x9001;&#x8005;&#x7684; puid &#x4F5C;&#x4E3A; userid &#x4F20;&#x9001;&#x7ED9;&#x56FE;&#x7075;&#x63A5;&#x53E3;&#xFF0C; &#x5982;&#x679C;&#x662F;&#x79C1;&#x804A;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; msg.sender.puid</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x6837;&#x505A;&#x7684;&#x597D;&#x5904;&#x662F;&#xFF0C;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5F97;userid&#x6765;&#x83B7;&#x53D6;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#x3002;&#x4F8B;&#x5982;&#x4F60;&#x8BE2;&#x95EE;&#x300E;&#x5929;&#x6C14;&#x300F;&#xFF0C;&#x5B83;&#x4F1A;&#x56DE;&#x590D;&#x300E;&#x4EB2;&#x7231;&#x7684;&#xFF0C;&#x6084;&#x6084;&#x5730;&#x544A;&#x8BC9;&#x6211;&#x4F60;&#x5728;&#x54EA;&#x4E2A;&#x57CE;&#x5E02;&#xFF1F;&#x300F;&#x3002;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x4F7F;&#x7528;userid&#x53C2;&#x6570;&#xFF0C;&#x4F60;&#x518D;&#x6B21;&#x56DE;&#x590D;&#x57CE;&#x5E02;&#xFF0C;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x4E5F;&#x65E0;&#x6CD5;&#x6B63;&#x786E;&#x627E;&#x5230;&#x5929;&#x6C14;&#xFF1B;&#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x4E00;&#x53C2;&#x6570;&#xFF0C;&#x4E14;&#x4E24;&#x6B21;&#x56DE;&#x590D;&#x4F7F;&#x7528;&#x7684;userid&#x76F8;&#x540C;&#xFF0C;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x4E3A;&#x4F60;&#x56DE;&#x590D;&#x4F60;&#x56DE;&#x590D;&#x7684;&#x57CE;&#x5E02;&#x7684;&#x5929;&#x6C14;&#x60C5;&#x51B5;&#xFF0C;&#x5B8C;&#x6210;&#x8FD9;&#x4E00;&#x5BF9;&#x8BDD;&#x3002;</p>\n<h1 id=\"&#x4F7F;&#x7528;api.ai\">&#x4F7F;&#x7528;api.ai</h1>\n<p>api.ai&#x662F;&#x4E00;&#x5BB6;&#x88AB;&#x8C37;&#x6B4C;&#x6536;&#x8D2D;&#x7684;&#x4EBA;&#x673A;&#x4EA4;&#x4E92;&#x7CFB;&#x7EDF;&#xFF0C;&#x4E3B;&#x8981;&#x7740;&#x91CD;&#x4E8E;&#x5BF9;&#x8BDD;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x5F00;&#x53D1;&#x3002;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x867D;&#x7136;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x77E5;&#x8BC6;&#x5E93;&#xFF0C;&#x4F46;&#x5176;&#x8BED;&#x4E49;&#x8BC6;&#x522B;&#x7684;&#x80FD;&#x529B;&#x8F83;&#x5DEE;&#x3002;&#x6211;&#x6240;&#x9700;&#x8981;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x65B0;&#x751F;&#x7FA4;&#xFF0C;&#x5F88;&#x591A;&#x95EE;&#x9898;&#x4EBA;&#x4E0E;&#x4EBA;&#x4E4B;&#x95F4;&#x4F1A;&#x6709;&#x76F8;&#x5F53;&#x591A;&#x4E0D;&#x540C;&#x7684;&#x8868;&#x8FBE;&#xFF0C;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x65E0;&#x6CD5;&#x6EE1;&#x8DB3;&#x6211;&#x5BF9;&#x4E8E;&#x7FA4;&#x804A;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x8981;&#x6C42;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x5C1D;&#x8BD5;&#x4F7F;&#x7528;api.ai&#x8FDB;&#x884C;&#x56DE;&#x590D;&#x6709;&#x9488;&#x5BF9;&#x6027;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x7684;&#x82F1;&#x8BED;&#x76F8;&#x5BF9;&#x7CDF;&#x7CD5;&#xFF0C;&#x6211;&#x4E0D;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;api.ai&#x3002;api.ai&#x7684;&#x914D;&#x7F6E;&#x5927;&#x591A;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x82F1;&#x8BED;&#xFF0C;&#x867D;&#x7136;&#x63A5;&#x53E3;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x540E;&#x53F0;&#x8BBE;&#x7F6E;&#x76F8;&#x5BF9;&#x590D;&#x6742;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x82F1;&#x6587;&#x80CC;&#x666F;&#x4E0D;&#x63A8;&#x8350;&#x4F7F;&#x7528;&#x3002;</p>\n<p>&#x8FD9;&#x4E00;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#x76F8;&#x5BF9;&#x8FDB;&#x9636;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7279;&#x6B8A;&#x9700;&#x8981;&#xFF0C;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x8DF3;&#x8FC7;&#x4E0D;&#x770B;&#x3002;&#x8FD9;&#x91CC;&#x53EA;&#x4F5C;&#x4E00;&#x4E2A;&#x5BF9;api.ai&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x4E0A;&#x5927;&#x4F53;&#x7684;&#x4ECB;&#x7ECD;&#xFF0C;&#x5E0C;&#x671B;&#x80FD;&#x5E2E;&#x52A9;&#x5927;&#x5BB6;&#x4E86;&#x89E3;&#x8FD9;&#x4E00;&#x7F51;&#x7AD9;&#x3002;</p>\n<h2 id=\"&#x524D;&#x671F;&#x51C6;&#x5907;-1\">&#x524D;&#x671F;&#x51C6;&#x5907;</h2>\n<ol type=\"1\">\n<li><p>&#x524D;&#x5F80;<a href=\"https://api.ai/\" target=\"_blank\" rel=\"noopener\">api.ai</a>&#x6CE8;&#x518C;&#xFF0C;&#x521B;&#x5EFA;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x5E76;&#x83B7;&#x5F97;APIkey&#x3002;&#x867D;&#x7136;&#x88AB;&#x8C37;&#x6B4C;&#x6536;&#x8D2D;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x7F51;&#x7AD9;&#x662F;&#x4E0D;&#x9700;&#x8981;&#x7FFB;&#x5899;&#x7684;&#x54E6;&#xFF01;</p></li>\n<li><p>&#x5B89;&#x88C5;api.ai&#x5B98;&#x65B9;&#x63D0;&#x4F9B;&#x7684;Python SDK</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install apiai</span><br></pre></td></tr></table></figure></li>\n<li><p>&#x5728;&#x6587;&#x4EF6;&#x5934;&#x90E8;&#x52A0;&#x5165;&#xFF08;&#x5904;&#x7406;&#x8FD4;&#x56DE;&#x7684;&#x6D88;&#x606F;&#x65F6;&#x4F7F;&#x7528;&#xFF09;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"&#x8C03;&#x7528;&#x63A5;&#x53E3;-1\">&#x8C03;&#x7528;&#x63A5;&#x53E3;</h2>\n<p>&#x9996;&#x5148;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BBE;&#x7F6E;api.ai&#x7684;Token&#xFF0C;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APIAI_TOKEN = <span class=\"string\">&apos;Your API Key&apos;</span></span><br></pre></td></tr></table></figure>\n<p>&#x800C;&#x540E;&#x6211;&#x4EEC;&#x53D1;&#x8D77;&#x4E00;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x7684;&#x8BF7;&#x6C42;&#xFF0C;&#x4E00;&#x4E0B;&#x5185;&#x5BB9;&#x90FD;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;<a href=\"https://github.com/api-ai/apiai-python-client/tree/master/examples\" target=\"_blank\" rel=\"noopener\">&#x4F8B;&#x5B50;</a>&#x627E;&#x5230;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ai = apiai.ApiAI(APIAI_TOKEN)</span><br><span class=\"line\">request = ai.text_request()</span><br><span class=\"line\">request.lang = <span class=\"string\">&apos;zh-CN&apos;</span> <span class=\"comment\"># &#x4F7F;&#x7528;&#x4E2D;&#x6587;</span></span><br><span class=\"line\">request.session_id = msg.member.puid <span class=\"comment\"># api.ai &#x4E2D;&#x7528; session id &#x6765;&#x533A;&#x5206;&#x5BF9;&#x8BDD;&#x5BF9;&#x8C61;&#xFF0C;&#x5FC5;&#x987B;</span></span><br><span class=\"line\">request.query = msg.text <span class=\"comment\"># &#x6D88;&#x606F;&#x6587;&#x5B57;&#x5185;&#x5BB9;</span></span><br></pre></td></tr></table></figure>\n<p>&#x7136;&#x540E;&#x901A;&#x8FC7;&#x63A5;&#x53E3;&#x5F97;&#x5230;&#x4F20;&#x56DE;&#x7684;json&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = request.getresponse()</span><br><span class=\"line\">s = json.loads(response.read(), encoding=<span class=\"string\">&apos;UTF-8&apos;</span>) <span class=\"comment\"># &#x8BB2;&#x4F20;&#x56DE;&#x7684;json&#x8F6C;&#x6362;&#x4E3A;python&#x5B57;&#x5178;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br><span class=\"line\"><span class=\"comment\"># {u&apos;lang&apos;: u&apos;zh-cn&apos;, u&apos;status&apos;: {u&apos;errorType&apos;: u&apos;success&apos;, u&apos;code&apos;: 200}, u&apos;timestamp&apos;: u&apos;20}</span></span><br></pre></td></tr></table></figure>\n<p>&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#xFF0C;api.ai&#x4F20;&#x56DE;&#x7684;json&#x76F8;&#x5BF9;&#x4E8E;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x66F4;&#x52A0;&#x590D;&#x6742;&#x3002;&#x53C2;&#x8003;<a href=\"https://docs.api.ai/docs/query\" target=\"_blank\" rel=\"noopener\">api.ai&#x7684;query&#x6587;&#x6863;</a>&#xFF0C;&#x6211;&#x5BF9;&#x5BF9;&#x8FD9;&#x90E8;&#x5206;&#x56DE;&#x590D;&#x8FDB;&#x884C;&#x4E86;&#x5982;&#x4E0B;&#x5904;&#x7406;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">&apos;result&apos;</span>][<span class=\"string\">&apos;action&apos;</span>] == <span class=\"string\">&apos;input.unknown&apos;</span>: <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&apos;api.ai cannot reply this message&apos;</span>) <span class=\"comment\"># &#x629B;&#x51FA;&#x5F02;&#x5E38;&#xFF1A;&#x4F7F;&#x7528; try &#x8BED;&#x53E5;&#x6355;&#x6349;&#x540E;&#x4F7F;&#x7528;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x56DE;&#x590D;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">&apos;status&apos;</span>][<span class=\"string\">&apos;code&apos;</span>] == <span class=\"number\">200</span>:</span><br><span class=\"line\">    msg.reply(s[<span class=\"string\">&apos;result&apos;</span>][<span class=\"string\">&apos;fulfillment&apos;</span>][<span class=\"string\">&apos;speech&apos;</span>]) <span class=\"comment\"># &#x56DE;&#x590D; api.ai &#x8FD4;&#x56DE;&#x7684;&#x5185;&#x5BB9;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"api.ai&#x7684;&#x8BBE;&#x7F6E;&#x548C;&#x8C03;&#x8BD5;\">api.ai&#x7684;&#x8BBE;&#x7F6E;&#x548C;&#x8C03;&#x8BD5;</h2>\n<p>&#x5728;&#x8FDB;&#x5165;api.ai&#x7684;&#x673A;&#x5668;&#x4EBA;&#x540E;&#xFF0C;&#x4F60;&#x5C06;&#x4F1A;&#x770B;&#x5230;&#x5DE6;&#x8FB9;&#x7684;&#x591A;&#x4E2A;&#x83DC;&#x5355;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x53EA;&#x662F;&#x7B80;&#x5355;&#x7684;&#x9700;&#x8981;&#x7279;&#x5B9A;&#x8BED;&#x53E5;&#x56DE;&#x590D;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x521B;&#x5EFA;&#x5E76;&#x8BBE;&#x7F6E;<a href=\"https://docs.api.ai/docs/concept-intents\" target=\"_blank\" rel=\"noopener\">Intents</a>&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x3002;&#x5728;User Says&#x4E00;&#x680F;&#x4E2D;&#x586B;&#x5199;&#x6D88;&#x606F;&#x53EF;&#x80FD;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x5728;&#x4E0B;&#x65B9;Response&#x5904;&#x586B;&#x5199;&#x53EF;&#x80FD;&#x56DE;&#x590D;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x7136;&#x540E;&#x4FDD;&#x5B58;&#x5373;&#x53EF;&#x3002;</p>\n<p>api.ai&#x81EA;&#x5E26;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x529F;&#x80FD;&#xFF0C;&#x5B83;&#x7684;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x5728;&#x673A;&#x5668;&#x4EBA;&#x8BBE;&#x7F6E;&#x4E2D;&#x7684;ML settings&#x91CC;&#x627E;&#x5230;&#x3002;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8C03;&#x6574;&#x53C2;&#x6570;&#x548C;&#x65B9;&#x5F0F;&#x8BA9;&#x4F60;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x56DE;&#x590D;&#x66F4;&#x52A0;&#x51C6;&#x786E;&#x3002;</p>\n<p>&#x5728;&#x8FDB;&#x5165;&#x673A;&#x5668;&#x4EBA;&#x540E;&#xFF0C;api.ai&#x7684;&#x53F3;&#x4FA7;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x4E2A;&#x5BF9;&#x8BDD;&#x6846;&#x3002;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5B83;&#x8FDB;&#x884C;&#x4E00;&#x4E9B;&#x57FA;&#x7840;&#x8C03;&#x8BD5;&#x3002;&#x5728;&#x4E0A;&#x65B9;&#x8F93;&#x5165;&#x4F60;&#x7684;&#x6D88;&#x606F;&#x540E;&#xFF0C;&#x4E0B;&#x65B9;&#x4F1A;&#x7ED9;&#x51FA;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x56DE;&#x590D;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x5BF9;&#x8BDD;&#x6846;&#x6765;&#x4E86;&#x89E3;&#x662F;&#x5426;&#x6B63;&#x786E;&#x8BBE;&#x7F6E;&#x4E86;&#x673A;&#x5668;&#x4EBA;&#x3002;&#xFF08;&#x9700;&#x8981;&#x7FFB;&#x5899;&#xFF09;</p>\n<h1 id=\"&#x4F60;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;\">&#x4F60;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;</h1>\n<h2 id=\"&#x62A5;&#x9519;no-handlers-could-be-found-for-logger-wxpy.api.bot\">&#x62A5;&#x9519;&#xFF1A;No handlers could be found for logger &#x201C;wxpy.api.bot&#x201D;</h2>\n<p>&#x6709;&#x62A5;&#x9519;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x663E;&#x793A;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x5728;&#x4EE3;&#x7801;&#x5934;&#x90E8;&#x52A0;&#x5165;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\">logging.basicConfig()</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x6D88;&#x606F;&#x5904;&#x7406;&#x5220;&#x9664;&#x5185;&#x5BB9;\">&#x6D88;&#x606F;&#x5904;&#x7406;&#xFF1A;&#x5220;&#x9664;@&#x5185;&#x5BB9;</h2>\n<p>&#x5982;&#x679C;&#x4E0D;&#x5220;&#x9664;&#x6D88;&#x606F;&#x4E2D;@&#x90E8;&#x5206;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x56FE;&#x7075;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x56DE;&#x590D;&#x53EF;&#x80FD;&#x4F1A;&#x53D7;&#x5230;&#x6635;&#x79F0;&#x5185;&#x5BB9;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5BFC;&#x81F4;&#x56DE;&#x590D;&#x4E0D;&#x51C6;&#x786E;&#xFF0C;&#x6216;&#x662F;&#x8BC6;&#x522B;&#x4E0D;&#x51FA;&#x4E00;&#x4E9B;&#x5E94;&#x5F53;&#x8BC6;&#x522B;&#x51FA;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x6BB5;&#x7B80;&#x5355;&#x7684;&#x4EE3;&#x7801;&#x5220;&#x9664;@&#x5230;&#x7A7A;&#x683C;&#x4E4B;&#x95F4;&#x7684;&#x5185;&#x5BB9;&#x5E76;&#x53BB;&#x9664;&#x9996;&#x5C3E;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg_content = re.sub(<span class=\"string\">&apos;@[^\\s]*&apos;</span>, <span class=\"string\">&apos;&apos;</span>, unicodedata.normalize(<span class=\"string\">&apos;NFKC&apos;</span>, msg.text)).strip()</span><br></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E86;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5339;&#x914D;@&#x4EE5;&#x53CA;&#x5B83;&#x4E4B;&#x540E;&#x6240;&#x6709;&#x4E0D;&#x4E3A;&#x7A7A;&#x7684;&#x5B57;&#x7B26;&#x3002;&#x5982;&#x679C;&#x4F60;&#x7684;&#x5FAE;&#x4FE1;&#x6635;&#x79F0;&#x4E2D;&#x6CA1;&#x6709;&#x7A7A;&#x767D;&#x5B57;&#x7B26;&#xFF0C;&#x8FD9;&#x6761;&#x4EE3;&#x7801;&#x662F;&#x53EF;&#x884C;&#x7684;&#x3002;&#xFF08;&#x9700;&#x8981;&#x5728;&#x4EE3;&#x7801;&#x5F00;&#x5934;&#x6DFB;&#x52A0;<code>import re</code>&#xFF09;</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"图灵机器人相关接口\">图灵机器人相关接口</h1>\n<p>图灵机器人是一个中文语境下的对话机器人，免费的机器人每天有5000次调用的，如果放在群聊中是完全够用的（如果只有@的消息才使用机器人回复的）。图灵机器人也包括一些简单的能力，比如讲笑话、故事大全、成语接龙、新闻资讯等，我们将介绍如何简单调用图灵机器人接口。</p>\n<h2 id=\"前期准备\">前期准备</h2>\n<ol type=\"1\">\n<li><p>前往注册<a href=\"http://www.tuling123.com/\" target=\"_blank\" rel=\"noopener\">图灵机器人</a>，增加一个机器人，并记录机器人的APIKey。具体注册方法可以前往<a href=\"http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc\" target=\"_blank\" rel=\"noopener\">图灵API</a>查看。（如果你觉得很麻烦， 也可以暂时使用itchat提供的几个<a href=\"http://itchat.readthedocs.io/zh/latest/tutorial/tutorial0/#3_1\" target=\"_blank\" rel=\"noopener\">key</a>）</p></li>\n<li><p>安装<a href=\"http://docs.python-requests.org/\" target=\"_blank\" rel=\"noopener\">Requests: HTTP for Humans</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 从 pip 安装 ()</span><br><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<p>并在机器人中导入Requests包（写在程序最初）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br></pre></td></tr></table></figure></li>\n</ol>","more":"<h2 id=\"调用接口\">调用接口</h2>\n<p>wxpy提供了图灵的接口，使用方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuling = Tuling(api_key=<span class=\"string\">'Your API Key'</span>) <span class=\"comment\"># 刚才申请的key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@bot.register(my_friend) # 注册消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reply_my_friend</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    tuling.do_reply(msg)</span><br></pre></td></tr></table></figure>\n<p>为了让大家了解HTTP协议在python中的使用方式，我接下来会介绍如何使用请求获取信息。</p>\n<p>本节中内容如果没有特殊提示，都应写在你希望处理的某种注册了的消息方法中以保证它的正常运作。</p>\n<p>首先，将图灵API写入程序中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TULING_TOKEN = <span class=\"string\">'Your API Key'</span></span><br></pre></td></tr></table></figure>\n<p>然后，定义接口链接和需要传输的数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_api = <span class=\"string\">'http://www.tuling123.com/openapi/api'</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">'key'</span>    : TULING_TOKEN,</span><br><span class=\"line\">    <span class=\"string\">'info'</span>   : msg.text, <span class=\"comment\"># 收到消息的文字内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据文档，通过HTTP请求，我们将会得到一个json格式的文件。使用Requests包，我们可以简单的获得调用接口所返回的信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = requests.post(url_api, data=data).json()</span><br><span class=\"line\"><span class=\"keyword\">print</span> s <span class=\"comment\"># 打印所获得的json查看如何使用</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;u'text': u'回复的内容', u'code': 100000&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们发现经过请求，我们一般会得到一个字典内容，其中包括text和code两项：text是图灵机器人回复的文本，而code是返回的编号。详细的返回数据格式也可以在<a href=\"http://www.tuling123.com/help/h_cent_webapi.jhtml?nav=doc\" target=\"_blank\" rel=\"noopener\">图灵API</a>中看到，除了文字类还有新闻类、图片类、链接类等返回类型。在这里我们以文字类为例，介绍如何处理：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">'code'</span>] == <span class=\"number\">100000</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> s[<span class=\"string\">'text'</span>] <span class=\"comment\"># 查看回复消息的内容，可省略</span></span><br><span class=\"line\">\t\tmsg.reply(s[<span class=\"string\">'text'</span>]) <span class=\"comment\"># 回复消息</span></span><br></pre></td></tr></table></figure>\n<p>如果需要回复其他类型的消息，也完全可以通过判断code确定消息类型，再决定如何回复。这里给出我的回复方法供大家参考（也可以选择不处理这一类内容）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">'code'</span>] == <span class=\"number\">200000</span>: <span class=\"comment\"># 链接类：回复文字和链接</span></span><br><span class=\"line\">    msg.reply(s[<span class=\"string\">'text'</span>] + s[<span class=\"string\">'url'</span>])</span><br></pre></td></tr></table></figure>\n<p>至此，我们已经成功调用了图灵机器人的API接口进行回复，完整程序如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> wxpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">TULING_TOKEN = <span class=\"string\">'Your API Key'</span></span><br><span class=\"line\">bot = Bot()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@bot.register(Group, TEXT) # 这里注册了群聊中的文字消息，测试时可以设置为自己(上篇中提到过)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">group_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msg.is_at:</span><br><span class=\"line\">\t\turl_api = <span class=\"string\">'http://www.tuling123.com/openapi/api'</span></span><br><span class=\"line\">\t\tdata = &#123;</span><br><span class=\"line\">\t\t    <span class=\"string\">'key'</span>    : TULING_TOKEN,</span><br><span class=\"line\">\t\t    <span class=\"string\">'info'</span>   : msg.text, <span class=\"comment\"># 收到消息的文字内容</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ts = requests.post(url_api, data=data).json()</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> s <span class=\"comment\"># 打印所获得的json查看如何使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[<span class=\"string\">'code'</span>] == <span class=\"number\">100000</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">print</span> s[<span class=\"string\">'text'</span>] <span class=\"comment\"># 查看回复消息的内容，可省略</span></span><br><span class=\"line\">\t\t\tmsg.reply(s[<span class=\"string\">'text'</span>]) <span class=\"comment\"># 回复消息</span></span><br><span class=\"line\">        </span><br><span class=\"line\">embed()</span><br></pre></td></tr></table></figure>\n<p>以下内容更加进阶，而文末有一些简单问题的解答。如果遇到其他问题，我也会在之后更新。</p>\n<h2 id=\"番外使用上下文\">番外：使用上下文</h2>\n<p>wxpy给每个用户定义了一个相对稳定的对象/用户id，为puid，可以始终被获取到并有唯一的稳定性（根据文档），我们可以使用这个id来作为userid传给图灵机器人，以方便识别机器人或航班/列成信息的上下文。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bot.enable_puid() <span class=\"comment\"># puid 需要手动开启，请将这句话写在登陆登录之后</span></span><br></pre></td></tr></table></figure>\n<p>这样传送给接口的数据也要同时修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">'key'</span>    : TULING_TOKEN,</span><br><span class=\"line\">    <span class=\"string\">'info'</span>   : msg.text, <span class=\"comment\"># 收到消息的文字内容</span></span><br><span class=\"line\">    <span class=\"string\">'userid'</span> : msg.member.puid, <span class=\"comment\"># 使用群聊中发送者的 puid 作为 userid 传送给图灵接口， 如果是私聊可以使用 msg.sender.puid</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做的好处是，图灵机器人可以根据得userid来获取上下文信息。例如你询问『天气』，它会回复『亲爱的，悄悄地告诉我你在哪个城市？』。在这种情况下，如果你不使用userid参数，你再次回复城市，图灵机器人也无法正确找到天气；如果你使用了这一参数，且两次回复使用的userid相同，图灵机器人会为你回复你回复的城市的天气情况，完成这一对话。</p>\n<h1 id=\"使用api.ai\">使用api.ai</h1>\n<p>api.ai是一家被谷歌收购的人机交互系统，主要着重于对话机器人的开发。图灵机器人虽然包括一个知识库，但其语义识别的能力较差。我所需要的机器人主要用于新生群，很多问题人与人之间会有相当多不同的表达，图灵机器人无法满足我对于群聊机器人的要求。因此，我尝试使用api.ai进行回复有针对性的一些问题。</p>\n<p>如果你的英语相对糟糕，我不建议使用api.ai。api.ai的配置大多需要使用英语，虽然接口简单，但是后台设置相对复杂，如果没有英文背景不推荐使用。</p>\n<p>这一部分内容相对进阶，如果没有特殊需要，完全可以跳过不看。这里只作一个对api.ai使用方式上大体的介绍，希望能帮助大家了解这一网站。</p>\n<h2 id=\"前期准备-1\">前期准备</h2>\n<ol type=\"1\">\n<li><p>前往<a href=\"https://api.ai/\" target=\"_blank\" rel=\"noopener\">api.ai</a>注册，创建机器人，并获得APIkey。虽然被谷歌收购，但是这个网站是不需要翻墙的哦！</p></li>\n<li><p>安装api.ai官方提供的Python SDK</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install apiai</span><br></pre></td></tr></table></figure></li>\n<li><p>在文件头部加入（处理返回的消息时使用）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"调用接口-1\">调用接口</h2>\n<p>首先，我们需要设置api.ai的Token，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APIAI_TOKEN = <span class=\"string\">'Your API Key'</span></span><br></pre></td></tr></table></figure>\n<p>而后我们发起一个最简单的请求，一下内容都可以通过<a href=\"https://github.com/api-ai/apiai-python-client/tree/master/examples\" target=\"_blank\" rel=\"noopener\">例子</a>找到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ai = apiai.ApiAI(APIAI_TOKEN)</span><br><span class=\"line\">request = ai.text_request()</span><br><span class=\"line\">request.lang = <span class=\"string\">'zh-CN'</span> <span class=\"comment\"># 使用中文</span></span><br><span class=\"line\">request.session_id = msg.member.puid <span class=\"comment\"># api.ai 中用 session id 来区分对话对象，必须</span></span><br><span class=\"line\">request.query = msg.text <span class=\"comment\"># 消息文字内容</span></span><br></pre></td></tr></table></figure>\n<p>然后通过接口得到传回的json：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = request.getresponse()</span><br><span class=\"line\">s = json.loads(response.read(), encoding=<span class=\"string\">'UTF-8'</span>) <span class=\"comment\"># 讲传回的json转换为python字典</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br><span class=\"line\"><span class=\"comment\"># &#123;u'lang': u'zh-cn', u'status': &#123;u'errorType': u'success', u'code': 200&#125;, u'timestamp': u'20&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们发现，api.ai传回的json相对于图灵机器人更加复杂。参考<a href=\"https://docs.api.ai/docs/query\" target=\"_blank\" rel=\"noopener\">api.ai的query文档</a>，我对对这部分回复进行了如下处理：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">'result'</span>][<span class=\"string\">'action'</span>] == <span class=\"string\">'input.unknown'</span>: <span class=\"comment\"># </span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'api.ai cannot reply this message'</span>) <span class=\"comment\"># 抛出异常：使用 try 语句捕捉后使用图灵机器人回复</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> s[<span class=\"string\">'status'</span>][<span class=\"string\">'code'</span>] == <span class=\"number\">200</span>:</span><br><span class=\"line\">    msg.reply(s[<span class=\"string\">'result'</span>][<span class=\"string\">'fulfillment'</span>][<span class=\"string\">'speech'</span>]) <span class=\"comment\"># 回复 api.ai 返回的内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"api.ai的设置和调试\">api.ai的设置和调试</h2>\n<p>在进入api.ai的机器人后，你将会看到左边的多个菜单。</p>\n<p>如果你只是简单的需要特定语句回复的功能，只需要创建并设置<a href=\"https://docs.api.ai/docs/concept-intents\" target=\"_blank\" rel=\"noopener\">Intents</a>就可以实现。在User Says一栏中填写消息可能是什么，在下方Response处填写可能回复的内容，然后保存即可。</p>\n<p>api.ai自带机器学习功能，它的参数可以在机器人设置中的ML settings里找到。可以通过调整参数和方式让你的机器人回复更加准确。</p>\n<p>在进入机器人后，api.ai的右侧会出现一个对话框。你可以使用它进行一些基础调试。在上方输入你的消息后，下方会给出机器人的回复，你可以通过这个对话框来了解是否正确设置了机器人。（需要翻墙）</p>\n<h1 id=\"你可能会遇到的一些问题\">你可能会遇到的一些问题</h1>\n<h2 id=\"报错no-handlers-could-be-found-for-logger-wxpy.api.bot\">报错：No handlers could be found for logger “wxpy.api.bot”</h2>\n<p>有报错但是无法显示，可以选择在代码头部加入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\">logging.basicConfig()</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息处理删除内容\">消息处理：删除@内容</h2>\n<p>如果不删除消息中@部分的内容，图灵机器人的回复可能会受到昵称内容的影响，导致回复不准确，或是识别不出一些应当识别出的内容。我们可以用一段简单的代码删除@到空格之间的内容并去除首尾多余的空格。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg_content = re.sub(<span class=\"string\">'@[^\\s]*'</span>, <span class=\"string\">''</span>, unicodedata.normalize(<span class=\"string\">'NFKC'</span>, msg.text)).strip()</span><br></pre></td></tr></table></figure>\n<p>这里使用了正则表达式，匹配@以及它之后所有不为空的字符。如果你的微信昵称中没有空白字符，这条代码是可行的。（需要在代码开头添加<code>import re</code>）</p>"},{"title":"从零开始微信机器人（三）：表情机器人的制作","date":"2017-06-24T16:00:00.000Z","_content":"\n\n\n本篇的诞生来自于一朋友制作的表情机器人。当时觉得十分有趣，也希望加入到群聊机器人中，因此就向他讨要了[源代码](https://github.com/qwIvan/microMsg-bot)并制作了表情功能。在此我也再次感谢[吴毅凡](https://github.com/qwIvan)同学的协助！\n\n\n\n## 准备工作\n\n由于需要读取网页内容，本文中由于我个人偏好使用xpath来选择网页中元素，使用了[lxml](http://lxml.de/)包，安装的话需要：\n\n```shell\npip install lxml\n```\n\n如果你想要使用[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)来处理网页，请安装：\n\n```shell\npip install beautifulsoup4\n```\n\n<!--more-->\n\n## 使用斗图啦搜索表情\n\n由于[斗图啦](https://www.doutula.com/)是明文传输数据搜索的，我们可以简单地通过\n\n```python\nres = requests.get('https://www.doutula.com/search', {'keyword': keyword})\n```\n\n来获取关键词keyword的搜索结果页面。\n\n本例中我使用xpath来选择元素，其具体教程你可以查看[这里](http://www.w3school.com.cn/xpath/index.asp)。如果你想使用`BeautifulSoup`，可以查看[这里](https://github.com/qwIvan/microMsg-bot/blob/master/meme.py#L7)。\n\n```python\nhtml = etree.HTML(res.text)\nurl = 'http:' + random.choice(html.xpath('//div[@class=\"image-container\"][1]//img[contains(@class, \"img-responsive\")]/@data-original'))\n```\n\n其中`//div[@class=\"image-container\"][1]`选择了页面中的第一个`image-container`元素，如果你观察斗图啦搜索界面，你会发现它分为上下两部分：上面是表情的搜索结果，下半部分则是文章的搜索结果，这样我们就仅挑选了上半部分的表情搜索结果。而`//img[contains(@class, \"img-responsive\")]/@data-original'`部分则选择了所有`class`里包含`img-responsive`的`img`元素，也就是我们要的图片本身，仔细观察元素本身你会发现图片链接就在其中的`data-original`属性下（但是需要加上http协议）。\n\nChrome的审查元素功能可以帮助你快速判断自己编写的xpath能否准确选出你想要的元素，也能够查看元素本身。\n\n\n\n## 储存图片\n\n因为wxpy自动将gif文件判断作为表情发送，我们可以利用这一点把表情作为表情（而非图片）发送到聊天中。\n\n首先我们使用了临时文件：\n\n```python\nfrom tempfile import NamedTemporaryFile\n```\n\n通过request获取图片信息，然后写入到一个临时文件中。\n\n```python\nres = requests.get(url, allow_redirects=False)\ntmp = NamedTemporaryFile()\ntmp.write(res.content)\ntmp.flush()\n```\n\n\n\n## 上传图片并作为表情发送\n\nwxpy提供了上传文件的通道，而上传后的文件就可以免去重新上传直接发送。\n\n```python\nmedia_id = bot.upload_file(tmp.name)\ntmp.close()\nmsg.reply_image('.gif', media_id=media_id)\n```\n\n在这里，用我们前文提到的方法，使用`.gif`来进行表情的发送。\n\n如果你想直接发送图片，可以简单地讲`.gif`参数去除：\n\n```python\nmsg.reply_image('', media_id=media_id)\n```\n\nwxpy的作者表示将在之后的版本中更新图片发送的接口以将图片发送和表情发送分开，我相信这一设计会是更加优秀的。","source":"_posts/connector-wechat-bot-3.md","raw":"---\ntitle: 从零开始微信机器人（三）：表情机器人的制作\ndate: 2017-06-25\ncategory: 计算机课堂\ntags: \n- Python\n- 聊天机器人\n---\n\n\n\n本篇的诞生来自于一朋友制作的表情机器人。当时觉得十分有趣，也希望加入到群聊机器人中，因此就向他讨要了[源代码](https://github.com/qwIvan/microMsg-bot)并制作了表情功能。在此我也再次感谢[吴毅凡](https://github.com/qwIvan)同学的协助！\n\n\n\n## 准备工作\n\n由于需要读取网页内容，本文中由于我个人偏好使用xpath来选择网页中元素，使用了[lxml](http://lxml.de/)包，安装的话需要：\n\n```shell\npip install lxml\n```\n\n如果你想要使用[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)来处理网页，请安装：\n\n```shell\npip install beautifulsoup4\n```\n\n<!--more-->\n\n## 使用斗图啦搜索表情\n\n由于[斗图啦](https://www.doutula.com/)是明文传输数据搜索的，我们可以简单地通过\n\n```python\nres = requests.get('https://www.doutula.com/search', {'keyword': keyword})\n```\n\n来获取关键词keyword的搜索结果页面。\n\n本例中我使用xpath来选择元素，其具体教程你可以查看[这里](http://www.w3school.com.cn/xpath/index.asp)。如果你想使用`BeautifulSoup`，可以查看[这里](https://github.com/qwIvan/microMsg-bot/blob/master/meme.py#L7)。\n\n```python\nhtml = etree.HTML(res.text)\nurl = 'http:' + random.choice(html.xpath('//div[@class=\"image-container\"][1]//img[contains(@class, \"img-responsive\")]/@data-original'))\n```\n\n其中`//div[@class=\"image-container\"][1]`选择了页面中的第一个`image-container`元素，如果你观察斗图啦搜索界面，你会发现它分为上下两部分：上面是表情的搜索结果，下半部分则是文章的搜索结果，这样我们就仅挑选了上半部分的表情搜索结果。而`//img[contains(@class, \"img-responsive\")]/@data-original'`部分则选择了所有`class`里包含`img-responsive`的`img`元素，也就是我们要的图片本身，仔细观察元素本身你会发现图片链接就在其中的`data-original`属性下（但是需要加上http协议）。\n\nChrome的审查元素功能可以帮助你快速判断自己编写的xpath能否准确选出你想要的元素，也能够查看元素本身。\n\n\n\n## 储存图片\n\n因为wxpy自动将gif文件判断作为表情发送，我们可以利用这一点把表情作为表情（而非图片）发送到聊天中。\n\n首先我们使用了临时文件：\n\n```python\nfrom tempfile import NamedTemporaryFile\n```\n\n通过request获取图片信息，然后写入到一个临时文件中。\n\n```python\nres = requests.get(url, allow_redirects=False)\ntmp = NamedTemporaryFile()\ntmp.write(res.content)\ntmp.flush()\n```\n\n\n\n## 上传图片并作为表情发送\n\nwxpy提供了上传文件的通道，而上传后的文件就可以免去重新上传直接发送。\n\n```python\nmedia_id = bot.upload_file(tmp.name)\ntmp.close()\nmsg.reply_image('.gif', media_id=media_id)\n```\n\n在这里，用我们前文提到的方法，使用`.gif`来进行表情的发送。\n\n如果你想直接发送图片，可以简单地讲`.gif`参数去除：\n\n```python\nmsg.reply_image('', media_id=media_id)\n```\n\nwxpy的作者表示将在之后的版本中更新图片发送的接口以将图片发送和表情发送分开，我相信这一设计会是更加优秀的。","slug":"connector-wechat-bot-3","published":1,"updated":"2018-07-03T13:44:30.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi440006xtd3a7kiexgc","content":"<p>&#x672C;&#x7BC7;&#x7684;&#x8BDE;&#x751F;&#x6765;&#x81EA;&#x4E8E;&#x4E00;&#x670B;&#x53CB;&#x5236;&#x4F5C;&#x7684;&#x8868;&#x60C5;&#x673A;&#x5668;&#x4EBA;&#x3002;&#x5F53;&#x65F6;&#x89C9;&#x5F97;&#x5341;&#x5206;&#x6709;&#x8DA3;&#xFF0C;&#x4E5F;&#x5E0C;&#x671B;&#x52A0;&#x5165;&#x5230;&#x7FA4;&#x804A;&#x673A;&#x5668;&#x4EBA;&#x4E2D;&#xFF0C;&#x56E0;&#x6B64;&#x5C31;&#x5411;&#x4ED6;&#x8BA8;&#x8981;&#x4E86;<a href=\"https://github.com/qwIvan/microMsg-bot\" target=\"_blank\" rel=\"noopener\">&#x6E90;&#x4EE3;&#x7801;</a>&#x5E76;&#x5236;&#x4F5C;&#x4E86;&#x8868;&#x60C5;&#x529F;&#x80FD;&#x3002;&#x5728;&#x6B64;&#x6211;&#x4E5F;&#x518D;&#x6B21;&#x611F;&#x8C22;<a href=\"https://github.com/qwIvan\" target=\"_blank\" rel=\"noopener\">&#x5434;&#x6BC5;&#x51E1;</a>&#x540C;&#x5B66;&#x7684;&#x534F;&#x52A9;&#xFF01;</p>\n<h2 id=\"&#x51C6;&#x5907;&#x5DE5;&#x4F5C;\">&#x51C6;&#x5907;&#x5DE5;&#x4F5C;</h2>\n<p>&#x7531;&#x4E8E;&#x9700;&#x8981;&#x8BFB;&#x53D6;&#x7F51;&#x9875;&#x5185;&#x5BB9;&#xFF0C;&#x672C;&#x6587;&#x4E2D;&#x7531;&#x4E8E;&#x6211;&#x4E2A;&#x4EBA;&#x504F;&#x597D;&#x4F7F;&#x7528;xpath&#x6765;&#x9009;&#x62E9;&#x7F51;&#x9875;&#x4E2D;&#x5143;&#x7D20;&#xFF0C;&#x4F7F;&#x7528;&#x4E86;<a href=\"http://lxml.de/\" target=\"_blank\" rel=\"noopener\">lxml</a>&#x5305;&#xFF0C;&#x5B89;&#x88C5;&#x7684;&#x8BDD;&#x9700;&#x8981;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x8981;&#x4F7F;&#x7528;<a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\" target=\"_blank\" rel=\"noopener\">BeautifulSoup</a>&#x6765;&#x5904;&#x7406;&#x7F51;&#x9875;&#xFF0C;&#x8BF7;&#x5B89;&#x88C5;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"&#x4F7F;&#x7528;&#x6597;&#x56FE;&#x5566;&#x641C;&#x7D22;&#x8868;&#x60C5;\">&#x4F7F;&#x7528;&#x6597;&#x56FE;&#x5566;&#x641C;&#x7D22;&#x8868;&#x60C5;</h2>\n<p>&#x7531;&#x4E8E;<a href=\"https://www.doutula.com/\" target=\"_blank\" rel=\"noopener\">&#x6597;&#x56FE;&#x5566;</a>&#x662F;&#x660E;&#x6587;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x641C;&#x7D22;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5730;&#x901A;&#x8FC7;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = requests.get(<span class=\"string\">&apos;https://www.doutula.com/search&apos;</span>, {<span class=\"string\">&apos;keyword&apos;</span>: keyword})</span><br></pre></td></tr></table></figure>\n<p>&#x6765;&#x83B7;&#x53D6;&#x5173;&#x952E;&#x8BCD;keyword&#x7684;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#x9875;&#x9762;&#x3002;</p>\n<p>&#x672C;&#x4F8B;&#x4E2D;&#x6211;&#x4F7F;&#x7528;xpath&#x6765;&#x9009;&#x62E9;&#x5143;&#x7D20;&#xFF0C;&#x5176;&#x5177;&#x4F53;&#x6559;&#x7A0B;&#x4F60;&#x53EF;&#x4EE5;&#x67E5;&#x770B;<a href=\"http://www.w3school.com.cn/xpath/index.asp\" target=\"_blank\" rel=\"noopener\">&#x8FD9;&#x91CC;</a>&#x3002;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x4F7F;&#x7528;<code>BeautifulSoup</code>&#xFF0C;&#x53EF;&#x4EE5;&#x67E5;&#x770B;<a href=\"https://github.com/qwIvan/microMsg-bot/blob/master/meme.py#L7\" target=\"_blank\" rel=\"noopener\">&#x8FD9;&#x91CC;</a>&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = etree.HTML(res.text)</span><br><span class=\"line\">url = <span class=\"string\">&apos;http:&apos;</span> + random.choice(html.xpath(<span class=\"string\">&apos;//div[@class=&quot;image-container&quot;][1]//img[contains(@class, &quot;img-responsive&quot;)]/@data-original&apos;</span>))</span><br></pre></td></tr></table></figure>\n<p>&#x5176;&#x4E2D;<code>//div[@class=&quot;image-container&quot;][1]</code>&#x9009;&#x62E9;&#x4E86;&#x9875;&#x9762;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;<code>image-container</code>&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x89C2;&#x5BDF;&#x6597;&#x56FE;&#x5566;&#x641C;&#x7D22;&#x754C;&#x9762;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x5B83;&#x5206;&#x4E3A;&#x4E0A;&#x4E0B;&#x4E24;&#x90E8;&#x5206;&#xFF1A;&#x4E0A;&#x9762;&#x662F;&#x8868;&#x60C5;&#x7684;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#xFF0C;&#x4E0B;&#x534A;&#x90E8;&#x5206;&#x5219;&#x662F;&#x6587;&#x7AE0;&#x7684;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x4EC5;&#x6311;&#x9009;&#x4E86;&#x4E0A;&#x534A;&#x90E8;&#x5206;&#x7684;&#x8868;&#x60C5;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#x3002;&#x800C;<code>//img[contains(@class, &quot;img-responsive&quot;)]/@data-original&apos;</code>&#x90E8;&#x5206;&#x5219;&#x9009;&#x62E9;&#x4E86;&#x6240;&#x6709;<code>class</code>&#x91CC;&#x5305;&#x542B;<code>img-responsive</code>&#x7684;<code>img</code>&#x5143;&#x7D20;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x7684;&#x56FE;&#x7247;&#x672C;&#x8EAB;&#xFF0C;&#x4ED4;&#x7EC6;&#x89C2;&#x5BDF;&#x5143;&#x7D20;&#x672C;&#x8EAB;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x56FE;&#x7247;&#x94FE;&#x63A5;&#x5C31;&#x5728;&#x5176;&#x4E2D;&#x7684;<code>data-original</code>&#x5C5E;&#x6027;&#x4E0B;&#xFF08;&#x4F46;&#x662F;&#x9700;&#x8981;&#x52A0;&#x4E0A;http&#x534F;&#x8BAE;&#xFF09;&#x3002;</p>\n<p>Chrome&#x7684;&#x5BA1;&#x67E5;&#x5143;&#x7D20;&#x529F;&#x80FD;&#x53EF;&#x4EE5;&#x5E2E;&#x52A9;&#x4F60;&#x5FEB;&#x901F;&#x5224;&#x65AD;&#x81EA;&#x5DF1;&#x7F16;&#x5199;&#x7684;xpath&#x80FD;&#x5426;&#x51C6;&#x786E;&#x9009;&#x51FA;&#x4F60;&#x60F3;&#x8981;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4E5F;&#x80FD;&#x591F;&#x67E5;&#x770B;&#x5143;&#x7D20;&#x672C;&#x8EAB;&#x3002;</p>\n<h2 id=\"&#x50A8;&#x5B58;&#x56FE;&#x7247;\">&#x50A8;&#x5B58;&#x56FE;&#x7247;</h2>\n<p>&#x56E0;&#x4E3A;wxpy&#x81EA;&#x52A8;&#x5C06;gif&#x6587;&#x4EF6;&#x5224;&#x65AD;&#x4F5C;&#x4E3A;&#x8868;&#x60C5;&#x53D1;&#x9001;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x8FD9;&#x4E00;&#x70B9;&#x628A;&#x8868;&#x60C5;&#x4F5C;&#x4E3A;&#x8868;&#x60C5;&#xFF08;&#x800C;&#x975E;&#x56FE;&#x7247;&#xFF09;&#x53D1;&#x9001;&#x5230;&#x804A;&#x5929;&#x4E2D;&#x3002;</p>\n<p>&#x9996;&#x5148;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E86;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tempfile <span class=\"keyword\">import</span> NamedTemporaryFile</span><br></pre></td></tr></table></figure>\n<p>&#x901A;&#x8FC7;request&#x83B7;&#x53D6;&#x56FE;&#x7247;&#x4FE1;&#x606F;&#xFF0C;&#x7136;&#x540E;&#x5199;&#x5165;&#x5230;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#x4E2D;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = requests.get(url, allow_redirects=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">tmp = NamedTemporaryFile()</span><br><span class=\"line\">tmp.write(res.content)</span><br><span class=\"line\">tmp.flush()</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x4E0A;&#x4F20;&#x56FE;&#x7247;&#x5E76;&#x4F5C;&#x4E3A;&#x8868;&#x60C5;&#x53D1;&#x9001;\">&#x4E0A;&#x4F20;&#x56FE;&#x7247;&#x5E76;&#x4F5C;&#x4E3A;&#x8868;&#x60C5;&#x53D1;&#x9001;</h2>\n<p>wxpy&#x63D0;&#x4F9B;&#x4E86;&#x4E0A;&#x4F20;&#x6587;&#x4EF6;&#x7684;&#x901A;&#x9053;&#xFF0C;&#x800C;&#x4E0A;&#x4F20;&#x540E;&#x7684;&#x6587;&#x4EF6;&#x5C31;&#x53EF;&#x4EE5;&#x514D;&#x53BB;&#x91CD;&#x65B0;&#x4E0A;&#x4F20;&#x76F4;&#x63A5;&#x53D1;&#x9001;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">media_id = bot.upload_file(tmp.name)</span><br><span class=\"line\">tmp.close()</span><br><span class=\"line\">msg.reply_image(<span class=\"string\">&apos;.gif&apos;</span>, media_id=media_id)</span><br></pre></td></tr></table></figure>\n<p>&#x5728;&#x8FD9;&#x91CC;&#xFF0C;&#x7528;&#x6211;&#x4EEC;&#x524D;&#x6587;&#x63D0;&#x5230;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4F7F;&#x7528;<code>.gif</code>&#x6765;&#x8FDB;&#x884C;&#x8868;&#x60C5;&#x7684;&#x53D1;&#x9001;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x76F4;&#x63A5;&#x53D1;&#x9001;&#x56FE;&#x7247;&#xFF0C;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5730;&#x8BB2;<code>.gif</code>&#x53C2;&#x6570;&#x53BB;&#x9664;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg.reply_image(<span class=\"string\">&apos;&apos;</span>, media_id=media_id)</span><br></pre></td></tr></table></figure>\n<p>wxpy&#x7684;&#x4F5C;&#x8005;&#x8868;&#x793A;&#x5C06;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x7248;&#x672C;&#x4E2D;&#x66F4;&#x65B0;&#x56FE;&#x7247;&#x53D1;&#x9001;&#x7684;&#x63A5;&#x53E3;&#x4EE5;&#x5C06;&#x56FE;&#x7247;&#x53D1;&#x9001;&#x548C;&#x8868;&#x60C5;&#x53D1;&#x9001;&#x5206;&#x5F00;&#xFF0C;&#x6211;&#x76F8;&#x4FE1;&#x8FD9;&#x4E00;&#x8BBE;&#x8BA1;&#x4F1A;&#x662F;&#x66F4;&#x52A0;&#x4F18;&#x79C0;&#x7684;&#x3002;</p>\n","site":{"data":{}},"excerpt":"<p>本篇的诞生来自于一朋友制作的表情机器人。当时觉得十分有趣，也希望加入到群聊机器人中，因此就向他讨要了<a href=\"https://github.com/qwIvan/microMsg-bot\" target=\"_blank\" rel=\"noopener\">源代码</a>并制作了表情功能。在此我也再次感谢<a href=\"https://github.com/qwIvan\" target=\"_blank\" rel=\"noopener\">吴毅凡</a>同学的协助！</p>\n<h2 id=\"准备工作\">准备工作</h2>\n<p>由于需要读取网页内容，本文中由于我个人偏好使用xpath来选择网页中元素，使用了<a href=\"http://lxml.de/\" target=\"_blank\" rel=\"noopener\">lxml</a>包，安装的话需要：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n<p>如果你想要使用<a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\" target=\"_blank\" rel=\"noopener\">BeautifulSoup</a>来处理网页，请安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"使用斗图啦搜索表情\">使用斗图啦搜索表情</h2>\n<p>由于<a href=\"https://www.doutula.com/\" target=\"_blank\" rel=\"noopener\">斗图啦</a>是明文传输数据搜索的，我们可以简单地通过</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = requests.get(<span class=\"string\">'https://www.doutula.com/search'</span>, &#123;<span class=\"string\">'keyword'</span>: keyword&#125;)</span><br></pre></td></tr></table></figure>\n<p>来获取关键词keyword的搜索结果页面。</p>\n<p>本例中我使用xpath来选择元素，其具体教程你可以查看<a href=\"http://www.w3school.com.cn/xpath/index.asp\" target=\"_blank\" rel=\"noopener\">这里</a>。如果你想使用<code>BeautifulSoup</code>，可以查看<a href=\"https://github.com/qwIvan/microMsg-bot/blob/master/meme.py#L7\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = etree.HTML(res.text)</span><br><span class=\"line\">url = <span class=\"string\">'http:'</span> + random.choice(html.xpath(<span class=\"string\">'//div[@class=\"image-container\"][1]//img[contains(@class, \"img-responsive\")]/@data-original'</span>))</span><br></pre></td></tr></table></figure>\n<p>其中<code>//div[@class=&quot;image-container&quot;][1]</code>选择了页面中的第一个<code>image-container</code>元素，如果你观察斗图啦搜索界面，你会发现它分为上下两部分：上面是表情的搜索结果，下半部分则是文章的搜索结果，这样我们就仅挑选了上半部分的表情搜索结果。而<code>//img[contains(@class, &quot;img-responsive&quot;)]/@data-original'</code>部分则选择了所有<code>class</code>里包含<code>img-responsive</code>的<code>img</code>元素，也就是我们要的图片本身，仔细观察元素本身你会发现图片链接就在其中的<code>data-original</code>属性下（但是需要加上http协议）。</p>\n<p>Chrome的审查元素功能可以帮助你快速判断自己编写的xpath能否准确选出你想要的元素，也能够查看元素本身。</p>\n<h2 id=\"储存图片\">储存图片</h2>\n<p>因为wxpy自动将gif文件判断作为表情发送，我们可以利用这一点把表情作为表情（而非图片）发送到聊天中。</p>\n<p>首先我们使用了临时文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tempfile <span class=\"keyword\">import</span> NamedTemporaryFile</span><br></pre></td></tr></table></figure>\n<p>通过request获取图片信息，然后写入到一个临时文件中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = requests.get(url, allow_redirects=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">tmp = NamedTemporaryFile()</span><br><span class=\"line\">tmp.write(res.content)</span><br><span class=\"line\">tmp.flush()</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传图片并作为表情发送\">上传图片并作为表情发送</h2>\n<p>wxpy提供了上传文件的通道，而上传后的文件就可以免去重新上传直接发送。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">media_id = bot.upload_file(tmp.name)</span><br><span class=\"line\">tmp.close()</span><br><span class=\"line\">msg.reply_image(<span class=\"string\">'.gif'</span>, media_id=media_id)</span><br></pre></td></tr></table></figure>\n<p>在这里，用我们前文提到的方法，使用<code>.gif</code>来进行表情的发送。</p>\n<p>如果你想直接发送图片，可以简单地讲<code>.gif</code>参数去除：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg.reply_image(<span class=\"string\">''</span>, media_id=media_id)</span><br></pre></td></tr></table></figure>\n<p>wxpy的作者表示将在之后的版本中更新图片发送的接口以将图片发送和表情发送分开，我相信这一设计会是更加优秀的。</p>"},{"title":"从零开始微信机器人（四）：监控机器人程序","date":"2017-06-25T16:00:00.000Z","_content":"\n\n\n由于使用网页版微信，机器人往往不能够永远地在线。如果无法一直在线，也就失去了自动回复程序的意义。在此，我们使用两种方式来监控机器人程序：\n\n1. 自动定时发送消息\n2. 使用supervisor进行监控\n\n\n\n# 自动发送消息\n\n## 准备\n\n如果需要定时发送消息，使用`sleep`方式来等待计时会阻塞线程，因此我们会使用`threading`来进行多线程的操作。把一个线程分配给自动给特定人发送微信消息。\n\n## 定义自动发送消息的方法\n\n在进行多线程操作之前，我们先定义一个自动发送消息的方法以备调用：\n\n```python\ndef send_online_notification(name):\n    my_friend = ensure_one(bot.search(name))\n    while True:\n        my_friend.send('Hello!') # 你想发送的消息\n        time.sleep(3600) # 一小时后在进行发送\n```\n\nwxpy的`ensure_one()`方法会确认返回的内容仅有一个值，如果返回的列表超过一个值（或是没有返回），它会进行报错。我们在这里寻找`name`相关的好友，并且保证只有一个这样的好友。如果你需要给多个好友发送消息，我建议再使用一个循环来遍历好友列表。\n\n<!--more-->\n\n我们写一个阻塞线程的死循环，在死循环中给需要寻找发送特定消息，并让线程停止一小时，由此来打成定时发送消息的方法。\n\n## 增加线程\n\n另一边，我们需要利用多线程调用这个方法。\n\n```python\npositiveSendingThread = threading.Thread(target=send_online_notification, args=(u'乙醚。',)) # 请在这里输入你想要寻找的好友昵称或备注\npositiveSendingThread.setDaemon(True)\npositiveSendingThread.start()\n```\n\n这样就成功启用了一个线程来进行自动发送消息了。\n\n\n\n# 利用Supervisor监控\n\n## 安装\n\nsupervisor是一个python写成的程序，因此可以简单地通过`pip`来进行安装：\n\n```shell\npip install supervisor\n```\n\n\n\n## 调整 wxpy设置\n\n如果想使用supervisor的重启功能，我们必须开启wxpy的缓存功能以储存登录状态，具体操作在登录时增加`cache_path`参数：\n\n```python\nbot = Bot(cache_path=True)\n```\n\n你也可以自由选择将缓存存在什么文件中，以免多个机器人冲突\n\n\n\n## 配置\n\n官方提供了一个默认的配置文件，你可以使用这条命令输出到你放置机器人的文件夹中：\n\n```shell\necho_supervisord_conf > supervisord.conf\n```\n\n在这个`supervisord.conf`后面，我们再追加对微信机器人程序的控制\n\n```shell\n[program:bot]  \ncommand=python ./wxbot.py              ;执行机器人文件，请修改文件名 \nprocess_name=%(program_name)s  \nautostart=true                   ; 程序是否随supervisor启动而启动  \nautorestart=true                 ;程序停止时，是否自动重启  \nstartsecs=10  \n```\n\n\n\n## 启动和控制\n\n从命令启动supervisor只需要一句：\n\n```\nsupervisord -c supervisord.conf\n```\n\n`-c`用以指定配置文件，也就是我们刚刚编写的文件。\n\n使用supervisor还可以方便的开始、重启和停止程序：\n\n```shell\nsupervisorctl start bot # 开始程序，bot 是刚刚填写的程序名\nsupervisorctl restart bot # 重启程序\nsupervisorctl stop bot # 停止程序\n```\n\n使用supervisor查看自己的程序运行状态\n\n```shell\nsupervisorctl status # 查看状态\n```\n\n因此，只要将wxpy的缓存打开，并且使用supervisor进行自动重启，我们就可以获得一个长时间保持登录的自动回复机器人啦！\n\n","source":"_posts/connector-wechat-bot-4.md","raw":"---\ntitle: 从零开始微信机器人（四）：监控机器人程序\ndate: 2017-06-26\ncategory: 计算机课堂\ntags: \n- Python\n- 聊天机器人\n---\n\n\n\n由于使用网页版微信，机器人往往不能够永远地在线。如果无法一直在线，也就失去了自动回复程序的意义。在此，我们使用两种方式来监控机器人程序：\n\n1. 自动定时发送消息\n2. 使用supervisor进行监控\n\n\n\n# 自动发送消息\n\n## 准备\n\n如果需要定时发送消息，使用`sleep`方式来等待计时会阻塞线程，因此我们会使用`threading`来进行多线程的操作。把一个线程分配给自动给特定人发送微信消息。\n\n## 定义自动发送消息的方法\n\n在进行多线程操作之前，我们先定义一个自动发送消息的方法以备调用：\n\n```python\ndef send_online_notification(name):\n    my_friend = ensure_one(bot.search(name))\n    while True:\n        my_friend.send('Hello!') # 你想发送的消息\n        time.sleep(3600) # 一小时后在进行发送\n```\n\nwxpy的`ensure_one()`方法会确认返回的内容仅有一个值，如果返回的列表超过一个值（或是没有返回），它会进行报错。我们在这里寻找`name`相关的好友，并且保证只有一个这样的好友。如果你需要给多个好友发送消息，我建议再使用一个循环来遍历好友列表。\n\n<!--more-->\n\n我们写一个阻塞线程的死循环，在死循环中给需要寻找发送特定消息，并让线程停止一小时，由此来打成定时发送消息的方法。\n\n## 增加线程\n\n另一边，我们需要利用多线程调用这个方法。\n\n```python\npositiveSendingThread = threading.Thread(target=send_online_notification, args=(u'乙醚。',)) # 请在这里输入你想要寻找的好友昵称或备注\npositiveSendingThread.setDaemon(True)\npositiveSendingThread.start()\n```\n\n这样就成功启用了一个线程来进行自动发送消息了。\n\n\n\n# 利用Supervisor监控\n\n## 安装\n\nsupervisor是一个python写成的程序，因此可以简单地通过`pip`来进行安装：\n\n```shell\npip install supervisor\n```\n\n\n\n## 调整 wxpy设置\n\n如果想使用supervisor的重启功能，我们必须开启wxpy的缓存功能以储存登录状态，具体操作在登录时增加`cache_path`参数：\n\n```python\nbot = Bot(cache_path=True)\n```\n\n你也可以自由选择将缓存存在什么文件中，以免多个机器人冲突\n\n\n\n## 配置\n\n官方提供了一个默认的配置文件，你可以使用这条命令输出到你放置机器人的文件夹中：\n\n```shell\necho_supervisord_conf > supervisord.conf\n```\n\n在这个`supervisord.conf`后面，我们再追加对微信机器人程序的控制\n\n```shell\n[program:bot]  \ncommand=python ./wxbot.py              ;执行机器人文件，请修改文件名 \nprocess_name=%(program_name)s  \nautostart=true                   ; 程序是否随supervisor启动而启动  \nautorestart=true                 ;程序停止时，是否自动重启  \nstartsecs=10  \n```\n\n\n\n## 启动和控制\n\n从命令启动supervisor只需要一句：\n\n```\nsupervisord -c supervisord.conf\n```\n\n`-c`用以指定配置文件，也就是我们刚刚编写的文件。\n\n使用supervisor还可以方便的开始、重启和停止程序：\n\n```shell\nsupervisorctl start bot # 开始程序，bot 是刚刚填写的程序名\nsupervisorctl restart bot # 重启程序\nsupervisorctl stop bot # 停止程序\n```\n\n使用supervisor查看自己的程序运行状态\n\n```shell\nsupervisorctl status # 查看状态\n```\n\n因此，只要将wxpy的缓存打开，并且使用supervisor进行自动重启，我们就可以获得一个长时间保持登录的自动回复机器人啦！\n\n","slug":"connector-wechat-bot-4","published":1,"updated":"2018-07-03T13:44:30.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi450007xtd3ewpignpj","content":"<p>&#x7531;&#x4E8E;&#x4F7F;&#x7528;&#x7F51;&#x9875;&#x7248;&#x5FAE;&#x4FE1;&#xFF0C;&#x673A;&#x5668;&#x4EBA;&#x5F80;&#x5F80;&#x4E0D;&#x80FD;&#x591F;&#x6C38;&#x8FDC;&#x5730;&#x5728;&#x7EBF;&#x3002;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x4E00;&#x76F4;&#x5728;&#x7EBF;&#xFF0C;&#x4E5F;&#x5C31;&#x5931;&#x53BB;&#x4E86;&#x81EA;&#x52A8;&#x56DE;&#x590D;&#x7A0B;&#x5E8F;&#x7684;&#x610F;&#x4E49;&#x3002;&#x5728;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x6765;&#x76D1;&#x63A7;&#x673A;&#x5668;&#x4EBA;&#x7A0B;&#x5E8F;&#xFF1A;</p>\n<ol type=\"1\">\n<li>&#x81EA;&#x52A8;&#x5B9A;&#x65F6;&#x53D1;&#x9001;&#x6D88;&#x606F;</li>\n<li>&#x4F7F;&#x7528;supervisor&#x8FDB;&#x884C;&#x76D1;&#x63A7;</li>\n</ol>\n<h1 id=\"&#x81EA;&#x52A8;&#x53D1;&#x9001;&#x6D88;&#x606F;\">&#x81EA;&#x52A8;&#x53D1;&#x9001;&#x6D88;&#x606F;</h1>\n<h2 id=\"&#x51C6;&#x5907;\">&#x51C6;&#x5907;</h2>\n<p>&#x5982;&#x679C;&#x9700;&#x8981;&#x5B9A;&#x65F6;&#x53D1;&#x9001;&#x6D88;&#x606F;&#xFF0C;&#x4F7F;&#x7528;<code>sleep</code>&#x65B9;&#x5F0F;&#x6765;&#x7B49;&#x5F85;&#x8BA1;&#x65F6;&#x4F1A;&#x963B;&#x585E;&#x7EBF;&#x7A0B;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4F1A;&#x4F7F;&#x7528;<code>threading</code>&#x6765;&#x8FDB;&#x884C;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x64CD;&#x4F5C;&#x3002;&#x628A;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5206;&#x914D;&#x7ED9;&#x81EA;&#x52A8;&#x7ED9;&#x7279;&#x5B9A;&#x4EBA;&#x53D1;&#x9001;&#x5FAE;&#x4FE1;&#x6D88;&#x606F;&#x3002;</p>\n<h2 id=\"&#x5B9A;&#x4E49;&#x81EA;&#x52A8;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x6CD5;\">&#x5B9A;&#x4E49;&#x81EA;&#x52A8;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x6CD5;</h2>\n<p>&#x5728;&#x8FDB;&#x884C;&#x591A;&#x7EBF;&#x7A0B;&#x64CD;&#x4F5C;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x81EA;&#x52A8;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x6CD5;&#x4EE5;&#x5907;&#x8C03;&#x7528;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_online_notification</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    my_friend = ensure_one(bot.search(name))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        my_friend.send(<span class=\"string\">&apos;Hello!&apos;</span>) <span class=\"comment\"># &#x4F60;&#x60F3;&#x53D1;&#x9001;&#x7684;&#x6D88;&#x606F;</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">3600</span>) <span class=\"comment\"># &#x4E00;&#x5C0F;&#x65F6;&#x540E;&#x5728;&#x8FDB;&#x884C;&#x53D1;&#x9001;</span></span><br></pre></td></tr></table></figure>\n<p>wxpy&#x7684;<code>ensure_one()</code>&#x65B9;&#x6CD5;&#x4F1A;&#x786E;&#x8BA4;&#x8FD4;&#x56DE;&#x7684;&#x5185;&#x5BB9;&#x4EC5;&#x6709;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x5982;&#x679C;&#x8FD4;&#x56DE;&#x7684;&#x5217;&#x8868;&#x8D85;&#x8FC7;&#x4E00;&#x4E2A;&#x503C;&#xFF08;&#x6216;&#x662F;&#x6CA1;&#x6709;&#x8FD4;&#x56DE;&#xFF09;&#xFF0C;&#x5B83;&#x4F1A;&#x8FDB;&#x884C;&#x62A5;&#x9519;&#x3002;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x91CC;&#x5BFB;&#x627E;<code>name</code>&#x76F8;&#x5173;&#x7684;&#x597D;&#x53CB;&#xFF0C;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x597D;&#x53CB;&#x3002;&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x7ED9;&#x591A;&#x4E2A;&#x597D;&#x53CB;&#x53D1;&#x9001;&#x6D88;&#x606F;&#xFF0C;&#x6211;&#x5EFA;&#x8BAE;&#x518D;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x6765;&#x904D;&#x5386;&#x597D;&#x53CB;&#x5217;&#x8868;&#x3002;</p>\n<a id=\"more\"></a>\n<p>&#x6211;&#x4EEC;&#x5199;&#x4E00;&#x4E2A;&#x963B;&#x585E;&#x7EBF;&#x7A0B;&#x7684;&#x6B7B;&#x5FAA;&#x73AF;&#xFF0C;&#x5728;&#x6B7B;&#x5FAA;&#x73AF;&#x4E2D;&#x7ED9;&#x9700;&#x8981;&#x5BFB;&#x627E;&#x53D1;&#x9001;&#x7279;&#x5B9A;&#x6D88;&#x606F;&#xFF0C;&#x5E76;&#x8BA9;&#x7EBF;&#x7A0B;&#x505C;&#x6B62;&#x4E00;&#x5C0F;&#x65F6;&#xFF0C;&#x7531;&#x6B64;&#x6765;&#x6253;&#x6210;&#x5B9A;&#x65F6;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x7684;&#x65B9;&#x6CD5;&#x3002;</p>\n<h2 id=\"&#x589E;&#x52A0;&#x7EBF;&#x7A0B;\">&#x589E;&#x52A0;&#x7EBF;&#x7A0B;</h2>\n<p>&#x53E6;&#x4E00;&#x8FB9;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5229;&#x7528;&#x591A;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positiveSendingThread = threading.Thread(target=send_online_notification, args=(<span class=\"string\">u&apos;&#x4E59;&#x919A;&#x3002;&apos;</span>,)) <span class=\"comment\"># &#x8BF7;&#x5728;&#x8FD9;&#x91CC;&#x8F93;&#x5165;&#x4F60;&#x60F3;&#x8981;&#x5BFB;&#x627E;&#x7684;&#x597D;&#x53CB;&#x6635;&#x79F0;&#x6216;&#x5907;&#x6CE8;</span></span><br><span class=\"line\">positiveSendingThread.setDaemon(<span class=\"keyword\">True</span>)</span><br><span class=\"line\">positiveSendingThread.start()</span><br></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x6837;&#x5C31;&#x6210;&#x529F;&#x542F;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6765;&#x8FDB;&#x884C;&#x81EA;&#x52A8;&#x53D1;&#x9001;&#x6D88;&#x606F;&#x4E86;&#x3002;</p>\n<h1 id=\"&#x5229;&#x7528;supervisor&#x76D1;&#x63A7;\">&#x5229;&#x7528;Supervisor&#x76D1;&#x63A7;</h1>\n<h2 id=\"&#x5B89;&#x88C5;\">&#x5B89;&#x88C5;</h2>\n<p>supervisor&#x662F;&#x4E00;&#x4E2A;python&#x5199;&#x6210;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5730;&#x901A;&#x8FC7;<code>pip</code>&#x6765;&#x8FDB;&#x884C;&#x5B89;&#x88C5;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x8C03;&#x6574;-wxpy&#x8BBE;&#x7F6E;\">&#x8C03;&#x6574; wxpy&#x8BBE;&#x7F6E;</h2>\n<p>&#x5982;&#x679C;&#x60F3;&#x4F7F;&#x7528;supervisor&#x7684;&#x91CD;&#x542F;&#x529F;&#x80FD;&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5F00;&#x542F;wxpy&#x7684;&#x7F13;&#x5B58;&#x529F;&#x80FD;&#x4EE5;&#x50A8;&#x5B58;&#x767B;&#x5F55;&#x72B6;&#x6001;&#xFF0C;&#x5177;&#x4F53;&#x64CD;&#x4F5C;&#x5728;&#x767B;&#x5F55;&#x65F6;&#x589E;&#x52A0;<code>cache_path</code>&#x53C2;&#x6570;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bot = Bot(cache_path=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x9009;&#x62E9;&#x5C06;&#x7F13;&#x5B58;&#x5B58;&#x5728;&#x4EC0;&#x4E48;&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x4EE5;&#x514D;&#x591A;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x51B2;&#x7A81;</p>\n<h2 id=\"&#x914D;&#x7F6E;\">&#x914D;&#x7F6E;</h2>\n<p>&#x5B98;&#x65B9;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x6761;&#x547D;&#x4EE4;&#x8F93;&#x51FA;&#x5230;&#x4F60;&#x653E;&#x7F6E;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure>\n<p>&#x5728;&#x8FD9;&#x4E2A;<code>supervisord.conf</code>&#x540E;&#x9762;&#xFF0C;&#x6211;&#x4EEC;&#x518D;&#x8FFD;&#x52A0;&#x5BF9;&#x5FAE;&#x4FE1;&#x673A;&#x5668;&#x4EBA;&#x7A0B;&#x5E8F;&#x7684;&#x63A7;&#x5236;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:bot]  </span><br><span class=\"line\">command=python ./wxbot.py              ;&#x6267;&#x884C;&#x673A;&#x5668;&#x4EBA;&#x6587;&#x4EF6;&#xFF0C;&#x8BF7;&#x4FEE;&#x6539;&#x6587;&#x4EF6;&#x540D; </span><br><span class=\"line\">process_name=%(program_name)s  </span><br><span class=\"line\">autostart=true                   ; &#x7A0B;&#x5E8F;&#x662F;&#x5426;&#x968F;supervisor&#x542F;&#x52A8;&#x800C;&#x542F;&#x52A8;  </span><br><span class=\"line\">autorestart=true                 ;&#x7A0B;&#x5E8F;&#x505C;&#x6B62;&#x65F6;&#xFF0C;&#x662F;&#x5426;&#x81EA;&#x52A8;&#x91CD;&#x542F;  </span><br><span class=\"line\">startsecs=10</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x542F;&#x52A8;&#x548C;&#x63A7;&#x5236;\">&#x542F;&#x52A8;&#x548C;&#x63A7;&#x5236;</h2>\n<p>&#x4ECE;&#x547D;&#x4EE4;&#x542F;&#x52A8;supervisor&#x53EA;&#x9700;&#x8981;&#x4E00;&#x53E5;&#xFF1A;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure>\n<p><code>-c</code>&#x7528;&#x4EE5;&#x6307;&#x5B9A;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x521A;&#x521A;&#x7F16;&#x5199;&#x7684;&#x6587;&#x4EF6;&#x3002;</p>\n<p>&#x4F7F;&#x7528;supervisor&#x8FD8;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x7684;&#x5F00;&#x59CB;&#x3001;&#x91CD;&#x542F;&#x548C;&#x505C;&#x6B62;&#x7A0B;&#x5E8F;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl start bot # &#x5F00;&#x59CB;&#x7A0B;&#x5E8F;&#xFF0C;bot &#x662F;&#x521A;&#x521A;&#x586B;&#x5199;&#x7684;&#x7A0B;&#x5E8F;&#x540D;</span><br><span class=\"line\">supervisorctl restart bot # &#x91CD;&#x542F;&#x7A0B;&#x5E8F;</span><br><span class=\"line\">supervisorctl stop bot # &#x505C;&#x6B62;&#x7A0B;&#x5E8F;</span><br></pre></td></tr></table></figure>\n<p>&#x4F7F;&#x7528;supervisor&#x67E5;&#x770B;&#x81EA;&#x5DF1;&#x7684;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x72B6;&#x6001;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status # &#x67E5;&#x770B;&#x72B6;&#x6001;</span><br></pre></td></tr></table></figure>\n<p>&#x56E0;&#x6B64;&#xFF0C;&#x53EA;&#x8981;&#x5C06;wxpy&#x7684;&#x7F13;&#x5B58;&#x6253;&#x5F00;&#xFF0C;&#x5E76;&#x4E14;&#x4F7F;&#x7528;supervisor&#x8FDB;&#x884C;&#x81EA;&#x52A8;&#x91CD;&#x542F;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x4E00;&#x4E2A;&#x957F;&#x65F6;&#x95F4;&#x4FDD;&#x6301;&#x767B;&#x5F55;&#x7684;&#x81EA;&#x52A8;&#x56DE;&#x590D;&#x673A;&#x5668;&#x4EBA;&#x5566;&#xFF01;</p>\n","site":{"data":{}},"excerpt":"<p>由于使用网页版微信，机器人往往不能够永远地在线。如果无法一直在线，也就失去了自动回复程序的意义。在此，我们使用两种方式来监控机器人程序：</p>\n<ol type=\"1\">\n<li>自动定时发送消息</li>\n<li>使用supervisor进行监控</li>\n</ol>\n<h1 id=\"自动发送消息\">自动发送消息</h1>\n<h2 id=\"准备\">准备</h2>\n<p>如果需要定时发送消息，使用<code>sleep</code>方式来等待计时会阻塞线程，因此我们会使用<code>threading</code>来进行多线程的操作。把一个线程分配给自动给特定人发送微信消息。</p>\n<h2 id=\"定义自动发送消息的方法\">定义自动发送消息的方法</h2>\n<p>在进行多线程操作之前，我们先定义一个自动发送消息的方法以备调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_online_notification</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    my_friend = ensure_one(bot.search(name))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        my_friend.send(<span class=\"string\">'Hello!'</span>) <span class=\"comment\"># 你想发送的消息</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">3600</span>) <span class=\"comment\"># 一小时后在进行发送</span></span><br></pre></td></tr></table></figure>\n<p>wxpy的<code>ensure_one()</code>方法会确认返回的内容仅有一个值，如果返回的列表超过一个值（或是没有返回），它会进行报错。我们在这里寻找<code>name</code>相关的好友，并且保证只有一个这样的好友。如果你需要给多个好友发送消息，我建议再使用一个循环来遍历好友列表。</p>","more":"<p>我们写一个阻塞线程的死循环，在死循环中给需要寻找发送特定消息，并让线程停止一小时，由此来打成定时发送消息的方法。</p>\n<h2 id=\"增加线程\">增加线程</h2>\n<p>另一边，我们需要利用多线程调用这个方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positiveSendingThread = threading.Thread(target=send_online_notification, args=(<span class=\"string\">u'乙醚。'</span>,)) <span class=\"comment\"># 请在这里输入你想要寻找的好友昵称或备注</span></span><br><span class=\"line\">positiveSendingThread.setDaemon(<span class=\"keyword\">True</span>)</span><br><span class=\"line\">positiveSendingThread.start()</span><br></pre></td></tr></table></figure>\n<p>这样就成功启用了一个线程来进行自动发送消息了。</p>\n<h1 id=\"利用supervisor监控\">利用Supervisor监控</h1>\n<h2 id=\"安装\">安装</h2>\n<p>supervisor是一个python写成的程序，因此可以简单地通过<code>pip</code>来进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h2 id=\"调整-wxpy设置\">调整 wxpy设置</h2>\n<p>如果想使用supervisor的重启功能，我们必须开启wxpy的缓存功能以储存登录状态，具体操作在登录时增加<code>cache_path</code>参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bot = Bot(cache_path=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>你也可以自由选择将缓存存在什么文件中，以免多个机器人冲突</p>\n<h2 id=\"配置\">配置</h2>\n<p>官方提供了一个默认的配置文件，你可以使用这条命令输出到你放置机器人的文件夹中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure>\n<p>在这个<code>supervisord.conf</code>后面，我们再追加对微信机器人程序的控制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:bot]  </span><br><span class=\"line\">command=python ./wxbot.py              ;执行机器人文件，请修改文件名 </span><br><span class=\"line\">process_name=%(program_name)s  </span><br><span class=\"line\">autostart=true                   ; 程序是否随supervisor启动而启动  </span><br><span class=\"line\">autorestart=true                 ;程序停止时，是否自动重启  </span><br><span class=\"line\">startsecs=10</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动和控制\">启动和控制</h2>\n<p>从命令启动supervisor只需要一句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure>\n<p><code>-c</code>用以指定配置文件，也就是我们刚刚编写的文件。</p>\n<p>使用supervisor还可以方便的开始、重启和停止程序：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl start bot # 开始程序，bot 是刚刚填写的程序名</span><br><span class=\"line\">supervisorctl restart bot # 重启程序</span><br><span class=\"line\">supervisorctl stop bot # 停止程序</span><br></pre></td></tr></table></figure>\n<p>使用supervisor查看自己的程序运行状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status # 查看状态</span><br></pre></td></tr></table></figure>\n<p>因此，只要将wxpy的缓存打开，并且使用supervisor进行自动重启，我们就可以获得一个长时间保持登录的自动回复机器人啦！</p>"},{"title":"[LeetCode] 111. Minimum Depth of Binary Tree","date":"2018-07-04T14:20:12.000Z","_content":"\n## 题目\n\nGiven a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n**Note:** A leaf is a node with no children.\n\n**Example:**\n\nGiven binary tree `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\nreturn its minimum depth = 2.\n\n<!--more-->\n\n\n\n## 解题报告\n\n### 思路\n\n反正就是，有叶子就往下找，没叶子就完事儿了嘛～\n\n\n\n### 方法一：递归\n\n在处理一颗树的时候递归往往是很容易想到的方法，对于每个节点只要检查左子树和右子树就可以了。但是这种方法其实要检查整颗树，多！不！划！算！啊！\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        elif not root.left:\n            return self.minDepth(root.right) + 1\n        elif not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n```\n\n\n\n### 方法二：递推\n\n按从上往下的顺序往列表里加节点，一旦节点没有叶子了，就可以直接返回了！\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        check = [(root, 1)]\n        while check:\n            node, depth = check.pop(0)\n            if not node.left and not node.right:\n                break\n            if node.left:\n                check.append((node.left, depth+1))\n            if node.right:\n                check.append((node.right, depth+1))\n                \n        return depth\n```\n\n\n\n## 结语\n\n虽然很简单，但是越简单的题目越是能看出基础的好坏，而且也更容易往外拓展出更多题呢 (〃∀〃) ","source":"_posts/leetcode-111.md","raw":"---\ntitle: '[LeetCode] 111. Minimum Depth of Binary Tree'\ndate: 2018-07-04 22:20:12\ncategory: 解题报告\ntags: \n- 解题报告\n- LeetCode\n- Python\n- 树\n- 递归\n---\n\n## 题目\n\nGiven a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n**Note:** A leaf is a node with no children.\n\n**Example:**\n\nGiven binary tree `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\nreturn its minimum depth = 2.\n\n<!--more-->\n\n\n\n## 解题报告\n\n### 思路\n\n反正就是，有叶子就往下找，没叶子就完事儿了嘛～\n\n\n\n### 方法一：递归\n\n在处理一颗树的时候递归往往是很容易想到的方法，对于每个节点只要检查左子树和右子树就可以了。但是这种方法其实要检查整颗树，多！不！划！算！啊！\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        elif not root.left:\n            return self.minDepth(root.right) + 1\n        elif not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n```\n\n\n\n### 方法二：递推\n\n按从上往下的顺序往列表里加节点，一旦节点没有叶子了，就可以直接返回了！\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        check = [(root, 1)]\n        while check:\n            node, depth = check.pop(0)\n            if not node.left and not node.right:\n                break\n            if node.left:\n                check.append((node.left, depth+1))\n            if node.right:\n                check.append((node.right, depth+1))\n                \n        return depth\n```\n\n\n\n## 结语\n\n虽然很简单，但是越简单的题目越是能看出基础的好坏，而且也更容易往外拓展出更多题呢 (〃∀〃) ","slug":"leetcode-111","published":1,"updated":"2018-07-05T14:32:40.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi47000axtd33t24dsgu","content":"<h2 id=\"&#x9898;&#x76EE;\">&#x9898;&#x76EE;</h2>\n<p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<p><strong>Note:</strong> A leaf is a node with no children.</p>\n<p><strong>Example:</strong></p>\n<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>return its minimum depth = 2.</p>\n<a id=\"more\"></a>\n<h2 id=\"&#x89E3;&#x9898;&#x62A5;&#x544A;\">&#x89E3;&#x9898;&#x62A5;&#x544A;</h2>\n<h3 id=\"&#x601D;&#x8DEF;\">&#x601D;&#x8DEF;</h3>\n<p>&#x53CD;&#x6B63;&#x5C31;&#x662F;&#xFF0C;&#x6709;&#x53F6;&#x5B50;&#x5C31;&#x5F80;&#x4E0B;&#x627E;&#xFF0C;&#x6CA1;&#x53F6;&#x5B50;&#x5C31;&#x5B8C;&#x4E8B;&#x513F;&#x4E86;&#x561B;&#xFF5E;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E00;&#x9012;&#x5F52;\">&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;&#x9012;&#x5F52;</h3>\n<p>&#x5728;&#x5904;&#x7406;&#x4E00;&#x9897;&#x6811;&#x7684;&#x65F6;&#x5019;&#x9012;&#x5F52;&#x5F80;&#x5F80;&#x662F;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x53EA;&#x8981;&#x68C0;&#x67E5;&#x5DE6;&#x5B50;&#x6811;&#x548C;&#x53F3;&#x5B50;&#x6811;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5176;&#x5B9E;&#x8981;&#x68C0;&#x67E5;&#x6574;&#x9897;&#x6811;&#xFF0C;&#x591A;&#xFF01;&#x4E0D;&#xFF01;&#x5212;&#xFF01;&#x7B97;&#xFF01;&#x554A;&#xFF01;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.left:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.minDepth(root.right) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.minDepth(root.left) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(self.minDepth(root.left), self.minDepth(root.right)) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E8C;&#x9012;&#x63A8;\">&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;&#x9012;&#x63A8;</h3>\n<p>&#x6309;&#x4ECE;&#x4E0A;&#x5F80;&#x4E0B;&#x7684;&#x987A;&#x5E8F;&#x5F80;&#x5217;&#x8868;&#x91CC;&#x52A0;&#x8282;&#x70B9;&#xFF0C;&#x4E00;&#x65E6;&#x8282;&#x70B9;&#x6CA1;&#x6709;&#x53F6;&#x5B50;&#x4E86;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x4E86;&#xFF01;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        check = [(root, <span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> check:</span><br><span class=\"line\">            node, depth = check.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> node.right:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                check.append((node.left, depth+<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                check.append((node.right, depth+<span class=\"number\">1</span>))</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x7ED3;&#x8BED;\">&#x7ED3;&#x8BED;</h2>\n<p>&#x867D;&#x7136;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x662F;&#x8D8A;&#x7B80;&#x5355;&#x7684;&#x9898;&#x76EE;&#x8D8A;&#x662F;&#x80FD;&#x770B;&#x51FA;&#x57FA;&#x7840;&#x7684;&#x597D;&#x574F;&#xFF0C;&#x800C;&#x4E14;&#x4E5F;&#x66F4;&#x5BB9;&#x6613;&#x5F80;&#x5916;&#x62D3;&#x5C55;&#x51FA;&#x66F4;&#x591A;&#x9898;&#x5462; (&#x3003;&#x2200;&#x3003;)</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\">题目</h2>\n<p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<p><strong>Note:</strong> A leaf is a node with no children.</p>\n<p><strong>Example:</strong></p>\n<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>return its minimum depth = 2.</p>","more":"<h2 id=\"解题报告\">解题报告</h2>\n<h3 id=\"思路\">思路</h3>\n<p>反正就是，有叶子就往下找，没叶子就完事儿了嘛～</p>\n<h3 id=\"方法一递归\">方法一：递归</h3>\n<p>在处理一颗树的时候递归往往是很容易想到的方法，对于每个节点只要检查左子树和右子树就可以了。但是这种方法其实要检查整颗树，多！不！划！算！啊！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.left:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.minDepth(root.right) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.minDepth(root.left) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(self.minDepth(root.left), self.minDepth(root.right)) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二递推\">方法二：递推</h3>\n<p>按从上往下的顺序往列表里加节点，一旦节点没有叶子了，就可以直接返回了！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        check = [(root, <span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> check:</span><br><span class=\"line\">            node, depth = check.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> node.right:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                check.append((node.left, depth+<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                check.append((node.right, depth+<span class=\"number\">1</span>))</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>虽然很简单，但是越简单的题目越是能看出基础的好坏，而且也更容易往外拓展出更多题呢 (〃∀〃)</p>"},{"title":"[LeetCode] 189. Rotate Array","date":"2018-07-01T16:00:00.000Z","_content":"\n## 题目\n\n[LeetCode链接](https://leetcode.com/problems/rotate-array/description/)\n\nGiven an array, rotate the array to the right by *k* steps, where *k* is non-negative.\n\n**Example 1:**\n\n```\nInput: [1,2,3,4,5,6,7] and k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n```\n\n<!--more-->\n\n**Example 2:**\n\n```\nInput: [-1,-100,3,99] and k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n```\n\n**Note:**\n\n- Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\n\n- Could you do it in-place with O(1) extra space?\n\n  \n\n## 解题报告\n\n### 思路\n\n这是一道原题相对简单的模拟题。要写出一个简单能够通过而不超时的方法并不难，只要利用至多k元素的空间，就可以完成数组的拆解和重新拼接。\n\n难点在思考题中的 **O(1) extra space** 部分。这说明我们只能使用常数个临时元素，而这个常数不能随数组长度或事 k 的大小而变化。因此，我们使用 k 个元素的临时数组完成交换的想法是无法实现的。因此解法涉及到一些想法和数论知识。\n\n\n\n### 方法一：暴力拆解\n\n暴力拆解的解法就不多说了，就是将数组拆为两个部分再拼接，只需要计算好拆解的位置即可：\n\n```python\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        k = k % len(nums)\n        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]\n        # 或是利用 Python 负数 index 的特性：nums[:] = nums[-k:] + nums[:-k] \n```\n\n需要提示的是，虽然不进行第一步的取模操作也仍然能通过，我还是建议对 k 取模以保证解法的严谨性，因为题目中从未保证 k 是一个小于 n 的数字。\n\n另外数组的更新需要使用 `nums[:]` 而非`nums`，原因是`nums`在函数中被重新赋值会被视作是本地变量，而非传入的参数（很复杂，需要研究 Python 原理了……）。\n\n#### 复杂度\n\n该算法的时间复杂度可以视作 O(1)，但数组的拆解利用了额外 O(n) 的空间。\n\n\n\n### 方法二：循环更新 \n\n循环更新的方法更多的思考，但是也是为数不多时间复杂度够好也仅用 O(1) 空间复杂度的方法。\n\n如果只给一个临时变量的话，很多人的第一想法一定是一位一位移、循环 k 次，就可以得到结果数组，但这种往往太过复杂；而第二想法就会是，把 0 位的数移到 k 位，再把 k 位的移到 2k 位，以此类推……\n\n但是我们如何保证这种做法遍历一次数组呢？不如想想跳跃多少个 k 次可以回到原点点吧。为了简化问题，我们就从 0 开始跳跃，跳回到 0 点的条件便是所在位置是 n 的倍数。我们把 k 和 n = len(nums) 的关系简单分成三种：\n\n1. n 是 k 的倍数时：一共需要 $\\frac{n}{k}$ 次到达越界的 n 次，从而重新回到 0 点。\n2. n 和 k 互质时：由于互质，在 $k \\times n$ 前，k 的倍数无法成为 n 的倍数，因此一共需要 $n$ 次才能达到 n 的倍数，从而重新回到 0 点。\n3. 当 n 和 k 既不互素也不是倍数的时候：一共需要$\\frac{最小公倍数}{k}$次跳跃，就能回到 0 点了。\n\n当这样理下来之后，我们就会发现三种情况完全就是一模一样的：不论 k 和 n 是什么关系，循环一次所需的跳跃步数一共是 k 和 n 的**最小公倍数除以 k **次。由于每一个数字在交换一次时就会处于自己应该在的地方，所以总共需要的交换的次数是 n 次，因此一共需要 $\\frac{n\\times k}{最小公倍数}=最大公约数$次循环。\n\n那么这最大公约数次的循环如果从 0 开始，第二个数字要怎么选呢？反过来想，如果我们选的下一个数字就是 1 会怎样呢？我们看看 0 的下一个数字 1 有什么看法。假如说 0 和 1 在一个循环中同时被更新了，那说明什么呢？简单来说，因为每 k 数会被更新一次，因此，$(0 + k \\times a) \\mod n = 1$ ，进行化简后我们发现$k\\times a - n\\times b = 1$。对啦！这正是大名鼎鼎的拓展欧几里得公式，而等式右边的 1 说明了 k 和 n 是互质的两个数（如果有兴趣的话，你也可以证明 1 之后可以选 2，2 之后可以选 3……）。也就是说，在除了互质的情况下，如果我们的循环结束了，选择开始数字的下一个准没错。你问互质的情况怎么办？看看上面的推论，如果 k 和 n 互质的话，再回到 0 点的时候一圈数字就都更新完了。\n\n当我们证明了这一切之后，写代码就变得容易了起来：\n\n```python\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        k = k % len(nums)\n        count = 0\n        for start in range(len(nums)):\n            if count == len(nums):\n                break\n            temp = nums[start]\n            curr = (start + k) % len(nums) \n            while curr != start:\n                nums[curr], temp = temp, nums[curr]\n                curr = (curr + k) % len(nums)\n                count += 1\n            nums[curr] = temp\n            count += 1    \n```\n\n#### 复杂度\n\n由于每个数字只被更新一次，时间复杂度为 O(n)；由于只用了常数个临时变量（count, start, curr, temp），空间复杂度为 O(1)\n\n\n\n## 结语\n\n时间换空间的算法深入人心，在结题报告中，我列举了两种算法，其中一种用时应当更短，但占用更多空间；而另一种用时稍长，但几乎不需要额外空间。除了记住这一题的解法，我觉得更重要的是掌握时间和空间的魔法吧╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ","source":"_posts/leetcode-189.md","raw":"---\ntitle: '[LeetCode] 189. Rotate Array'\ndate: 2018-07-02\ncategory: 解题报告\ntags: \n- 解题报告\n- LeetCode\n- Python\n- 数组\n- 模拟\n- 数论\n---\n\n## 题目\n\n[LeetCode链接](https://leetcode.com/problems/rotate-array/description/)\n\nGiven an array, rotate the array to the right by *k* steps, where *k* is non-negative.\n\n**Example 1:**\n\n```\nInput: [1,2,3,4,5,6,7] and k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n```\n\n<!--more-->\n\n**Example 2:**\n\n```\nInput: [-1,-100,3,99] and k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n```\n\n**Note:**\n\n- Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\n\n- Could you do it in-place with O(1) extra space?\n\n  \n\n## 解题报告\n\n### 思路\n\n这是一道原题相对简单的模拟题。要写出一个简单能够通过而不超时的方法并不难，只要利用至多k元素的空间，就可以完成数组的拆解和重新拼接。\n\n难点在思考题中的 **O(1) extra space** 部分。这说明我们只能使用常数个临时元素，而这个常数不能随数组长度或事 k 的大小而变化。因此，我们使用 k 个元素的临时数组完成交换的想法是无法实现的。因此解法涉及到一些想法和数论知识。\n\n\n\n### 方法一：暴力拆解\n\n暴力拆解的解法就不多说了，就是将数组拆为两个部分再拼接，只需要计算好拆解的位置即可：\n\n```python\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        k = k % len(nums)\n        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]\n        # 或是利用 Python 负数 index 的特性：nums[:] = nums[-k:] + nums[:-k] \n```\n\n需要提示的是，虽然不进行第一步的取模操作也仍然能通过，我还是建议对 k 取模以保证解法的严谨性，因为题目中从未保证 k 是一个小于 n 的数字。\n\n另外数组的更新需要使用 `nums[:]` 而非`nums`，原因是`nums`在函数中被重新赋值会被视作是本地变量，而非传入的参数（很复杂，需要研究 Python 原理了……）。\n\n#### 复杂度\n\n该算法的时间复杂度可以视作 O(1)，但数组的拆解利用了额外 O(n) 的空间。\n\n\n\n### 方法二：循环更新 \n\n循环更新的方法更多的思考，但是也是为数不多时间复杂度够好也仅用 O(1) 空间复杂度的方法。\n\n如果只给一个临时变量的话，很多人的第一想法一定是一位一位移、循环 k 次，就可以得到结果数组，但这种往往太过复杂；而第二想法就会是，把 0 位的数移到 k 位，再把 k 位的移到 2k 位，以此类推……\n\n但是我们如何保证这种做法遍历一次数组呢？不如想想跳跃多少个 k 次可以回到原点点吧。为了简化问题，我们就从 0 开始跳跃，跳回到 0 点的条件便是所在位置是 n 的倍数。我们把 k 和 n = len(nums) 的关系简单分成三种：\n\n1. n 是 k 的倍数时：一共需要 $\\frac{n}{k}$ 次到达越界的 n 次，从而重新回到 0 点。\n2. n 和 k 互质时：由于互质，在 $k \\times n$ 前，k 的倍数无法成为 n 的倍数，因此一共需要 $n$ 次才能达到 n 的倍数，从而重新回到 0 点。\n3. 当 n 和 k 既不互素也不是倍数的时候：一共需要$\\frac{最小公倍数}{k}$次跳跃，就能回到 0 点了。\n\n当这样理下来之后，我们就会发现三种情况完全就是一模一样的：不论 k 和 n 是什么关系，循环一次所需的跳跃步数一共是 k 和 n 的**最小公倍数除以 k **次。由于每一个数字在交换一次时就会处于自己应该在的地方，所以总共需要的交换的次数是 n 次，因此一共需要 $\\frac{n\\times k}{最小公倍数}=最大公约数$次循环。\n\n那么这最大公约数次的循环如果从 0 开始，第二个数字要怎么选呢？反过来想，如果我们选的下一个数字就是 1 会怎样呢？我们看看 0 的下一个数字 1 有什么看法。假如说 0 和 1 在一个循环中同时被更新了，那说明什么呢？简单来说，因为每 k 数会被更新一次，因此，$(0 + k \\times a) \\mod n = 1$ ，进行化简后我们发现$k\\times a - n\\times b = 1$。对啦！这正是大名鼎鼎的拓展欧几里得公式，而等式右边的 1 说明了 k 和 n 是互质的两个数（如果有兴趣的话，你也可以证明 1 之后可以选 2，2 之后可以选 3……）。也就是说，在除了互质的情况下，如果我们的循环结束了，选择开始数字的下一个准没错。你问互质的情况怎么办？看看上面的推论，如果 k 和 n 互质的话，再回到 0 点的时候一圈数字就都更新完了。\n\n当我们证明了这一切之后，写代码就变得容易了起来：\n\n```python\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        k = k % len(nums)\n        count = 0\n        for start in range(len(nums)):\n            if count == len(nums):\n                break\n            temp = nums[start]\n            curr = (start + k) % len(nums) \n            while curr != start:\n                nums[curr], temp = temp, nums[curr]\n                curr = (curr + k) % len(nums)\n                count += 1\n            nums[curr] = temp\n            count += 1    \n```\n\n#### 复杂度\n\n由于每个数字只被更新一次，时间复杂度为 O(n)；由于只用了常数个临时变量（count, start, curr, temp），空间复杂度为 O(1)\n\n\n\n## 结语\n\n时间换空间的算法深入人心，在结题报告中，我列举了两种算法，其中一种用时应当更短，但占用更多空间；而另一种用时稍长，但几乎不需要额外空间。除了记住这一题的解法，我觉得更重要的是掌握时间和空间的魔法吧╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ","slug":"leetcode-189","published":1,"updated":"2018-07-03T15:14:49.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi49000bxtd3uslqj1x1","content":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-beta/dist/katex.min.css\" integrity=\"sha384-9tPv11A+glH/on/wEu99NVwDPwkMQESOocs/ZGXPoIiLE8MU/qkqUcZ3zzL+6DuH\" crossorigin=\"anonymous\"><h2 id=\"&#x9898;&#x76EE;\">&#x9898;&#x76EE;</h2>\n<p><a href=\"https://leetcode.com/problems/rotate-array/description/\" target=\"_blank\" rel=\"noopener\">LeetCode&#x94FE;&#x63A5;</a></p>\n<p>Given an array, rotate the array to the right by <em>k</em> steps, where <em>k</em> is non-negative.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,2,3,4,5,6,7] and k = 3</span><br><span class=\"line\">Output: [5,6,7,1,2,3,4]</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class=\"line\">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class=\"line\">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [-1,-100,3,99] and k = 2</span><br><span class=\"line\">Output: [3,99,-1,-100]</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class=\"line\">rotate 2 steps to the right: [3,99,-1,-100]</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong></p>\n<ul>\n<li><p>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</p></li>\n<li><p>Could you do it in-place with O(1) extra space?</p></li>\n</ul>\n<h2 id=\"&#x89E3;&#x9898;&#x62A5;&#x544A;\">&#x89E3;&#x9898;&#x62A5;&#x544A;</h2>\n<h3 id=\"&#x601D;&#x8DEF;\">&#x601D;&#x8DEF;</h3>\n<p>&#x8FD9;&#x662F;&#x4E00;&#x9053;&#x539F;&#x9898;&#x76F8;&#x5BF9;&#x7B80;&#x5355;&#x7684;&#x6A21;&#x62DF;&#x9898;&#x3002;&#x8981;&#x5199;&#x51FA;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x80FD;&#x591F;&#x901A;&#x8FC7;&#x800C;&#x4E0D;&#x8D85;&#x65F6;&#x7684;&#x65B9;&#x6CD5;&#x5E76;&#x4E0D;&#x96BE;&#xFF0C;&#x53EA;&#x8981;&#x5229;&#x7528;&#x81F3;&#x591A;k&#x5143;&#x7D20;&#x7684;&#x7A7A;&#x95F4;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5B8C;&#x6210;&#x6570;&#x7EC4;&#x7684;&#x62C6;&#x89E3;&#x548C;&#x91CD;&#x65B0;&#x62FC;&#x63A5;&#x3002;</p>\n<p>&#x96BE;&#x70B9;&#x5728;&#x601D;&#x8003;&#x9898;&#x4E2D;&#x7684; <strong>O(1) extra space</strong> &#x90E8;&#x5206;&#x3002;&#x8FD9;&#x8BF4;&#x660E;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x4F7F;&#x7528;&#x5E38;&#x6570;&#x4E2A;&#x4E34;&#x65F6;&#x5143;&#x7D20;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x5E38;&#x6570;&#x4E0D;&#x80FD;&#x968F;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x6216;&#x4E8B; k &#x7684;&#x5927;&#x5C0F;&#x800C;&#x53D8;&#x5316;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528; k &#x4E2A;&#x5143;&#x7D20;&#x7684;&#x4E34;&#x65F6;&#x6570;&#x7EC4;&#x5B8C;&#x6210;&#x4EA4;&#x6362;&#x7684;&#x60F3;&#x6CD5;&#x662F;&#x65E0;&#x6CD5;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x56E0;&#x6B64;&#x89E3;&#x6CD5;&#x6D89;&#x53CA;&#x5230;&#x4E00;&#x4E9B;&#x60F3;&#x6CD5;&#x548C;&#x6570;&#x8BBA;&#x77E5;&#x8BC6;&#x3002;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E00;&#x66B4;&#x529B;&#x62C6;&#x89E3;\">&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;&#x66B4;&#x529B;&#x62C6;&#x89E3;</h3>\n<p>&#x66B4;&#x529B;&#x62C6;&#x89E3;&#x7684;&#x89E3;&#x6CD5;&#x5C31;&#x4E0D;&#x591A;&#x8BF4;&#x4E86;&#xFF0C;&#x5C31;&#x662F;&#x5C06;&#x6570;&#x7EC4;&#x62C6;&#x4E3A;&#x4E24;&#x4E2A;&#x90E8;&#x5206;&#x518D;&#x62FC;&#x63A5;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x597D;&#x62C6;&#x89E3;&#x7684;&#x4F4D;&#x7F6E;&#x5373;&#x53EF;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rotate</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        k = k % len(nums)</span><br><span class=\"line\">        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]</span><br><span class=\"line\">        <span class=\"comment\"># &#x6216;&#x662F;&#x5229;&#x7528; Python &#x8D1F;&#x6570; index &#x7684;&#x7279;&#x6027;&#xFF1A;nums[:] = nums[-k:] + nums[:-k]</span></span><br></pre></td></tr></table></figure>\n<p>&#x9700;&#x8981;&#x63D0;&#x793A;&#x7684;&#x662F;&#xFF0C;&#x867D;&#x7136;&#x4E0D;&#x8FDB;&#x884C;&#x7B2C;&#x4E00;&#x6B65;&#x7684;&#x53D6;&#x6A21;&#x64CD;&#x4F5C;&#x4E5F;&#x4ECD;&#x7136;&#x80FD;&#x901A;&#x8FC7;&#xFF0C;&#x6211;&#x8FD8;&#x662F;&#x5EFA;&#x8BAE;&#x5BF9; k &#x53D6;&#x6A21;&#x4EE5;&#x4FDD;&#x8BC1;&#x89E3;&#x6CD5;&#x7684;&#x4E25;&#x8C28;&#x6027;&#xFF0C;&#x56E0;&#x4E3A;&#x9898;&#x76EE;&#x4E2D;&#x4ECE;&#x672A;&#x4FDD;&#x8BC1; k &#x662F;&#x4E00;&#x4E2A;&#x5C0F;&#x4E8E; n &#x7684;&#x6570;&#x5B57;&#x3002;</p>\n<p>&#x53E6;&#x5916;&#x6570;&#x7EC4;&#x7684;&#x66F4;&#x65B0;&#x9700;&#x8981;&#x4F7F;&#x7528; <code>nums[:]</code> &#x800C;&#x975E;<code>nums</code>&#xFF0C;&#x539F;&#x56E0;&#x662F;<code>nums</code>&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x88AB;&#x91CD;&#x65B0;&#x8D4B;&#x503C;&#x4F1A;&#x88AB;&#x89C6;&#x4F5C;&#x662F;&#x672C;&#x5730;&#x53D8;&#x91CF;&#xFF0C;&#x800C;&#x975E;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#xFF08;&#x5F88;&#x590D;&#x6742;&#xFF0C;&#x9700;&#x8981;&#x7814;&#x7A76; Python &#x539F;&#x7406;&#x4E86;&#x2026;&#x2026;&#xFF09;&#x3002;</p>\n<h4 id=\"&#x590D;&#x6742;&#x5EA6;\">&#x590D;&#x6742;&#x5EA6;</h4>\n<p>&#x8BE5;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x53EF;&#x4EE5;&#x89C6;&#x4F5C; O(1)&#xFF0C;&#x4F46;&#x6570;&#x7EC4;&#x7684;&#x62C6;&#x89E3;&#x5229;&#x7528;&#x4E86;&#x989D;&#x5916; O(n) &#x7684;&#x7A7A;&#x95F4;&#x3002;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E8C;&#x5FAA;&#x73AF;&#x66F4;&#x65B0;\">&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;&#x5FAA;&#x73AF;&#x66F4;&#x65B0;</h3>\n<p>&#x5FAA;&#x73AF;&#x66F4;&#x65B0;&#x7684;&#x65B9;&#x6CD5;&#x66F4;&#x591A;&#x7684;&#x601D;&#x8003;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x662F;&#x4E3A;&#x6570;&#x4E0D;&#x591A;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x591F;&#x597D;&#x4E5F;&#x4EC5;&#x7528; O(1) &#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x65B9;&#x6CD5;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x53EA;&#x7ED9;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x53D8;&#x91CF;&#x7684;&#x8BDD;&#xFF0C;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x7B2C;&#x4E00;&#x60F3;&#x6CD5;&#x4E00;&#x5B9A;&#x662F;&#x4E00;&#x4F4D;&#x4E00;&#x4F4D;&#x79FB;&#x3001;&#x5FAA;&#x73AF; k &#x6B21;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7ED3;&#x679C;&#x6570;&#x7EC4;&#xFF0C;&#x4F46;&#x8FD9;&#x79CD;&#x5F80;&#x5F80;&#x592A;&#x8FC7;&#x590D;&#x6742;&#xFF1B;&#x800C;&#x7B2C;&#x4E8C;&#x60F3;&#x6CD5;&#x5C31;&#x4F1A;&#x662F;&#xFF0C;&#x628A; 0 &#x4F4D;&#x7684;&#x6570;&#x79FB;&#x5230; k &#x4F4D;&#xFF0C;&#x518D;&#x628A; k &#x4F4D;&#x7684;&#x79FB;&#x5230; 2k &#x4F4D;&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x2026;&#x2026;</p>\n<p>&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x4FDD;&#x8BC1;&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x904D;&#x5386;&#x4E00;&#x6B21;&#x6570;&#x7EC4;&#x5462;&#xFF1F;&#x4E0D;&#x5982;&#x60F3;&#x60F3;&#x8DF3;&#x8DC3;&#x591A;&#x5C11;&#x4E2A; k &#x6B21;&#x53EF;&#x4EE5;&#x56DE;&#x5230;&#x539F;&#x70B9;&#x70B9;&#x5427;&#x3002;&#x4E3A;&#x4E86;&#x7B80;&#x5316;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x4ECE; 0 &#x5F00;&#x59CB;&#x8DF3;&#x8DC3;&#xFF0C;&#x8DF3;&#x56DE;&#x5230; 0 &#x70B9;&#x7684;&#x6761;&#x4EF6;&#x4FBF;&#x662F;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x662F; n &#x7684;&#x500D;&#x6570;&#x3002;&#x6211;&#x4EEC;&#x628A; k &#x548C; n = len(nums) &#x7684;&#x5173;&#x7CFB;&#x7B80;&#x5355;&#x5206;&#x6210;&#x4E09;&#x79CD;&#xFF1A;</p>\n<ol type=\"1\">\n<li>n &#x662F; k &#x7684;&#x500D;&#x6570;&#x65F6;&#xFF1A;&#x4E00;&#x5171;&#x9700;&#x8981; <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mi>n</mi><mi>k</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span><span class=\"vlist-s\">&#x200B;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> &#x6B21;&#x5230;&#x8FBE;&#x8D8A;&#x754C;&#x7684; n &#x6B21;&#xFF0C;&#x4ECE;&#x800C;&#x91CD;&#x65B0;&#x56DE;&#x5230; 0 &#x70B9;&#x3002;</li>\n<li>n &#x548C; k &#x4E92;&#x8D28;&#x65F6;&#xFF1A;&#x7531;&#x4E8E;&#x4E92;&#x8D28;&#xFF0C;&#x5728; <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>&#xD7;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">k \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">&#xD7;</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathit\">n</span></span></span></span> &#x524D;&#xFF0C;k &#x7684;&#x500D;&#x6570;&#x65E0;&#x6CD5;&#x6210;&#x4E3A; n &#x7684;&#x500D;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x4E00;&#x5171;&#x9700;&#x8981; <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathit\">n</span></span></span></span> &#x6B21;&#x624D;&#x80FD;&#x8FBE;&#x5230; n &#x7684;&#x500D;&#x6570;&#xFF0C;&#x4ECE;&#x800C;&#x91CD;&#x65B0;&#x56DE;&#x5230; 0 &#x70B9;&#x3002;</li>\n<li>&#x5F53; n &#x548C; k &#x65E2;&#x4E0D;&#x4E92;&#x7D20;&#x4E5F;&#x4E0D;&#x662F;&#x500D;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF1A;&#x4E00;&#x5171;&#x9700;&#x8981;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">&#x6700;</mi><mi mathvariant=\"normal\">&#x5C0F;</mi><mi mathvariant=\"normal\">&#x516C;</mi><mi mathvariant=\"normal\">&#x500D;</mi><mi mathvariant=\"normal\">&#x6570;</mi></mrow><mi>k</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{&#x6700;&#x5C0F;&#x516C;&#x500D;&#x6570;}{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.739em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.394em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">&#x6700;</span><span class=\"mord cjk_fallback mtight\">&#x5C0F;</span><span class=\"mord cjk_fallback mtight\">&#x516C;</span><span class=\"mord cjk_fallback mtight\">&#x500D;</span><span class=\"mord cjk_fallback mtight\">&#x6570;</span></span></span></span></span><span class=\"vlist-s\">&#x200B;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>&#x6B21;&#x8DF3;&#x8DC3;&#xFF0C;&#x5C31;&#x80FD;&#x56DE;&#x5230; 0 &#x70B9;&#x4E86;&#x3002;</li>\n</ol>\n<p>&#x5F53;&#x8FD9;&#x6837;&#x7406;&#x4E0B;&#x6765;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x4F1A;&#x53D1;&#x73B0;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#x5B8C;&#x5168;&#x5C31;&#x662F;&#x4E00;&#x6A21;&#x4E00;&#x6837;&#x7684;&#xFF1A;&#x4E0D;&#x8BBA; k &#x548C; n &#x662F;&#x4EC0;&#x4E48;&#x5173;&#x7CFB;&#xFF0C;&#x5FAA;&#x73AF;&#x4E00;&#x6B21;&#x6240;&#x9700;&#x7684;&#x8DF3;&#x8DC3;&#x6B65;&#x6570;&#x4E00;&#x5171;&#x662F; k &#x548C; n &#x7684;<strong>&#x6700;&#x5C0F;&#x516C;&#x500D;&#x6570;&#x9664;&#x4EE5; k </strong>&#x6B21;&#x3002;&#x7531;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x5728;&#x4EA4;&#x6362;&#x4E00;&#x6B21;&#x65F6;&#x5C31;&#x4F1A;&#x5904;&#x4E8E;&#x81EA;&#x5DF1;&#x5E94;&#x8BE5;&#x5728;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x6240;&#x4EE5;&#x603B;&#x5171;&#x9700;&#x8981;&#x7684;&#x4EA4;&#x6362;&#x7684;&#x6B21;&#x6570;&#x662F; n &#x6B21;&#xFF0C;&#x56E0;&#x6B64;&#x4E00;&#x5171;&#x9700;&#x8981; <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>&#xD7;</mo><mi>k</mi></mrow><mrow><mi mathvariant=\"normal\">&#x6700;</mi><mi mathvariant=\"normal\">&#x5C0F;</mi><mi mathvariant=\"normal\">&#x516C;</mi><mi mathvariant=\"normal\">&#x500D;</mi><mi mathvariant=\"normal\">&#x6570;</mi></mrow></mfrac><mo>=</mo><mi mathvariant=\"normal\">&#x6700;</mi><mi mathvariant=\"normal\">&#x5927;</mi><mi mathvariant=\"normal\">&#x516C;</mi><mi mathvariant=\"normal\">&#x7EA6;</mi><mi mathvariant=\"normal\">&#x6570;</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{n\\times k}{&#x6700;&#x5C0F;&#x516C;&#x500D;&#x6570;}=&#x6700;&#x5927;&#x516C;&#x7EA6;&#x6570;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2251079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">&#x6700;</span><span class=\"mord cjk_fallback mtight\">&#x5C0F;</span><span class=\"mord cjk_fallback mtight\">&#x516C;</span><span class=\"mord cjk_fallback mtight\">&#x500D;</span><span class=\"mord cjk_fallback mtight\">&#x6570;</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">&#xD7;</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">&#x200B;</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">&#x6700;</span><span class=\"mord cjk_fallback\">&#x5927;</span><span class=\"mord cjk_fallback\">&#x516C;</span><span class=\"mord cjk_fallback\">&#x7EA6;</span><span class=\"mord cjk_fallback\">&#x6570;</span></span></span></span>&#x6B21;&#x5FAA;&#x73AF;&#x3002;</p>\n<p>&#x90A3;&#x4E48;&#x8FD9;&#x6700;&#x5927;&#x516C;&#x7EA6;&#x6570;&#x6B21;&#x7684;&#x5FAA;&#x73AF;&#x5982;&#x679C;&#x4ECE; 0 &#x5F00;&#x59CB;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x5B57;&#x8981;&#x600E;&#x4E48;&#x9009;&#x5462;&#xFF1F;&#x53CD;&#x8FC7;&#x6765;&#x60F3;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x9009;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x5C31;&#x662F; 1 &#x4F1A;&#x600E;&#x6837;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x770B;&#x770B; 0 &#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x5B57; 1 &#x6709;&#x4EC0;&#x4E48;&#x770B;&#x6CD5;&#x3002;&#x5047;&#x5982;&#x8BF4; 0 &#x548C; 1 &#x5728;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x4E2D;&#x540C;&#x65F6;&#x88AB;&#x66F4;&#x65B0;&#x4E86;&#xFF0C;&#x90A3;&#x8BF4;&#x660E;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF; k &#x6570;&#x4F1A;&#x88AB;&#x66F4;&#x65B0;&#x4E00;&#x6B21;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>0</mn><mo>+</mo><mi>k</mi><mo>&#xD7;</mo><mi>a</mi><mo>)</mo><mspace></mspace><mspace width=\"0.6666666666666666em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext>&#x2009;</mtext><mtext>&#x2009;</mtext><mi>n</mi><mo>=</mo><mn>1</mn></mspace></mrow><annotation encoding=\"application/x-tex\">(0 + k \\times a) \\mod n = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">&#xD7;</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> &#xFF0C;&#x8FDB;&#x884C;&#x5316;&#x7B80;&#x540E;&#x6211;&#x4EEC;&#x53D1;&#x73B0;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>&#xD7;</mo><mi>a</mi><mo>&#x2212;</mo><mi>n</mi><mo>&#xD7;</mo><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k\\times a - n\\times b = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">&#xD7;</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">&#x2212;</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathit\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">&#xD7;</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathit\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>&#x3002;&#x5BF9;&#x5566;&#xFF01;&#x8FD9;&#x6B63;&#x662F;&#x5927;&#x540D;&#x9F0E;&#x9F0E;&#x7684;&#x62D3;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x516C;&#x5F0F;&#xFF0C;&#x800C;&#x7B49;&#x5F0F;&#x53F3;&#x8FB9;&#x7684; 1 &#x8BF4;&#x660E;&#x4E86; k &#x548C; n &#x662F;&#x4E92;&#x8D28;&#x7684;&#x4E24;&#x4E2A;&#x6570;&#xFF08;&#x5982;&#x679C;&#x6709;&#x5174;&#x8DA3;&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x8BC1;&#x660E; 1 &#x4E4B;&#x540E;&#x53EF;&#x4EE5;&#x9009; 2&#xFF0C;2 &#x4E4B;&#x540E;&#x53EF;&#x4EE5;&#x9009; 3&#x2026;&#x2026;&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5728;&#x9664;&#x4E86;&#x4E92;&#x8D28;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7684;&#x5FAA;&#x73AF;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x9009;&#x62E9;&#x5F00;&#x59CB;&#x6570;&#x5B57;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x51C6;&#x6CA1;&#x9519;&#x3002;&#x4F60;&#x95EE;&#x4E92;&#x8D28;&#x7684;&#x60C5;&#x51B5;&#x600E;&#x4E48;&#x529E;&#xFF1F;&#x770B;&#x770B;&#x4E0A;&#x9762;&#x7684;&#x63A8;&#x8BBA;&#xFF0C;&#x5982;&#x679C; k &#x548C; n &#x4E92;&#x8D28;&#x7684;&#x8BDD;&#xFF0C;&#x518D;&#x56DE;&#x5230; 0 &#x70B9;&#x7684;&#x65F6;&#x5019;&#x4E00;&#x5708;&#x6570;&#x5B57;&#x5C31;&#x90FD;&#x66F4;&#x65B0;&#x5B8C;&#x4E86;&#x3002;</p>\n<p>&#x5F53;&#x6211;&#x4EEC;&#x8BC1;&#x660E;&#x4E86;&#x8FD9;&#x4E00;&#x5207;&#x4E4B;&#x540E;&#xFF0C;&#x5199;&#x4EE3;&#x7801;&#x5C31;&#x53D8;&#x5F97;&#x5BB9;&#x6613;&#x4E86;&#x8D77;&#x6765;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rotate</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        k = k % len(nums)</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> start <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> count == len(nums):</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            temp = nums[start]</span><br><span class=\"line\">            curr = (start + k) % len(nums) </span><br><span class=\"line\">            <span class=\"keyword\">while</span> curr != start:</span><br><span class=\"line\">                nums[curr], temp = temp, nums[curr]</span><br><span class=\"line\">                curr = (curr + k) % len(nums)</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            nums[curr] = temp</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"&#x590D;&#x6742;&#x5EA6;-1\">&#x590D;&#x6742;&#x5EA6;</h4>\n<p>&#x7531;&#x4E8E;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x53EA;&#x88AB;&#x66F4;&#x65B0;&#x4E00;&#x6B21;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(n)&#xFF1B;&#x7531;&#x4E8E;&#x53EA;&#x7528;&#x4E86;&#x5E38;&#x6570;&#x4E2A;&#x4E34;&#x65F6;&#x53D8;&#x91CF;&#xFF08;count, start, curr, temp&#xFF09;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; O(1)</p>\n<h2 id=\"&#x7ED3;&#x8BED;\">&#x7ED3;&#x8BED;</h2>\n<p>&#x65F6;&#x95F4;&#x6362;&#x7A7A;&#x95F4;&#x7684;&#x7B97;&#x6CD5;&#x6DF1;&#x5165;&#x4EBA;&#x5FC3;&#xFF0C;&#x5728;&#x7ED3;&#x9898;&#x62A5;&#x544A;&#x4E2D;&#xFF0C;&#x6211;&#x5217;&#x4E3E;&#x4E86;&#x4E24;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x5176;&#x4E2D;&#x4E00;&#x79CD;&#x7528;&#x65F6;&#x5E94;&#x5F53;&#x66F4;&#x77ED;&#xFF0C;&#x4F46;&#x5360;&#x7528;&#x66F4;&#x591A;&#x7A7A;&#x95F4;&#xFF1B;&#x800C;&#x53E6;&#x4E00;&#x79CD;&#x7528;&#x65F6;&#x7A0D;&#x957F;&#xFF0C;&#x4F46;&#x51E0;&#x4E4E;&#x4E0D;&#x9700;&#x8981;&#x989D;&#x5916;&#x7A7A;&#x95F4;&#x3002;&#x9664;&#x4E86;&#x8BB0;&#x4F4F;&#x8FD9;&#x4E00;&#x9898;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x66F4;&#x91CD;&#x8981;&#x7684;&#x662F;&#x638C;&#x63E1;&#x65F6;&#x95F4;&#x548C;&#x7A7A;&#x95F4;&#x7684;&#x9B54;&#x6CD5;&#x5427;&#x2570;( &#x361;&#xB0; &#x35C;&#x296; &#x361;&#xB0; )&#x3064;&#x2500;&#x2500;&#x2606;*:&#x30FB;&#xFF9F;</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\">题目</h2>\n<p><a href=\"https://leetcode.com/problems/rotate-array/description/\" target=\"_blank\" rel=\"noopener\">LeetCode链接</a></p>\n<p>Given an array, rotate the array to the right by <em>k</em> steps, where <em>k</em> is non-negative.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,2,3,4,5,6,7] and k = 3</span><br><span class=\"line\">Output: [5,6,7,1,2,3,4]</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class=\"line\">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class=\"line\">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>","more":"<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [-1,-100,3,99] and k = 2</span><br><span class=\"line\">Output: [3,99,-1,-100]</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class=\"line\">rotate 2 steps to the right: [3,99,-1,-100]</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong></p>\n<ul>\n<li><p>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</p></li>\n<li><p>Could you do it in-place with O(1) extra space?</p></li>\n</ul>\n<h2 id=\"解题报告\">解题报告</h2>\n<h3 id=\"思路\">思路</h3>\n<p>这是一道原题相对简单的模拟题。要写出一个简单能够通过而不超时的方法并不难，只要利用至多k元素的空间，就可以完成数组的拆解和重新拼接。</p>\n<p>难点在思考题中的 <strong>O(1) extra space</strong> 部分。这说明我们只能使用常数个临时元素，而这个常数不能随数组长度或事 k 的大小而变化。因此，我们使用 k 个元素的临时数组完成交换的想法是无法实现的。因此解法涉及到一些想法和数论知识。</p>\n<h3 id=\"方法一暴力拆解\">方法一：暴力拆解</h3>\n<p>暴力拆解的解法就不多说了，就是将数组拆为两个部分再拼接，只需要计算好拆解的位置即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rotate</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        k = k % len(nums)</span><br><span class=\"line\">        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]</span><br><span class=\"line\">        <span class=\"comment\"># 或是利用 Python 负数 index 的特性：nums[:] = nums[-k:] + nums[:-k]</span></span><br></pre></td></tr></table></figure>\n<p>需要提示的是，虽然不进行第一步的取模操作也仍然能通过，我还是建议对 k 取模以保证解法的严谨性，因为题目中从未保证 k 是一个小于 n 的数字。</p>\n<p>另外数组的更新需要使用 <code>nums[:]</code> 而非<code>nums</code>，原因是<code>nums</code>在函数中被重新赋值会被视作是本地变量，而非传入的参数（很复杂，需要研究 Python 原理了……）。</p>\n<h4 id=\"复杂度\">复杂度</h4>\n<p>该算法的时间复杂度可以视作 O(1)，但数组的拆解利用了额外 O(n) 的空间。</p>\n<h3 id=\"方法二循环更新\">方法二：循环更新</h3>\n<p>循环更新的方法更多的思考，但是也是为数不多时间复杂度够好也仅用 O(1) 空间复杂度的方法。</p>\n<p>如果只给一个临时变量的话，很多人的第一想法一定是一位一位移、循环 k 次，就可以得到结果数组，但这种往往太过复杂；而第二想法就会是，把 0 位的数移到 k 位，再把 k 位的移到 2k 位，以此类推……</p>\n<p>但是我们如何保证这种做法遍历一次数组呢？不如想想跳跃多少个 k 次可以回到原点点吧。为了简化问题，我们就从 0 开始跳跃，跳回到 0 点的条件便是所在位置是 n 的倍数。我们把 k 和 n = len(nums) 的关系简单分成三种：</p>\n<ol type=\"1\">\n<li>n 是 k 的倍数时：一共需要 <span class=\"math inline\">\\(\\frac{n}{k}\\)</span> 次到达越界的 n 次，从而重新回到 0 点。</li>\n<li>n 和 k 互质时：由于互质，在 <span class=\"math inline\">\\(k \\times n\\)</span> 前，k 的倍数无法成为 n 的倍数，因此一共需要 <span class=\"math inline\">\\(n\\)</span> 次才能达到 n 的倍数，从而重新回到 0 点。</li>\n<li>当 n 和 k 既不互素也不是倍数的时候：一共需要<span class=\"math inline\">\\(\\frac{最小公倍数}{k}\\)</span>次跳跃，就能回到 0 点了。</li>\n</ol>\n<p>当这样理下来之后，我们就会发现三种情况完全就是一模一样的：不论 k 和 n 是什么关系，循环一次所需的跳跃步数一共是 k 和 n 的<strong>最小公倍数除以 k </strong>次。由于每一个数字在交换一次时就会处于自己应该在的地方，所以总共需要的交换的次数是 n 次，因此一共需要 <span class=\"math inline\">\\(\\frac{n\\times k}{最小公倍数}=最大公约数\\)</span>次循环。</p>\n<p>那么这最大公约数次的循环如果从 0 开始，第二个数字要怎么选呢？反过来想，如果我们选的下一个数字就是 1 会怎样呢？我们看看 0 的下一个数字 1 有什么看法。假如说 0 和 1 在一个循环中同时被更新了，那说明什么呢？简单来说，因为每 k 数会被更新一次，因此，<span class=\"math inline\">\\((0 + k \\times a) \\mod n = 1\\)</span> ，进行化简后我们发现<span class=\"math inline\">\\(k\\times a - n\\times b = 1\\)</span>。对啦！这正是大名鼎鼎的拓展欧几里得公式，而等式右边的 1 说明了 k 和 n 是互质的两个数（如果有兴趣的话，你也可以证明 1 之后可以选 2，2 之后可以选 3……）。也就是说，在除了互质的情况下，如果我们的循环结束了，选择开始数字的下一个准没错。你问互质的情况怎么办？看看上面的推论，如果 k 和 n 互质的话，再回到 0 点的时候一圈数字就都更新完了。</p>\n<p>当我们证明了这一切之后，写代码就变得容易了起来：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rotate</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        k = k % len(nums)</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> start <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> count == len(nums):</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            temp = nums[start]</span><br><span class=\"line\">            curr = (start + k) % len(nums) </span><br><span class=\"line\">            <span class=\"keyword\">while</span> curr != start:</span><br><span class=\"line\">                nums[curr], temp = temp, nums[curr]</span><br><span class=\"line\">                curr = (curr + k) % len(nums)</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            nums[curr] = temp</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂度-1\">复杂度</h4>\n<p>由于每个数字只被更新一次，时间复杂度为 O(n)；由于只用了常数个临时变量（count, start, curr, temp），空间复杂度为 O(1)</p>\n<h2 id=\"结语\">结语</h2>\n<p>时间换空间的算法深入人心，在结题报告中，我列举了两种算法，其中一种用时应当更短，但占用更多空间；而另一种用时稍长，但几乎不需要额外空间。除了记住这一题的解法，我觉得更重要的是掌握时间和空间的魔法吧╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ</p>"},{"title":"[LeetCode] 207. Course Schedule","date":"2018-07-04T13:42:26.000Z","_content":"\n## 题目\n\n[LeetCode 链接](https://leetcode.com/problems/course-schedule/description/)\n\nThere are a total of *n* courses you have to take, labeled from `0` to `n-1`.\n\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\nGiven the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n**Example 1:**\n\n```\nInput: 2, [[1,0]] \nOutput: true\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0. So it is possible.\n```\n\n<!--more-->\n\n**Example 2:**\n\n```\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n```\n\n**Note:**\n\n1. The input prerequisites is a graph represented by **a list of edges**, not adjacency matrices. Read more about [how a graph is represented](https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs).\n2. You may assume that there are no duplicate edges in the input prerequisites.\n\n\n\n## 解题报告\n\n### 思路\n\n简单来说这个问题因为要看课程之间的前置要求是否是互相冲突的。如果把每一节课看成一个点，前置关系看成边（有向），那么这个问题就是寻找一个有向图是否有环。如果有环的话，图中的课便没有办法同时完成。\n\n\n\n### 方法一：搜索\n\n搜索只要检查自己搜索过的部分是不是会再一次被搜索到就可以检查是否有环。\n\n搜索的具体实现有很多种。不论是使用 bfs 还是 dfs 或是引入 order 的概念都可以很快找到一个解法，这里就不赘述了。\n\n\n\n### 方法二：拓扑排序\n\n拓扑排序的想法很简单：如果有点只出不进，那说明这个点就是这一张图的起点。我们把这个点和由他出去的边删去，然后再检查是否有点只进不出的点，如此重复。如果一张图可以无限删除直到结束，说明这张图是可以拓扑排序的，因此没有环。（思考：为什么？）\n\n```python\nclass Solution:\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        in_degree = {}\n        out_degree = {} \n        for i in range(numCourses):\n            in_degree[i] = 0\n            out_degree[i] = []\n        for e in prerequisites:\n            in_degree[e[1]] = in_degree[e[1]] + 1\n            out_degree[e[0]].append(e[1])\n        \n        can_delete = []\n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                can_delete.append(i)\n                \n        while can_delete:\n            deleted = can_delete.pop()\n            in_degree[deleted] = -1\n            for course in out_degree[deleted]:\n                if in_degree[course] > -1:\n                    in_degree[course] = in_degree[course] - 1\n                    if in_degree[course] == 0:\n                        can_delete.append(course)\n                        \n        return (max(in_degree.values()) <= -1)\n\n```\n\n### 复杂度\n\n时间复杂度 O(n+e)，其中 n 为定点数，e 为边数：初始化 O(e), 删除的点 O(n), 删除边 O(e), 后处理 O(n)\n\n额外空间 O(n+e) ：入度数组 n，出度哈希表 e，待删除队列 n\n\n\n\n## 结语\n\n这题考了两个知识点，一是能不能把这个问题转换成图论问题（面试官可不会和 LeetCode 一样傻乎乎地提到这是图的一种表现方式），另一个就是检查图是否有环。我这里只提到了比较好理解的检查环的两种方式，其他方法也可以顺便复习一下哦～","source":"_posts/leetcode-207.md","raw":"---\ntitle: '[LeetCode] 207. Course Schedule'\ndate: 2018-07-04 21:42:26\ncategory: 解题报告\ntags: \n- 解题报告\n- LeetCode\n- Python\n- 图论\n---\n\n## 题目\n\n[LeetCode 链接](https://leetcode.com/problems/course-schedule/description/)\n\nThere are a total of *n* courses you have to take, labeled from `0` to `n-1`.\n\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\nGiven the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n**Example 1:**\n\n```\nInput: 2, [[1,0]] \nOutput: true\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0. So it is possible.\n```\n\n<!--more-->\n\n**Example 2:**\n\n```\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n```\n\n**Note:**\n\n1. The input prerequisites is a graph represented by **a list of edges**, not adjacency matrices. Read more about [how a graph is represented](https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs).\n2. You may assume that there are no duplicate edges in the input prerequisites.\n\n\n\n## 解题报告\n\n### 思路\n\n简单来说这个问题因为要看课程之间的前置要求是否是互相冲突的。如果把每一节课看成一个点，前置关系看成边（有向），那么这个问题就是寻找一个有向图是否有环。如果有环的话，图中的课便没有办法同时完成。\n\n\n\n### 方法一：搜索\n\n搜索只要检查自己搜索过的部分是不是会再一次被搜索到就可以检查是否有环。\n\n搜索的具体实现有很多种。不论是使用 bfs 还是 dfs 或是引入 order 的概念都可以很快找到一个解法，这里就不赘述了。\n\n\n\n### 方法二：拓扑排序\n\n拓扑排序的想法很简单：如果有点只出不进，那说明这个点就是这一张图的起点。我们把这个点和由他出去的边删去，然后再检查是否有点只进不出的点，如此重复。如果一张图可以无限删除直到结束，说明这张图是可以拓扑排序的，因此没有环。（思考：为什么？）\n\n```python\nclass Solution:\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        in_degree = {}\n        out_degree = {} \n        for i in range(numCourses):\n            in_degree[i] = 0\n            out_degree[i] = []\n        for e in prerequisites:\n            in_degree[e[1]] = in_degree[e[1]] + 1\n            out_degree[e[0]].append(e[1])\n        \n        can_delete = []\n        for i in range(numCourses):\n            if in_degree[i] == 0:\n                can_delete.append(i)\n                \n        while can_delete:\n            deleted = can_delete.pop()\n            in_degree[deleted] = -1\n            for course in out_degree[deleted]:\n                if in_degree[course] > -1:\n                    in_degree[course] = in_degree[course] - 1\n                    if in_degree[course] == 0:\n                        can_delete.append(course)\n                        \n        return (max(in_degree.values()) <= -1)\n\n```\n\n### 复杂度\n\n时间复杂度 O(n+e)，其中 n 为定点数，e 为边数：初始化 O(e), 删除的点 O(n), 删除边 O(e), 后处理 O(n)\n\n额外空间 O(n+e) ：入度数组 n，出度哈希表 e，待删除队列 n\n\n\n\n## 结语\n\n这题考了两个知识点，一是能不能把这个问题转换成图论问题（面试官可不会和 LeetCode 一样傻乎乎地提到这是图的一种表现方式），另一个就是检查图是否有环。我这里只提到了比较好理解的检查环的两种方式，其他方法也可以顺便复习一下哦～","slug":"leetcode-207","published":1,"updated":"2018-07-04T14:11:10.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4b000fxtd3xs11nz3l","content":"<h2 id=\"&#x9898;&#x76EE;\">&#x9898;&#x76EE;</h2>\n<p><a href=\"https://leetcode.com/problems/course-schedule/description/\" target=\"_blank\" rel=\"noopener\">LeetCode &#x94FE;&#x63A5;</a></p>\n<p>There are a total of <em>n</em> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 2, [[1,0]] </span><br><span class=\"line\">Output: true</span><br><span class=\"line\">Explanation: There are a total of 2 courses to take. </span><br><span class=\"line\">             To take course 1 you should have finished course 0. So it is possible.</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 2, [[1,0],[0,1]]</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: There are a total of 2 courses to take. </span><br><span class=\"line\">             To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong></p>\n<ol type=\"1\">\n<li>The input prerequisites is a graph represented by <strong>a list of edges</strong>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\" rel=\"noopener\">how a graph is represented</a>.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol>\n<h2 id=\"&#x89E3;&#x9898;&#x62A5;&#x544A;\">&#x89E3;&#x9898;&#x62A5;&#x544A;</h2>\n<h3 id=\"&#x601D;&#x8DEF;\">&#x601D;&#x8DEF;</h3>\n<p>&#x7B80;&#x5355;&#x6765;&#x8BF4;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x56E0;&#x4E3A;&#x8981;&#x770B;&#x8BFE;&#x7A0B;&#x4E4B;&#x95F4;&#x7684;&#x524D;&#x7F6E;&#x8981;&#x6C42;&#x662F;&#x5426;&#x662F;&#x4E92;&#x76F8;&#x51B2;&#x7A81;&#x7684;&#x3002;&#x5982;&#x679C;&#x628A;&#x6BCF;&#x4E00;&#x8282;&#x8BFE;&#x770B;&#x6210;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x524D;&#x7F6E;&#x5173;&#x7CFB;&#x770B;&#x6210;&#x8FB9;&#xFF08;&#x6709;&#x5411;&#xFF09;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x6709;&#x5411;&#x56FE;&#x662F;&#x5426;&#x6709;&#x73AF;&#x3002;&#x5982;&#x679C;&#x6709;&#x73AF;&#x7684;&#x8BDD;&#xFF0C;&#x56FE;&#x4E2D;&#x7684;&#x8BFE;&#x4FBF;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x540C;&#x65F6;&#x5B8C;&#x6210;&#x3002;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E00;&#x641C;&#x7D22;\">&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;&#x641C;&#x7D22;</h3>\n<p>&#x641C;&#x7D22;&#x53EA;&#x8981;&#x68C0;&#x67E5;&#x81EA;&#x5DF1;&#x641C;&#x7D22;&#x8FC7;&#x7684;&#x90E8;&#x5206;&#x662F;&#x4E0D;&#x662F;&#x4F1A;&#x518D;&#x4E00;&#x6B21;&#x88AB;&#x641C;&#x7D22;&#x5230;&#x5C31;&#x53EF;&#x4EE5;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x6709;&#x73AF;&#x3002;</p>\n<p>&#x641C;&#x7D22;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x6709;&#x5F88;&#x591A;&#x79CD;&#x3002;&#x4E0D;&#x8BBA;&#x662F;&#x4F7F;&#x7528; bfs &#x8FD8;&#x662F; dfs &#x6216;&#x662F;&#x5F15;&#x5165; order &#x7684;&#x6982;&#x5FF5;&#x90FD;&#x53EF;&#x4EE5;&#x5F88;&#x5FEB;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x89E3;&#x6CD5;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x8D58;&#x8FF0;&#x4E86;&#x3002;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E8C;&#x62D3;&#x6251;&#x6392;&#x5E8F;\">&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;&#x62D3;&#x6251;&#x6392;&#x5E8F;</h3>\n<p>&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x7684;&#x60F3;&#x6CD5;&#x5F88;&#x7B80;&#x5355;&#xFF1A;&#x5982;&#x679C;&#x6709;&#x70B9;&#x53EA;&#x51FA;&#x4E0D;&#x8FDB;&#xFF0C;&#x90A3;&#x8BF4;&#x660E;&#x8FD9;&#x4E2A;&#x70B9;&#x5C31;&#x662F;&#x8FD9;&#x4E00;&#x5F20;&#x56FE;&#x7684;&#x8D77;&#x70B9;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x8FD9;&#x4E2A;&#x70B9;&#x548C;&#x7531;&#x4ED6;&#x51FA;&#x53BB;&#x7684;&#x8FB9;&#x5220;&#x53BB;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x6709;&#x70B9;&#x53EA;&#x8FDB;&#x4E0D;&#x51FA;&#x7684;&#x70B9;&#xFF0C;&#x5982;&#x6B64;&#x91CD;&#x590D;&#x3002;&#x5982;&#x679C;&#x4E00;&#x5F20;&#x56FE;&#x53EF;&#x4EE5;&#x65E0;&#x9650;&#x5220;&#x9664;&#x76F4;&#x5230;&#x7ED3;&#x675F;&#xFF0C;&#x8BF4;&#x660E;&#x8FD9;&#x5F20;&#x56FE;&#x662F;&#x53EF;&#x4EE5;&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x6CA1;&#x6709;&#x73AF;&#x3002;&#xFF08;&#x601D;&#x8003;&#xFF1A;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#xFF09;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canFinish</span><span class=\"params\">(self, numCourses, prerequisites)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type numCourses: int</span></span><br><span class=\"line\"><span class=\"string\">        :type prerequisites: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        in_degree = {}</span><br><span class=\"line\">        out_degree = {} </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            in_degree[i] = <span class=\"number\">0</span></span><br><span class=\"line\">            out_degree[i] = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> prerequisites:</span><br><span class=\"line\">            in_degree[e[<span class=\"number\">1</span>]] = in_degree[e[<span class=\"number\">1</span>]] + <span class=\"number\">1</span></span><br><span class=\"line\">            out_degree[e[<span class=\"number\">0</span>]].append(e[<span class=\"number\">1</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        can_delete = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> in_degree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                can_delete.append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">while</span> can_delete:</span><br><span class=\"line\">            deleted = can_delete.pop()</span><br><span class=\"line\">            in_degree[deleted] = <span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> course <span class=\"keyword\">in</span> out_degree[deleted]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> in_degree[course] &gt; <span class=\"number\">-1</span>:</span><br><span class=\"line\">                    in_degree[course] = in_degree[course] - <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> in_degree[course] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        can_delete.append(course)</span><br><span class=\"line\">                        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (max(in_degree.values()) &lt;= <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"&#x590D;&#x6742;&#x5EA6;\">&#x590D;&#x6742;&#x5EA6;</h3>\n<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(n+e)&#xFF0C;&#x5176;&#x4E2D; n &#x4E3A;&#x5B9A;&#x70B9;&#x6570;&#xFF0C;e &#x4E3A;&#x8FB9;&#x6570;&#xFF1A;&#x521D;&#x59CB;&#x5316; O(e), &#x5220;&#x9664;&#x7684;&#x70B9; O(n), &#x5220;&#x9664;&#x8FB9; O(e), &#x540E;&#x5904;&#x7406; O(n)</p>\n<p>&#x989D;&#x5916;&#x7A7A;&#x95F4; O(n+e) &#xFF1A;&#x5165;&#x5EA6;&#x6570;&#x7EC4; n&#xFF0C;&#x51FA;&#x5EA6;&#x54C8;&#x5E0C;&#x8868; e&#xFF0C;&#x5F85;&#x5220;&#x9664;&#x961F;&#x5217; n</p>\n<h2 id=\"&#x7ED3;&#x8BED;\">&#x7ED3;&#x8BED;</h2>\n<p>&#x8FD9;&#x9898;&#x8003;&#x4E86;&#x4E24;&#x4E2A;&#x77E5;&#x8BC6;&#x70B9;&#xFF0C;&#x4E00;&#x662F;&#x80FD;&#x4E0D;&#x80FD;&#x628A;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x8F6C;&#x6362;&#x6210;&#x56FE;&#x8BBA;&#x95EE;&#x9898;&#xFF08;&#x9762;&#x8BD5;&#x5B98;&#x53EF;&#x4E0D;&#x4F1A;&#x548C; LeetCode &#x4E00;&#x6837;&#x50BB;&#x4E4E;&#x4E4E;&#x5730;&#x63D0;&#x5230;&#x8FD9;&#x662F;&#x56FE;&#x7684;&#x4E00;&#x79CD;&#x8868;&#x73B0;&#x65B9;&#x5F0F;&#xFF09;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x5C31;&#x662F;&#x68C0;&#x67E5;&#x56FE;&#x662F;&#x5426;&#x6709;&#x73AF;&#x3002;&#x6211;&#x8FD9;&#x91CC;&#x53EA;&#x63D0;&#x5230;&#x4E86;&#x6BD4;&#x8F83;&#x597D;&#x7406;&#x89E3;&#x7684;&#x68C0;&#x67E5;&#x73AF;&#x7684;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x4ED6;&#x65B9;&#x6CD5;&#x4E5F;&#x53EF;&#x4EE5;&#x987A;&#x4FBF;&#x590D;&#x4E60;&#x4E00;&#x4E0B;&#x54E6;&#xFF5E;</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\">题目</h2>\n<p><a href=\"https://leetcode.com/problems/course-schedule/description/\" target=\"_blank\" rel=\"noopener\">LeetCode 链接</a></p>\n<p>There are a total of <em>n</em> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 2, [[1,0]] </span><br><span class=\"line\">Output: true</span><br><span class=\"line\">Explanation: There are a total of 2 courses to take. </span><br><span class=\"line\">             To take course 1 you should have finished course 0. So it is possible.</span><br></pre></td></tr></table></figure>","more":"<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 2, [[1,0],[0,1]]</span><br><span class=\"line\">Output: false</span><br><span class=\"line\">Explanation: There are a total of 2 courses to take. </span><br><span class=\"line\">             To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong></p>\n<ol type=\"1\">\n<li>The input prerequisites is a graph represented by <strong>a list of edges</strong>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\" rel=\"noopener\">how a graph is represented</a>.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol>\n<h2 id=\"解题报告\">解题报告</h2>\n<h3 id=\"思路\">思路</h3>\n<p>简单来说这个问题因为要看课程之间的前置要求是否是互相冲突的。如果把每一节课看成一个点，前置关系看成边（有向），那么这个问题就是寻找一个有向图是否有环。如果有环的话，图中的课便没有办法同时完成。</p>\n<h3 id=\"方法一搜索\">方法一：搜索</h3>\n<p>搜索只要检查自己搜索过的部分是不是会再一次被搜索到就可以检查是否有环。</p>\n<p>搜索的具体实现有很多种。不论是使用 bfs 还是 dfs 或是引入 order 的概念都可以很快找到一个解法，这里就不赘述了。</p>\n<h3 id=\"方法二拓扑排序\">方法二：拓扑排序</h3>\n<p>拓扑排序的想法很简单：如果有点只出不进，那说明这个点就是这一张图的起点。我们把这个点和由他出去的边删去，然后再检查是否有点只进不出的点，如此重复。如果一张图可以无限删除直到结束，说明这张图是可以拓扑排序的，因此没有环。（思考：为什么？）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canFinish</span><span class=\"params\">(self, numCourses, prerequisites)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type numCourses: int</span></span><br><span class=\"line\"><span class=\"string\">        :type prerequisites: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        in_degree = &#123;&#125;</span><br><span class=\"line\">        out_degree = &#123;&#125; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            in_degree[i] = <span class=\"number\">0</span></span><br><span class=\"line\">            out_degree[i] = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> prerequisites:</span><br><span class=\"line\">            in_degree[e[<span class=\"number\">1</span>]] = in_degree[e[<span class=\"number\">1</span>]] + <span class=\"number\">1</span></span><br><span class=\"line\">            out_degree[e[<span class=\"number\">0</span>]].append(e[<span class=\"number\">1</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        can_delete = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> in_degree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                can_delete.append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">while</span> can_delete:</span><br><span class=\"line\">            deleted = can_delete.pop()</span><br><span class=\"line\">            in_degree[deleted] = <span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> course <span class=\"keyword\">in</span> out_degree[deleted]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> in_degree[course] &gt; <span class=\"number\">-1</span>:</span><br><span class=\"line\">                    in_degree[course] = in_degree[course] - <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> in_degree[course] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        can_delete.append(course)</span><br><span class=\"line\">                        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (max(in_degree.values()) &lt;= <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度\">复杂度</h3>\n<p>时间复杂度 O(n+e)，其中 n 为定点数，e 为边数：初始化 O(e), 删除的点 O(n), 删除边 O(e), 后处理 O(n)</p>\n<p>额外空间 O(n+e) ：入度数组 n，出度哈希表 e，待删除队列 n</p>\n<h2 id=\"结语\">结语</h2>\n<p>这题考了两个知识点，一是能不能把这个问题转换成图论问题（面试官可不会和 LeetCode 一样傻乎乎地提到这是图的一种表现方式），另一个就是检查图是否有环。我这里只提到了比较好理解的检查环的两种方式，其他方法也可以顺便复习一下哦～</p>"},{"title":"[LeetCode] 3. Longest Substring Without Repeating Characters","date":"2018-07-03T14:00:00.000Z","_content":"\n## 题目\n\n[LeetCode链接](https://leetcode.com/problems/longest-substring-without-repeating-characters/description/)\n\nGiven a string, find the length of the **longest substring** without repeating characters.\n\n**Examples:**\n\nGiven `\"abcabcbb\"`, the answer is `\"abc\"`, which the length is 3.\n\nGiven `\"bbbbb\"`, the answer is `\"b\"`, with the length of 1.\n\nGiven `\"pwwkew\"`, the answer is `\"wke\"`, with the length of 3. Note that the answer must be a **substring**, `\"pwke\"` is a *subsequence*and not a substring.\n\n<!--more-->\n\n\n\n## 解题报告\n\n### 思路\n\n乍一想可能是动态规划的一道题，实际上可以化简为贪心。\n\n\n\n### 方法：滑动窗口找最大\n\n如果用动态规划的思路去考虑的话，包括 i 位置的最长连续子字符串有两种可能性：\n\n1. 如果之前的字符串中没有 i 位置的字符，则长度直接加一（包括这一字符即可）\n2. 如果之前的字符串中有 i 位置的字符，则找到它在字符串中出现的地方，计算它上一次所在位置加一到 i 之间的长度\n\n这样的动态规划乍一看是合理的，实际上再仔细推论便可以发现，只要知道字符串上一次出现的地方以及字符串开始的位置（或是当前字符串的长度——这两者是等价的，得知一个就可以知道另一个），更新的时候就可以立于不败之地，也不需要记录之前所有的最好状态，在空间和时间上都可以让复杂度更小。\n\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        used = {}\n        curr_start = 0\n        for index, char in enumerate(s):\n            if char in used and curr_start <= used.get(char, 0):\n                curr_start = used.get(char, 0) + 1\n            else:\n                result = max(result, index - curr_start + 1)\n            used[char] = index\n                \n        return result\n```\n\n\n\n## 结语\n\n动态规划和贪心很多时候是一对难兄难弟：你觉得是贪心的时候，有时无法由局部最优达到全剧最优；你觉得是动态规划的时候，却发现可以简单用贪心来解决。在想问题的时候想到其中的某一种解法时想想另一种解法的可能性是最好的～","source":"_posts/leetcode-3.md","raw":"---\ntitle: '[LeetCode] 3. Longest Substring Without Repeating Characters'\ndate: 2018-07-03 22:00:00\ncategory: 解题报告\ntags: \n- 解题报告\n- LeetCode\n- Python\n- 字符串\n- 贪心\n---\n\n## 题目\n\n[LeetCode链接](https://leetcode.com/problems/longest-substring-without-repeating-characters/description/)\n\nGiven a string, find the length of the **longest substring** without repeating characters.\n\n**Examples:**\n\nGiven `\"abcabcbb\"`, the answer is `\"abc\"`, which the length is 3.\n\nGiven `\"bbbbb\"`, the answer is `\"b\"`, with the length of 1.\n\nGiven `\"pwwkew\"`, the answer is `\"wke\"`, with the length of 3. Note that the answer must be a **substring**, `\"pwke\"` is a *subsequence*and not a substring.\n\n<!--more-->\n\n\n\n## 解题报告\n\n### 思路\n\n乍一想可能是动态规划的一道题，实际上可以化简为贪心。\n\n\n\n### 方法：滑动窗口找最大\n\n如果用动态规划的思路去考虑的话，包括 i 位置的最长连续子字符串有两种可能性：\n\n1. 如果之前的字符串中没有 i 位置的字符，则长度直接加一（包括这一字符即可）\n2. 如果之前的字符串中有 i 位置的字符，则找到它在字符串中出现的地方，计算它上一次所在位置加一到 i 之间的长度\n\n这样的动态规划乍一看是合理的，实际上再仔细推论便可以发现，只要知道字符串上一次出现的地方以及字符串开始的位置（或是当前字符串的长度——这两者是等价的，得知一个就可以知道另一个），更新的时候就可以立于不败之地，也不需要记录之前所有的最好状态，在空间和时间上都可以让复杂度更小。\n\n```python\nclass Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        used = {}\n        curr_start = 0\n        for index, char in enumerate(s):\n            if char in used and curr_start <= used.get(char, 0):\n                curr_start = used.get(char, 0) + 1\n            else:\n                result = max(result, index - curr_start + 1)\n            used[char] = index\n                \n        return result\n```\n\n\n\n## 结语\n\n动态规划和贪心很多时候是一对难兄难弟：你觉得是贪心的时候，有时无法由局部最优达到全剧最优；你觉得是动态规划的时候，却发现可以简单用贪心来解决。在想问题的时候想到其中的某一种解法时想想另一种解法的可能性是最好的～","slug":"leetcode-3","published":1,"updated":"2018-07-03T14:47:34.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4d000ixtd3qsvzvqgg","content":"<h2 id=\"&#x9898;&#x76EE;\">&#x9898;&#x76EE;</h2>\n<p><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\" target=\"_blank\" rel=\"noopener\">LeetCode&#x94FE;&#x63A5;</a></p>\n<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>\n<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>\n<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em>and not a substring.</p>\n<a id=\"more\"></a>\n<h2 id=\"&#x89E3;&#x9898;&#x62A5;&#x544A;\">&#x89E3;&#x9898;&#x62A5;&#x544A;</h2>\n<h3 id=\"&#x601D;&#x8DEF;\">&#x601D;&#x8DEF;</h3>\n<p>&#x4E4D;&#x4E00;&#x60F3;&#x53EF;&#x80FD;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x4EE5;&#x5316;&#x7B80;&#x4E3A;&#x8D2A;&#x5FC3;&#x3002;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x627E;&#x6700;&#x5927;\">&#x65B9;&#x6CD5;&#xFF1A;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x627E;&#x6700;&#x5927;</h3>\n<p>&#x5982;&#x679C;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x8DEF;&#x53BB;&#x8003;&#x8651;&#x7684;&#x8BDD;&#xFF0C;&#x5305;&#x62EC; i &#x4F4D;&#x7F6E;&#x7684;&#x6700;&#x957F;&#x8FDE;&#x7EED;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x6709;&#x4E24;&#x79CD;&#x53EF;&#x80FD;&#x6027;&#xFF1A;</p>\n<ol type=\"1\">\n<li>&#x5982;&#x679C;&#x4E4B;&#x524D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x6CA1;&#x6709; i &#x4F4D;&#x7F6E;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5219;&#x957F;&#x5EA6;&#x76F4;&#x63A5;&#x52A0;&#x4E00;&#xFF08;&#x5305;&#x62EC;&#x8FD9;&#x4E00;&#x5B57;&#x7B26;&#x5373;&#x53EF;&#xFF09;</li>\n<li>&#x5982;&#x679C;&#x4E4B;&#x524D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x6709; i &#x4F4D;&#x7F6E;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5219;&#x627E;&#x5230;&#x5B83;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x8BA1;&#x7B97;&#x5B83;&#x4E0A;&#x4E00;&#x6B21;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#x52A0;&#x4E00;&#x5230; i &#x4E4B;&#x95F4;&#x7684;&#x957F;&#x5EA6;</li>\n</ol>\n<p>&#x8FD9;&#x6837;&#x7684;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x4E4D;&#x4E00;&#x770B;&#x662F;&#x5408;&#x7406;&#x7684;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x518D;&#x4ED4;&#x7EC6;&#x63A8;&#x8BBA;&#x4FBF;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x53EA;&#x8981;&#x77E5;&#x9053;&#x5B57;&#x7B26;&#x4E32;&#x4E0A;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x5730;&#x65B9;&#x4EE5;&#x53CA;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x59CB;&#x7684;&#x4F4D;&#x7F6E;&#xFF08;&#x6216;&#x662F;&#x5F53;&#x524D;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x2014;&#x2014;&#x8FD9;&#x4E24;&#x8005;&#x662F;&#x7B49;&#x4EF7;&#x7684;&#xFF0C;&#x5F97;&#x77E5;&#x4E00;&#x4E2A;&#x5C31;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x53E6;&#x4E00;&#x4E2A;&#xFF09;&#xFF0C;&#x66F4;&#x65B0;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x53EF;&#x4EE5;&#x7ACB;&#x4E8E;&#x4E0D;&#x8D25;&#x4E4B;&#x5730;&#xFF0C;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x4E4B;&#x524D;&#x6240;&#x6709;&#x7684;&#x6700;&#x597D;&#x72B6;&#x6001;&#xFF0C;&#x5728;&#x7A7A;&#x95F4;&#x548C;&#x65F6;&#x95F4;&#x4E0A;&#x90FD;&#x53EF;&#x4EE5;&#x8BA9;&#x590D;&#x6742;&#x5EA6;&#x66F4;&#x5C0F;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        result = <span class=\"number\">0</span></span><br><span class=\"line\">        used = {}</span><br><span class=\"line\">        curr_start = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> enumerate(s):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> used <span class=\"keyword\">and</span> curr_start &lt;= used.get(char, <span class=\"number\">0</span>):</span><br><span class=\"line\">                curr_start = used.get(char, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                result = max(result, index - curr_start + <span class=\"number\">1</span>)</span><br><span class=\"line\">            used[char] = index</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x7ED3;&#x8BED;\">&#x7ED3;&#x8BED;</h2>\n<p>&#x52A8;&#x6001;&#x89C4;&#x5212;&#x548C;&#x8D2A;&#x5FC3;&#x5F88;&#x591A;&#x65F6;&#x5019;&#x662F;&#x4E00;&#x5BF9;&#x96BE;&#x5144;&#x96BE;&#x5F1F;&#xFF1A;&#x4F60;&#x89C9;&#x5F97;&#x662F;&#x8D2A;&#x5FC3;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x65F6;&#x65E0;&#x6CD5;&#x7531;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x8FBE;&#x5230;&#x5168;&#x5267;&#x6700;&#x4F18;&#xFF1B;&#x4F60;&#x89C9;&#x5F97;&#x662F;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5374;&#x53D1;&#x73B0;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7528;&#x8D2A;&#x5FC3;&#x6765;&#x89E3;&#x51B3;&#x3002;&#x5728;&#x60F3;&#x95EE;&#x9898;&#x7684;&#x65F6;&#x5019;&#x60F3;&#x5230;&#x5176;&#x4E2D;&#x7684;&#x67D0;&#x4E00;&#x79CD;&#x89E3;&#x6CD5;&#x65F6;&#x60F3;&#x60F3;&#x53E6;&#x4E00;&#x79CD;&#x89E3;&#x6CD5;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x662F;&#x6700;&#x597D;&#x7684;&#xFF5E;</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\">题目</h2>\n<p><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\" target=\"_blank\" rel=\"noopener\">LeetCode链接</a></p>\n<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>\n<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>\n<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em>and not a substring.</p>","more":"<h2 id=\"解题报告\">解题报告</h2>\n<h3 id=\"思路\">思路</h3>\n<p>乍一想可能是动态规划的一道题，实际上可以化简为贪心。</p>\n<h3 id=\"方法滑动窗口找最大\">方法：滑动窗口找最大</h3>\n<p>如果用动态规划的思路去考虑的话，包括 i 位置的最长连续子字符串有两种可能性：</p>\n<ol type=\"1\">\n<li>如果之前的字符串中没有 i 位置的字符，则长度直接加一（包括这一字符即可）</li>\n<li>如果之前的字符串中有 i 位置的字符，则找到它在字符串中出现的地方，计算它上一次所在位置加一到 i 之间的长度</li>\n</ol>\n<p>这样的动态规划乍一看是合理的，实际上再仔细推论便可以发现，只要知道字符串上一次出现的地方以及字符串开始的位置（或是当前字符串的长度——这两者是等价的，得知一个就可以知道另一个），更新的时候就可以立于不败之地，也不需要记录之前所有的最好状态，在空间和时间上都可以让复杂度更小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        result = <span class=\"number\">0</span></span><br><span class=\"line\">        used = &#123;&#125;</span><br><span class=\"line\">        curr_start = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> enumerate(s):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> used <span class=\"keyword\">and</span> curr_start &lt;= used.get(char, <span class=\"number\">0</span>):</span><br><span class=\"line\">                curr_start = used.get(char, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                result = max(result, index - curr_start + <span class=\"number\">1</span>)</span><br><span class=\"line\">            used[char] = index</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>动态规划和贪心很多时候是一对难兄难弟：你觉得是贪心的时候，有时无法由局部最优达到全剧最优；你觉得是动态规划的时候，却发现可以简单用贪心来解决。在想问题的时候想到其中的某一种解法时想想另一种解法的可能性是最好的～</p>"},{"title":"第一次的机器学习：机器学习基础概念和名词","date":"2017-07-29T16:00:00.000Z","_content":"\n\n\n尽管机器学习从分类上而言只是人工智能（也就是常说的AI）的分支之一，但其本身也是一个相当巨大的命题。在未来的一段时间里，我将花时间在专栏写一些我比较熟悉的机器学习相关的概念和算法，最主要的目的是为了梳理自己的知识体系，也是希望和大家分享学习的历程和感悟，以达到交流的目的。\n\n这两年大数据火了，机器学习、神经网络、数据挖掘、强化学习等等这些名词都火了，然而我常常在想，把这些名词挂在嘴边的我们，究竟能否在这个领域飞速发展的情况下，清楚地了解到自己说的每一个名词——谁是谁的分支，哪个和哪个又是同等关系或是没有关系的——在名词爆炸的状态下，想学什么，了解其基础概念是必不可少的。\n\n\n\n#  与数据相关的概念\n\n假如我们有一组天气数据，是来自全世界不同国家和地区的每日天气，内容包括最高温度、最低温度、平均湿度、风速之类的相关数据，例如数据的一部分是这样的：\n\n| 城市   | 最高温度 | 最低温度 | 相对湿度 | 某时刻风速    |\n| ---- | ---- | ---- | ---- | -------- |\n| A市   | 36℃  | 28℃  | 58%  | 16.7km/h |\n| B市   | 28℃  | 17℃  | 86%  | /        |\n| C市   | 34℃  | 29℃  | 39%  | 20.4km/h |\n\n在这组数据中，我们将称A市、B市、C市等市以及其情况的总和称为**数据集（data set）**。表格中的每一行，也就是某城市和它的情况被称为一个**样例（sample/instance）**。表格中的每一列（不包括城市），例如最高温度、最低温度，被称为**特征（feature/attribute）**，而每一列中的具体数值，例如36℃ 、28℃，被称为**属性值（attribute value）**。数据中也可能会有**缺失数据（missing data）**，例如B市的某时刻风速，我们会将它视作缺失数据。\n\n<!--more-->\n\n如果我们想预测城市的天气，例如是晴朗还是阴雨天，这些数据是不够的，除了**特征**以外，我们还需要每个城市的具体天气情况，也就是通常语境下的结果。在机器学习中，它会被称为**标签（label）**，用于标记数据。值得注意的是，数据集中不一定包含标签信息，而这种区别会引起方法上的差别。我们可以给上述示例加上一组标签：\n\n| 城市   | 天气   |\n| ---- | ---- |\n| A市   | 晴朗   |\n| B市   | 阴雨   |\n| C市   | 晴朗   |\n\n视具体情况，用来进行机器学习的一个数据集往往会被分为两个数据集——**训练数据（training data）**和**测试数据（testing data）**。  顾名思义，训练数据在机器学习的过程中使用，目的是找出一套机器学习的方法；而测试数据用于判断找出的方法是否足够有效。如果在训练的过程中需要确定方法的准确度，有时会将训练数据分成**训练集（training set）**和**验证集（validation set）**——验证集合测试数据不同的地方在于验证集在训练过程中使用，而测试数据事实上是在模型建立后才被使用的。\n\n# 与方法相关的概念\n\n根据数据有没有标签，我们可以将机器学习分类为**监督学习（Supervised Learning）**、**无监督学习（Unsupervised Learning）**和**半监督学习（Semi-Supervised Learning）**。\n\n**监督学习**是学习**给定标签**的数据集，比如说有一组病人，给出他们的详细资料，将他们是否已确诊癌症作为标签，然后预测一名（其他的）病人是否会患有癌症，就是一种典型的监督学习。监督学习中也有不同的分类，如果我们训练的结果是得癌症和不得癌症之类**离散的类型**，则称为**分类（Classification）**，如果只有两种类型的话可以进一步称为**二分类（Binary Classification）**；如果我们训练的结果是得癌症的概率为0.87之类**连续的数字**，则称为**回归（Regression）**。\n\n**无监督学习**是学习**没有标签的数据集**，比如在分析大量语句之后，训练出一个模型将较为接近的词分为一类，而后可以根据一个新的词在句子中的用法（和其他信息）将这个词分入某一类中。其中比较微妙的地方在于，这种问题下使用**聚类（Clustering）**（方法）所获得的**簇（Cluster）**（结果），有时候是无法人为地观察出其特征的，但是在得到聚类后，可能会对数据集有新的启发。\n\n**半监督学习**的数据集比较特殊，是部分有标签部分无标签的数据集。由于有标签的数据很多时候需要花大量人力物力去分类和生成，半监督学习也被视作当前机器学习的重要部分。半监督问题往往会**利用一些假设**，将半监督学习转化为传统的监督学习或非监督学习问题。\n\n\n\n# 与结果相关的概念\n\n## 二分类问题\n\n衡量结果精度的有一些相关术语，首当其冲的是**准确率（Accuracy）**、**精确率（Precision）**和**召回率（Recall）**。这三个词汇应用于**二分类问题**：将数据分为**正例（Positive Class）**和**反例（Negative Class）**\n\n一张形象的维基百科图：![](https://upload.wikimedia.org/wikipedia/commons/2/26/Precisionrecall.svg)\n\n也就是说，**准确率**是预测和标签一致的样本在所有样本中所占的比例；**精确率**是你预测为正类的数据中，有多少确实是正类；**召回率**是所有正类的数据中，你预测为正类的数据有多少。这三个数据往往用来衡量一个二分类算法的优劣。\n\n## 回归问题\n\n回归问题往往会通过计算**误差（Error）**来确定模型的精确性。误差由于训练集和验证集的不同，会被分为**训练误差（Training Error）**和**验证误差（Validation Error）**。但值得注意的是，模型并不是误差越小就一定越好，因为如果仅仅基于误差，我们可能会得到一个**过拟合（Overfitting）**的模型；但是如果不考虑误差，我们可能会得到一个**欠拟合（Underfitting）**的模型，用图像来说的话大致可以这样理解：\n\n![](http://pingax.com/wp-content/uploads/2014/05/underfitting-overfitting.png)\n\n如果模型十分简单，往往会欠拟合，对于训练数据和测试数据的误差都会很大；但如果模型太过于复杂，往往会过拟合，那么训练数据的误差可能相当小，但是测试数据的误差会增大。好的模型应当平衡于这两者之间：\n\n![](https://i.stack.imgur.com/S0tRm.png)\n\n## 聚类问题\n\n聚类问题的标准一般基于距离：**簇内距离（Intra-cluster Distance）**和**簇间距离（Inter-cluster Distance）**。根据常识而言，簇内距离是越小越好，也就是簇内的元素越相似越好；而簇间距离越大越好，也就是说簇间（不同簇）元素越不相同越好。一般来说，衡量聚类问题会给出一个结合簇内距离和簇间距离的公式。\n\n\n\n# 总结\n\n机器学习的基本概念并不多，但搞清楚具体每个算法适用于怎样的数据、应当怎样去评价是比较重要的一点。\n\n![](http://osvlzj5nm.bkt.clouddn.com/17-7-30/20918915.jpg)\n\n在之后的专栏中，我们将更多的讨论具体的算法，比较它们的优劣，研究它们的局限性和适用性。\n\n希望大家在了解机器学习的时候把一句话永远放在心中：\n\n> All models are wrong but some are useful.","source":"_posts/machine-learning-basic-concepts.md","raw":"---\ntitle: 第一次的机器学习：机器学习基础概念和名词\ndate: 2017-07-30\ncategory: 计算机课堂\ntags: \n- 机器学习\n---\n\n\n\n尽管机器学习从分类上而言只是人工智能（也就是常说的AI）的分支之一，但其本身也是一个相当巨大的命题。在未来的一段时间里，我将花时间在专栏写一些我比较熟悉的机器学习相关的概念和算法，最主要的目的是为了梳理自己的知识体系，也是希望和大家分享学习的历程和感悟，以达到交流的目的。\n\n这两年大数据火了，机器学习、神经网络、数据挖掘、强化学习等等这些名词都火了，然而我常常在想，把这些名词挂在嘴边的我们，究竟能否在这个领域飞速发展的情况下，清楚地了解到自己说的每一个名词——谁是谁的分支，哪个和哪个又是同等关系或是没有关系的——在名词爆炸的状态下，想学什么，了解其基础概念是必不可少的。\n\n\n\n#  与数据相关的概念\n\n假如我们有一组天气数据，是来自全世界不同国家和地区的每日天气，内容包括最高温度、最低温度、平均湿度、风速之类的相关数据，例如数据的一部分是这样的：\n\n| 城市   | 最高温度 | 最低温度 | 相对湿度 | 某时刻风速    |\n| ---- | ---- | ---- | ---- | -------- |\n| A市   | 36℃  | 28℃  | 58%  | 16.7km/h |\n| B市   | 28℃  | 17℃  | 86%  | /        |\n| C市   | 34℃  | 29℃  | 39%  | 20.4km/h |\n\n在这组数据中，我们将称A市、B市、C市等市以及其情况的总和称为**数据集（data set）**。表格中的每一行，也就是某城市和它的情况被称为一个**样例（sample/instance）**。表格中的每一列（不包括城市），例如最高温度、最低温度，被称为**特征（feature/attribute）**，而每一列中的具体数值，例如36℃ 、28℃，被称为**属性值（attribute value）**。数据中也可能会有**缺失数据（missing data）**，例如B市的某时刻风速，我们会将它视作缺失数据。\n\n<!--more-->\n\n如果我们想预测城市的天气，例如是晴朗还是阴雨天，这些数据是不够的，除了**特征**以外，我们还需要每个城市的具体天气情况，也就是通常语境下的结果。在机器学习中，它会被称为**标签（label）**，用于标记数据。值得注意的是，数据集中不一定包含标签信息，而这种区别会引起方法上的差别。我们可以给上述示例加上一组标签：\n\n| 城市   | 天气   |\n| ---- | ---- |\n| A市   | 晴朗   |\n| B市   | 阴雨   |\n| C市   | 晴朗   |\n\n视具体情况，用来进行机器学习的一个数据集往往会被分为两个数据集——**训练数据（training data）**和**测试数据（testing data）**。  顾名思义，训练数据在机器学习的过程中使用，目的是找出一套机器学习的方法；而测试数据用于判断找出的方法是否足够有效。如果在训练的过程中需要确定方法的准确度，有时会将训练数据分成**训练集（training set）**和**验证集（validation set）**——验证集合测试数据不同的地方在于验证集在训练过程中使用，而测试数据事实上是在模型建立后才被使用的。\n\n# 与方法相关的概念\n\n根据数据有没有标签，我们可以将机器学习分类为**监督学习（Supervised Learning）**、**无监督学习（Unsupervised Learning）**和**半监督学习（Semi-Supervised Learning）**。\n\n**监督学习**是学习**给定标签**的数据集，比如说有一组病人，给出他们的详细资料，将他们是否已确诊癌症作为标签，然后预测一名（其他的）病人是否会患有癌症，就是一种典型的监督学习。监督学习中也有不同的分类，如果我们训练的结果是得癌症和不得癌症之类**离散的类型**，则称为**分类（Classification）**，如果只有两种类型的话可以进一步称为**二分类（Binary Classification）**；如果我们训练的结果是得癌症的概率为0.87之类**连续的数字**，则称为**回归（Regression）**。\n\n**无监督学习**是学习**没有标签的数据集**，比如在分析大量语句之后，训练出一个模型将较为接近的词分为一类，而后可以根据一个新的词在句子中的用法（和其他信息）将这个词分入某一类中。其中比较微妙的地方在于，这种问题下使用**聚类（Clustering）**（方法）所获得的**簇（Cluster）**（结果），有时候是无法人为地观察出其特征的，但是在得到聚类后，可能会对数据集有新的启发。\n\n**半监督学习**的数据集比较特殊，是部分有标签部分无标签的数据集。由于有标签的数据很多时候需要花大量人力物力去分类和生成，半监督学习也被视作当前机器学习的重要部分。半监督问题往往会**利用一些假设**，将半监督学习转化为传统的监督学习或非监督学习问题。\n\n\n\n# 与结果相关的概念\n\n## 二分类问题\n\n衡量结果精度的有一些相关术语，首当其冲的是**准确率（Accuracy）**、**精确率（Precision）**和**召回率（Recall）**。这三个词汇应用于**二分类问题**：将数据分为**正例（Positive Class）**和**反例（Negative Class）**\n\n一张形象的维基百科图：![](https://upload.wikimedia.org/wikipedia/commons/2/26/Precisionrecall.svg)\n\n也就是说，**准确率**是预测和标签一致的样本在所有样本中所占的比例；**精确率**是你预测为正类的数据中，有多少确实是正类；**召回率**是所有正类的数据中，你预测为正类的数据有多少。这三个数据往往用来衡量一个二分类算法的优劣。\n\n## 回归问题\n\n回归问题往往会通过计算**误差（Error）**来确定模型的精确性。误差由于训练集和验证集的不同，会被分为**训练误差（Training Error）**和**验证误差（Validation Error）**。但值得注意的是，模型并不是误差越小就一定越好，因为如果仅仅基于误差，我们可能会得到一个**过拟合（Overfitting）**的模型；但是如果不考虑误差，我们可能会得到一个**欠拟合（Underfitting）**的模型，用图像来说的话大致可以这样理解：\n\n![](http://pingax.com/wp-content/uploads/2014/05/underfitting-overfitting.png)\n\n如果模型十分简单，往往会欠拟合，对于训练数据和测试数据的误差都会很大；但如果模型太过于复杂，往往会过拟合，那么训练数据的误差可能相当小，但是测试数据的误差会增大。好的模型应当平衡于这两者之间：\n\n![](https://i.stack.imgur.com/S0tRm.png)\n\n## 聚类问题\n\n聚类问题的标准一般基于距离：**簇内距离（Intra-cluster Distance）**和**簇间距离（Inter-cluster Distance）**。根据常识而言，簇内距离是越小越好，也就是簇内的元素越相似越好；而簇间距离越大越好，也就是说簇间（不同簇）元素越不相同越好。一般来说，衡量聚类问题会给出一个结合簇内距离和簇间距离的公式。\n\n\n\n# 总结\n\n机器学习的基本概念并不多，但搞清楚具体每个算法适用于怎样的数据、应当怎样去评价是比较重要的一点。\n\n![](http://osvlzj5nm.bkt.clouddn.com/17-7-30/20918915.jpg)\n\n在之后的专栏中，我们将更多的讨论具体的算法，比较它们的优劣，研究它们的局限性和适用性。\n\n希望大家在了解机器学习的时候把一句话永远放在心中：\n\n> All models are wrong but some are useful.","slug":"machine-learning-basic-concepts","published":1,"updated":"2018-07-03T13:44:30.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4j000nxtd32094y8m5","content":"<p>&#x5C3D;&#x7BA1;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4ECE;&#x5206;&#x7C7B;&#x4E0A;&#x800C;&#x8A00;&#x53EA;&#x662F;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#xFF08;&#x4E5F;&#x5C31;&#x662F;&#x5E38;&#x8BF4;&#x7684;AI&#xFF09;&#x7684;&#x5206;&#x652F;&#x4E4B;&#x4E00;&#xFF0C;&#x4F46;&#x5176;&#x672C;&#x8EAB;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x76F8;&#x5F53;&#x5DE8;&#x5927;&#x7684;&#x547D;&#x9898;&#x3002;&#x5728;&#x672A;&#x6765;&#x7684;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x91CC;&#xFF0C;&#x6211;&#x5C06;&#x82B1;&#x65F6;&#x95F4;&#x5728;&#x4E13;&#x680F;&#x5199;&#x4E00;&#x4E9B;&#x6211;&#x6BD4;&#x8F83;&#x719F;&#x6089;&#x7684;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;&#x548C;&#x7B97;&#x6CD5;&#xFF0C;&#x6700;&#x4E3B;&#x8981;&#x7684;&#x76EE;&#x7684;&#x662F;&#x4E3A;&#x4E86;&#x68B3;&#x7406;&#x81EA;&#x5DF1;&#x7684;&#x77E5;&#x8BC6;&#x4F53;&#x7CFB;&#xFF0C;&#x4E5F;&#x662F;&#x5E0C;&#x671B;&#x548C;&#x5927;&#x5BB6;&#x5206;&#x4EAB;&#x5B66;&#x4E60;&#x7684;&#x5386;&#x7A0B;&#x548C;&#x611F;&#x609F;&#xFF0C;&#x4EE5;&#x8FBE;&#x5230;&#x4EA4;&#x6D41;&#x7684;&#x76EE;&#x7684;&#x3002;</p>\n<p>&#x8FD9;&#x4E24;&#x5E74;&#x5927;&#x6570;&#x636E;&#x706B;&#x4E86;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x3001;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x3001;&#x6570;&#x636E;&#x6316;&#x6398;&#x3001;&#x5F3A;&#x5316;&#x5B66;&#x4E60;&#x7B49;&#x7B49;&#x8FD9;&#x4E9B;&#x540D;&#x8BCD;&#x90FD;&#x706B;&#x4E86;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x5E38;&#x5E38;&#x5728;&#x60F3;&#xFF0C;&#x628A;&#x8FD9;&#x4E9B;&#x540D;&#x8BCD;&#x6302;&#x5728;&#x5634;&#x8FB9;&#x7684;&#x6211;&#x4EEC;&#xFF0C;&#x7A76;&#x7ADF;&#x80FD;&#x5426;&#x5728;&#x8FD9;&#x4E2A;&#x9886;&#x57DF;&#x98DE;&#x901F;&#x53D1;&#x5C55;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6E05;&#x695A;&#x5730;&#x4E86;&#x89E3;&#x5230;&#x81EA;&#x5DF1;&#x8BF4;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x540D;&#x8BCD;&#x2014;&#x2014;&#x8C01;&#x662F;&#x8C01;&#x7684;&#x5206;&#x652F;&#xFF0C;&#x54EA;&#x4E2A;&#x548C;&#x54EA;&#x4E2A;&#x53C8;&#x662F;&#x540C;&#x7B49;&#x5173;&#x7CFB;&#x6216;&#x662F;&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#x7684;&#x2014;&#x2014;&#x5728;&#x540D;&#x8BCD;&#x7206;&#x70B8;&#x7684;&#x72B6;&#x6001;&#x4E0B;&#xFF0C;&#x60F3;&#x5B66;&#x4EC0;&#x4E48;&#xFF0C;&#x4E86;&#x89E3;&#x5176;&#x57FA;&#x7840;&#x6982;&#x5FF5;&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x3002;</p>\n<h1 id=\"&#x4E0E;&#x6570;&#x636E;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;\">&#x4E0E;&#x6570;&#x636E;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;</h1>\n<p>&#x5047;&#x5982;&#x6211;&#x4EEC;&#x6709;&#x4E00;&#x7EC4;&#x5929;&#x6C14;&#x6570;&#x636E;&#xFF0C;&#x662F;&#x6765;&#x81EA;&#x5168;&#x4E16;&#x754C;&#x4E0D;&#x540C;&#x56FD;&#x5BB6;&#x548C;&#x5730;&#x533A;&#x7684;&#x6BCF;&#x65E5;&#x5929;&#x6C14;&#xFF0C;&#x5185;&#x5BB9;&#x5305;&#x62EC;&#x6700;&#x9AD8;&#x6E29;&#x5EA6;&#x3001;&#x6700;&#x4F4E;&#x6E29;&#x5EA6;&#x3001;&#x5E73;&#x5747;&#x6E7F;&#x5EA6;&#x3001;&#x98CE;&#x901F;&#x4E4B;&#x7C7B;&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#xFF0C;&#x4F8B;&#x5982;&#x6570;&#x636E;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>&#x57CE;&#x5E02;</th>\n<th>&#x6700;&#x9AD8;&#x6E29;&#x5EA6;</th>\n<th>&#x6700;&#x4F4E;&#x6E29;&#x5EA6;</th>\n<th>&#x76F8;&#x5BF9;&#x6E7F;&#x5EA6;</th>\n<th>&#x67D0;&#x65F6;&#x523B;&#x98CE;&#x901F;</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>A&#x5E02;</td>\n<td>36&#x2103;</td>\n<td>28&#x2103;</td>\n<td>58%</td>\n<td>16.7km/h</td>\n</tr>\n<tr class=\"even\">\n<td>B&#x5E02;</td>\n<td>28&#x2103;</td>\n<td>17&#x2103;</td>\n<td>86%</td>\n<td>/</td>\n</tr>\n<tr class=\"odd\">\n<td>C&#x5E02;</td>\n<td>34&#x2103;</td>\n<td>29&#x2103;</td>\n<td>39%</td>\n<td>20.4km/h</td>\n</tr>\n</tbody>\n</table>\n<p>&#x5728;&#x8FD9;&#x7EC4;&#x6570;&#x636E;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x79F0;A&#x5E02;&#x3001;B&#x5E02;&#x3001;C&#x5E02;&#x7B49;&#x5E02;&#x4EE5;&#x53CA;&#x5176;&#x60C5;&#x51B5;&#x7684;&#x603B;&#x548C;&#x79F0;&#x4E3A;<strong>&#x6570;&#x636E;&#x96C6;&#xFF08;data set&#xFF09;</strong>&#x3002;&#x8868;&#x683C;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x884C;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x67D0;&#x57CE;&#x5E02;&#x548C;&#x5B83;&#x7684;&#x60C5;&#x51B5;&#x88AB;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A;<strong>&#x6837;&#x4F8B;&#xFF08;sample/instance&#xFF09;</strong>&#x3002;&#x8868;&#x683C;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x5217;&#xFF08;&#x4E0D;&#x5305;&#x62EC;&#x57CE;&#x5E02;&#xFF09;&#xFF0C;&#x4F8B;&#x5982;&#x6700;&#x9AD8;&#x6E29;&#x5EA6;&#x3001;&#x6700;&#x4F4E;&#x6E29;&#x5EA6;&#xFF0C;&#x88AB;&#x79F0;&#x4E3A;<strong>&#x7279;&#x5F81;&#xFF08;feature/attribute&#xFF09;</strong>&#xFF0C;&#x800C;&#x6BCF;&#x4E00;&#x5217;&#x4E2D;&#x7684;&#x5177;&#x4F53;&#x6570;&#x503C;&#xFF0C;&#x4F8B;&#x5982;36&#x2103; &#x3001;28&#x2103;&#xFF0C;&#x88AB;&#x79F0;&#x4E3A;<strong>&#x5C5E;&#x6027;&#x503C;&#xFF08;attribute value&#xFF09;</strong>&#x3002;&#x6570;&#x636E;&#x4E2D;&#x4E5F;&#x53EF;&#x80FD;&#x4F1A;&#x6709;<strong>&#x7F3A;&#x5931;&#x6570;&#x636E;&#xFF08;missing data&#xFF09;</strong>&#xFF0C;&#x4F8B;&#x5982;B&#x5E02;&#x7684;&#x67D0;&#x65F6;&#x523B;&#x98CE;&#x901F;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x5C06;&#x5B83;&#x89C6;&#x4F5C;&#x7F3A;&#x5931;&#x6570;&#x636E;&#x3002;</p>\n<a id=\"more\"></a>\n<p>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x60F3;&#x9884;&#x6D4B;&#x57CE;&#x5E02;&#x7684;&#x5929;&#x6C14;&#xFF0C;&#x4F8B;&#x5982;&#x662F;&#x6674;&#x6717;&#x8FD8;&#x662F;&#x9634;&#x96E8;&#x5929;&#xFF0C;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x662F;&#x4E0D;&#x591F;&#x7684;&#xFF0C;&#x9664;&#x4E86;<strong>&#x7279;&#x5F81;</strong>&#x4EE5;&#x5916;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x9700;&#x8981;&#x6BCF;&#x4E2A;&#x57CE;&#x5E02;&#x7684;&#x5177;&#x4F53;&#x5929;&#x6C14;&#x60C5;&#x51B5;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x901A;&#x5E38;&#x8BED;&#x5883;&#x4E0B;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x5B83;&#x4F1A;&#x88AB;&#x79F0;&#x4E3A;<strong>&#x6807;&#x7B7E;&#xFF08;label&#xFF09;</strong>&#xFF0C;&#x7528;&#x4E8E;&#x6807;&#x8BB0;&#x6570;&#x636E;&#x3002;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x4E0D;&#x4E00;&#x5B9A;&#x5305;&#x542B;&#x6807;&#x7B7E;&#x4FE1;&#x606F;&#xFF0C;&#x800C;&#x8FD9;&#x79CD;&#x533A;&#x522B;&#x4F1A;&#x5F15;&#x8D77;&#x65B9;&#x6CD5;&#x4E0A;&#x7684;&#x5DEE;&#x522B;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7ED9;&#x4E0A;&#x8FF0;&#x793A;&#x4F8B;&#x52A0;&#x4E0A;&#x4E00;&#x7EC4;&#x6807;&#x7B7E;&#xFF1A;</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>&#x57CE;&#x5E02;</th>\n<th>&#x5929;&#x6C14;</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>A&#x5E02;</td>\n<td>&#x6674;&#x6717;</td>\n</tr>\n<tr class=\"even\">\n<td>B&#x5E02;</td>\n<td>&#x9634;&#x96E8;</td>\n</tr>\n<tr class=\"odd\">\n<td>C&#x5E02;</td>\n<td>&#x6674;&#x6717;</td>\n</tr>\n</tbody>\n</table>\n<p>&#x89C6;&#x5177;&#x4F53;&#x60C5;&#x51B5;&#xFF0C;&#x7528;&#x6765;&#x8FDB;&#x884C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x5F80;&#x5F80;&#x4F1A;&#x88AB;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x6570;&#x636E;&#x96C6;&#x2014;&#x2014;<strong>&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#xFF08;training data&#xFF09;</strong>&#x548C;<strong>&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#xFF08;testing data&#xFF09;</strong>&#x3002; &#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x627E;&#x51FA;&#x4E00;&#x5957;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65B9;&#x6CD5;&#xFF1B;&#x800C;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x627E;&#x51FA;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5426;&#x8DB3;&#x591F;&#x6709;&#x6548;&#x3002;&#x5982;&#x679C;&#x5728;&#x8BAD;&#x7EC3;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x9700;&#x8981;&#x786E;&#x5B9A;&#x65B9;&#x6CD5;&#x7684;&#x51C6;&#x786E;&#x5EA6;&#xFF0C;&#x6709;&#x65F6;&#x4F1A;&#x5C06;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x5206;&#x6210;<strong>&#x8BAD;&#x7EC3;&#x96C6;&#xFF08;training set&#xFF09;</strong>&#x548C;<strong>&#x9A8C;&#x8BC1;&#x96C6;&#xFF08;validation set&#xFF09;</strong>&#x2014;&#x2014;&#x9A8C;&#x8BC1;&#x96C6;&#x5408;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x5730;&#x65B9;&#x5728;&#x4E8E;&#x9A8C;&#x8BC1;&#x96C6;&#x5728;&#x8BAD;&#x7EC3;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528;&#xFF0C;&#x800C;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E8B;&#x5B9E;&#x4E0A;&#x662F;&#x5728;&#x6A21;&#x578B;&#x5EFA;&#x7ACB;&#x540E;&#x624D;&#x88AB;&#x4F7F;&#x7528;&#x7684;&#x3002;</p>\n<h1 id=\"&#x4E0E;&#x65B9;&#x6CD5;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;\">&#x4E0E;&#x65B9;&#x6CD5;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;</h1>\n<p>&#x6839;&#x636E;&#x6570;&#x636E;&#x6709;&#x6CA1;&#x6709;&#x6807;&#x7B7E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x5206;&#x7C7B;&#x4E3A;<strong>&#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF08;Supervised Learning&#xFF09;</strong>&#x3001;<strong>&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF08;Unsupervised Learning&#xFF09;</strong>&#x548C;<strong>&#x534A;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF08;Semi-Supervised Learning&#xFF09;</strong>&#x3002;</p>\n<p><strong>&#x76D1;&#x7763;&#x5B66;&#x4E60;</strong>&#x662F;&#x5B66;&#x4E60;<strong>&#x7ED9;&#x5B9A;&#x6807;&#x7B7E;</strong>&#x7684;&#x6570;&#x636E;&#x96C6;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x6709;&#x4E00;&#x7EC4;&#x75C5;&#x4EBA;&#xFF0C;&#x7ED9;&#x51FA;&#x4ED6;&#x4EEC;&#x7684;&#x8BE6;&#x7EC6;&#x8D44;&#x6599;&#xFF0C;&#x5C06;&#x4ED6;&#x4EEC;&#x662F;&#x5426;&#x5DF2;&#x786E;&#x8BCA;&#x764C;&#x75C7;&#x4F5C;&#x4E3A;&#x6807;&#x7B7E;&#xFF0C;&#x7136;&#x540E;&#x9884;&#x6D4B;&#x4E00;&#x540D;&#xFF08;&#x5176;&#x4ED6;&#x7684;&#xFF09;&#x75C5;&#x4EBA;&#x662F;&#x5426;&#x4F1A;&#x60A3;&#x6709;&#x764C;&#x75C7;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x5178;&#x578B;&#x7684;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x3002;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x4E2D;&#x4E5F;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5206;&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8BAD;&#x7EC3;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x5F97;&#x764C;&#x75C7;&#x548C;&#x4E0D;&#x5F97;&#x764C;&#x75C7;&#x4E4B;&#x7C7B;<strong>&#x79BB;&#x6563;&#x7684;&#x7C7B;&#x578B;</strong>&#xFF0C;&#x5219;&#x79F0;&#x4E3A;<strong>&#x5206;&#x7C7B;&#xFF08;Classification&#xFF09;</strong>&#xFF0C;&#x5982;&#x679C;&#x53EA;&#x6709;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8BDD;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x79F0;&#x4E3A;<strong>&#x4E8C;&#x5206;&#x7C7B;&#xFF08;Binary Classification&#xFF09;</strong>&#xFF1B;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8BAD;&#x7EC3;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x5F97;&#x764C;&#x75C7;&#x7684;&#x6982;&#x7387;&#x4E3A;0.87&#x4E4B;&#x7C7B;<strong>&#x8FDE;&#x7EED;&#x7684;&#x6570;&#x5B57;</strong>&#xFF0C;&#x5219;&#x79F0;&#x4E3A;<strong>&#x56DE;&#x5F52;&#xFF08;Regression&#xFF09;</strong>&#x3002;</p>\n<p><strong>&#x65E0;&#x76D1;&#x7763;&#x5B66;&#x4E60;</strong>&#x662F;&#x5B66;&#x4E60;<strong>&#x6CA1;&#x6709;&#x6807;&#x7B7E;&#x7684;&#x6570;&#x636E;&#x96C6;</strong>&#xFF0C;&#x6BD4;&#x5982;&#x5728;&#x5206;&#x6790;&#x5927;&#x91CF;&#x8BED;&#x53E5;&#x4E4B;&#x540E;&#xFF0C;&#x8BAD;&#x7EC3;&#x51FA;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x5C06;&#x8F83;&#x4E3A;&#x63A5;&#x8FD1;&#x7684;&#x8BCD;&#x5206;&#x4E3A;&#x4E00;&#x7C7B;&#xFF0C;&#x800C;&#x540E;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8BCD;&#x5728;&#x53E5;&#x5B50;&#x4E2D;&#x7684;&#x7528;&#x6CD5;&#xFF08;&#x548C;&#x5176;&#x4ED6;&#x4FE1;&#x606F;&#xFF09;&#x5C06;&#x8FD9;&#x4E2A;&#x8BCD;&#x5206;&#x5165;&#x67D0;&#x4E00;&#x7C7B;&#x4E2D;&#x3002;&#x5176;&#x4E2D;&#x6BD4;&#x8F83;&#x5FAE;&#x5999;&#x7684;&#x5730;&#x65B9;&#x5728;&#x4E8E;&#xFF0C;&#x8FD9;&#x79CD;&#x95EE;&#x9898;&#x4E0B;&#x4F7F;&#x7528;<strong>&#x805A;&#x7C7B;&#xFF08;Clustering&#xFF09;</strong>&#xFF08;&#x65B9;&#x6CD5;&#xFF09;&#x6240;&#x83B7;&#x5F97;&#x7684;<strong>&#x7C07;&#xFF08;Cluster&#xFF09;</strong>&#xFF08;&#x7ED3;&#x679C;&#xFF09;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x662F;&#x65E0;&#x6CD5;&#x4EBA;&#x4E3A;&#x5730;&#x89C2;&#x5BDF;&#x51FA;&#x5176;&#x7279;&#x5F81;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5F97;&#x5230;&#x805A;&#x7C7B;&#x540E;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5BF9;&#x6570;&#x636E;&#x96C6;&#x6709;&#x65B0;&#x7684;&#x542F;&#x53D1;&#x3002;</p>\n<p><strong>&#x534A;&#x76D1;&#x7763;&#x5B66;&#x4E60;</strong>&#x7684;&#x6570;&#x636E;&#x96C6;&#x6BD4;&#x8F83;&#x7279;&#x6B8A;&#xFF0C;&#x662F;&#x90E8;&#x5206;&#x6709;&#x6807;&#x7B7E;&#x90E8;&#x5206;&#x65E0;&#x6807;&#x7B7E;&#x7684;&#x6570;&#x636E;&#x96C6;&#x3002;&#x7531;&#x4E8E;&#x6709;&#x6807;&#x7B7E;&#x7684;&#x6570;&#x636E;&#x5F88;&#x591A;&#x65F6;&#x5019;&#x9700;&#x8981;&#x82B1;&#x5927;&#x91CF;&#x4EBA;&#x529B;&#x7269;&#x529B;&#x53BB;&#x5206;&#x7C7B;&#x548C;&#x751F;&#x6210;&#xFF0C;&#x534A;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x4E5F;&#x88AB;&#x89C6;&#x4F5C;&#x5F53;&#x524D;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x91CD;&#x8981;&#x90E8;&#x5206;&#x3002;&#x534A;&#x76D1;&#x7763;&#x95EE;&#x9898;&#x5F80;&#x5F80;&#x4F1A;<strong>&#x5229;&#x7528;&#x4E00;&#x4E9B;&#x5047;&#x8BBE;</strong>&#xFF0C;&#x5C06;&#x534A;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x8F6C;&#x5316;&#x4E3A;&#x4F20;&#x7EDF;&#x7684;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x6216;&#x975E;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x95EE;&#x9898;&#x3002;</p>\n<h1 id=\"&#x4E0E;&#x7ED3;&#x679C;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;\">&#x4E0E;&#x7ED3;&#x679C;&#x76F8;&#x5173;&#x7684;&#x6982;&#x5FF5;</h1>\n<h2 id=\"&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;\">&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;</h2>\n<p>&#x8861;&#x91CF;&#x7ED3;&#x679C;&#x7CBE;&#x5EA6;&#x7684;&#x6709;&#x4E00;&#x4E9B;&#x76F8;&#x5173;&#x672F;&#x8BED;&#xFF0C;&#x9996;&#x5F53;&#x5176;&#x51B2;&#x7684;&#x662F;<strong>&#x51C6;&#x786E;&#x7387;&#xFF08;Accuracy&#xFF09;</strong>&#x3001;<strong>&#x7CBE;&#x786E;&#x7387;&#xFF08;Precision&#xFF09;</strong>&#x548C;<strong>&#x53EC;&#x56DE;&#x7387;&#xFF08;Recall&#xFF09;</strong>&#x3002;&#x8FD9;&#x4E09;&#x4E2A;&#x8BCD;&#x6C47;&#x5E94;&#x7528;&#x4E8E;<strong>&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;</strong>&#xFF1A;&#x5C06;&#x6570;&#x636E;&#x5206;&#x4E3A;<strong>&#x6B63;&#x4F8B;&#xFF08;Positive Class&#xFF09;</strong>&#x548C;<strong>&#x53CD;&#x4F8B;&#xFF08;Negative Class&#xFF09;</strong></p>\n<p>&#x4E00;&#x5F20;&#x5F62;&#x8C61;&#x7684;&#x7EF4;&#x57FA;&#x767E;&#x79D1;&#x56FE;&#xFF1A;<img src=\"https://upload.wikimedia.org/wikipedia/commons/2/26/Precisionrecall.svg\"></p>\n<p>&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;<strong>&#x51C6;&#x786E;&#x7387;</strong>&#x662F;&#x9884;&#x6D4B;&#x548C;&#x6807;&#x7B7E;&#x4E00;&#x81F4;&#x7684;&#x6837;&#x672C;&#x5728;&#x6240;&#x6709;&#x6837;&#x672C;&#x4E2D;&#x6240;&#x5360;&#x7684;&#x6BD4;&#x4F8B;&#xFF1B;<strong>&#x7CBE;&#x786E;&#x7387;</strong>&#x662F;&#x4F60;&#x9884;&#x6D4B;&#x4E3A;&#x6B63;&#x7C7B;&#x7684;&#x6570;&#x636E;&#x4E2D;&#xFF0C;&#x6709;&#x591A;&#x5C11;&#x786E;&#x5B9E;&#x662F;&#x6B63;&#x7C7B;&#xFF1B;<strong>&#x53EC;&#x56DE;&#x7387;</strong>&#x662F;&#x6240;&#x6709;&#x6B63;&#x7C7B;&#x7684;&#x6570;&#x636E;&#x4E2D;&#xFF0C;&#x4F60;&#x9884;&#x6D4B;&#x4E3A;&#x6B63;&#x7C7B;&#x7684;&#x6570;&#x636E;&#x6709;&#x591A;&#x5C11;&#x3002;&#x8FD9;&#x4E09;&#x4E2A;&#x6570;&#x636E;&#x5F80;&#x5F80;&#x7528;&#x6765;&#x8861;&#x91CF;&#x4E00;&#x4E2A;&#x4E8C;&#x5206;&#x7C7B;&#x7B97;&#x6CD5;&#x7684;&#x4F18;&#x52A3;&#x3002;</p>\n<h2 id=\"&#x56DE;&#x5F52;&#x95EE;&#x9898;\">&#x56DE;&#x5F52;&#x95EE;&#x9898;</h2>\n<p>&#x56DE;&#x5F52;&#x95EE;&#x9898;&#x5F80;&#x5F80;&#x4F1A;&#x901A;&#x8FC7;&#x8BA1;&#x7B97;<strong>&#x8BEF;&#x5DEE;&#xFF08;Error&#xFF09;</strong>&#x6765;&#x786E;&#x5B9A;&#x6A21;&#x578B;&#x7684;&#x7CBE;&#x786E;&#x6027;&#x3002;&#x8BEF;&#x5DEE;&#x7531;&#x4E8E;&#x8BAD;&#x7EC3;&#x96C6;&#x548C;&#x9A8C;&#x8BC1;&#x96C6;&#x7684;&#x4E0D;&#x540C;&#xFF0C;&#x4F1A;&#x88AB;&#x5206;&#x4E3A;<strong>&#x8BAD;&#x7EC3;&#x8BEF;&#x5DEE;&#xFF08;Training Error&#xFF09;</strong>&#x548C;<strong>&#x9A8C;&#x8BC1;&#x8BEF;&#x5DEE;&#xFF08;Validation Error&#xFF09;</strong>&#x3002;&#x4F46;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x6A21;&#x578B;&#x5E76;&#x4E0D;&#x662F;&#x8BEF;&#x5DEE;&#x8D8A;&#x5C0F;&#x5C31;&#x4E00;&#x5B9A;&#x8D8A;&#x597D;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x4EC5;&#x4EC5;&#x57FA;&#x4E8E;&#x8BEF;&#x5DEE;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x4F1A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;<strong>&#x8FC7;&#x62DF;&#x5408;&#xFF08;Overfitting&#xFF09;</strong>&#x7684;&#x6A21;&#x578B;&#xFF1B;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4E0D;&#x8003;&#x8651;&#x8BEF;&#x5DEE;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x4F1A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;<strong>&#x6B20;&#x62DF;&#x5408;&#xFF08;Underfitting&#xFF09;</strong>&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x7528;&#x56FE;&#x50CF;&#x6765;&#x8BF4;&#x7684;&#x8BDD;&#x5927;&#x81F4;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x7406;&#x89E3;&#xFF1A;</p>\n<p><img src=\"http://pingax.com/wp-content/uploads/2014/05/underfitting-overfitting.png\"></p>\n<p>&#x5982;&#x679C;&#x6A21;&#x578B;&#x5341;&#x5206;&#x7B80;&#x5355;&#xFF0C;&#x5F80;&#x5F80;&#x4F1A;&#x6B20;&#x62DF;&#x5408;&#xFF0C;&#x5BF9;&#x4E8E;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x548C;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x7684;&#x8BEF;&#x5DEE;&#x90FD;&#x4F1A;&#x5F88;&#x5927;&#xFF1B;&#x4F46;&#x5982;&#x679C;&#x6A21;&#x578B;&#x592A;&#x8FC7;&#x4E8E;&#x590D;&#x6742;&#xFF0C;&#x5F80;&#x5F80;&#x4F1A;&#x8FC7;&#x62DF;&#x5408;&#xFF0C;&#x90A3;&#x4E48;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x7684;&#x8BEF;&#x5DEE;&#x53EF;&#x80FD;&#x76F8;&#x5F53;&#x5C0F;&#xFF0C;&#x4F46;&#x662F;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x7684;&#x8BEF;&#x5DEE;&#x4F1A;&#x589E;&#x5927;&#x3002;&#x597D;&#x7684;&#x6A21;&#x578B;&#x5E94;&#x5F53;&#x5E73;&#x8861;&#x4E8E;&#x8FD9;&#x4E24;&#x8005;&#x4E4B;&#x95F4;&#xFF1A;</p>\n<p><img src=\"https://i.stack.imgur.com/S0tRm.png\"></p>\n<h2 id=\"&#x805A;&#x7C7B;&#x95EE;&#x9898;\">&#x805A;&#x7C7B;&#x95EE;&#x9898;</h2>\n<p>&#x805A;&#x7C7B;&#x95EE;&#x9898;&#x7684;&#x6807;&#x51C6;&#x4E00;&#x822C;&#x57FA;&#x4E8E;&#x8DDD;&#x79BB;&#xFF1A;<strong>&#x7C07;&#x5185;&#x8DDD;&#x79BB;&#xFF08;Intra-cluster Distance&#xFF09;</strong>&#x548C;<strong>&#x7C07;&#x95F4;&#x8DDD;&#x79BB;&#xFF08;Inter-cluster Distance&#xFF09;</strong>&#x3002;&#x6839;&#x636E;&#x5E38;&#x8BC6;&#x800C;&#x8A00;&#xFF0C;&#x7C07;&#x5185;&#x8DDD;&#x79BB;&#x662F;&#x8D8A;&#x5C0F;&#x8D8A;&#x597D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7C07;&#x5185;&#x7684;&#x5143;&#x7D20;&#x8D8A;&#x76F8;&#x4F3C;&#x8D8A;&#x597D;&#xFF1B;&#x800C;&#x7C07;&#x95F4;&#x8DDD;&#x79BB;&#x8D8A;&#x5927;&#x8D8A;&#x597D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x7C07;&#x95F4;&#xFF08;&#x4E0D;&#x540C;&#x7C07;&#xFF09;&#x5143;&#x7D20;&#x8D8A;&#x4E0D;&#x76F8;&#x540C;&#x8D8A;&#x597D;&#x3002;&#x4E00;&#x822C;&#x6765;&#x8BF4;&#xFF0C;&#x8861;&#x91CF;&#x805A;&#x7C7B;&#x95EE;&#x9898;&#x4F1A;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x7ED3;&#x5408;&#x7C07;&#x5185;&#x8DDD;&#x79BB;&#x548C;&#x7C07;&#x95F4;&#x8DDD;&#x79BB;&#x7684;&#x516C;&#x5F0F;&#x3002;</p>\n<h1 id=\"&#x603B;&#x7ED3;\">&#x603B;&#x7ED3;</h1>\n<p>&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x57FA;&#x672C;&#x6982;&#x5FF5;&#x5E76;&#x4E0D;&#x591A;&#xFF0C;&#x4F46;&#x641E;&#x6E05;&#x695A;&#x5177;&#x4F53;&#x6BCF;&#x4E2A;&#x7B97;&#x6CD5;&#x9002;&#x7528;&#x4E8E;&#x600E;&#x6837;&#x7684;&#x6570;&#x636E;&#x3001;&#x5E94;&#x5F53;&#x600E;&#x6837;&#x53BB;&#x8BC4;&#x4EF7;&#x662F;&#x6BD4;&#x8F83;&#x91CD;&#x8981;&#x7684;&#x4E00;&#x70B9;&#x3002;</p>\n<p><img src=\"http://osvlzj5nm.bkt.clouddn.com/17-7-30/20918915.jpg\"></p>\n<p>&#x5728;&#x4E4B;&#x540E;&#x7684;&#x4E13;&#x680F;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x66F4;&#x591A;&#x7684;&#x8BA8;&#x8BBA;&#x5177;&#x4F53;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x6BD4;&#x8F83;&#x5B83;&#x4EEC;&#x7684;&#x4F18;&#x52A3;&#xFF0C;&#x7814;&#x7A76;&#x5B83;&#x4EEC;&#x7684;&#x5C40;&#x9650;&#x6027;&#x548C;&#x9002;&#x7528;&#x6027;&#x3002;</p>\n<p>&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x5728;&#x4E86;&#x89E3;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x65F6;&#x5019;&#x628A;&#x4E00;&#x53E5;&#x8BDD;&#x6C38;&#x8FDC;&#x653E;&#x5728;&#x5FC3;&#x4E2D;&#xFF1A;</p>\n<blockquote>\n<p>All models are wrong but some are useful.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>尽管机器学习从分类上而言只是人工智能（也就是常说的AI）的分支之一，但其本身也是一个相当巨大的命题。在未来的一段时间里，我将花时间在专栏写一些我比较熟悉的机器学习相关的概念和算法，最主要的目的是为了梳理自己的知识体系，也是希望和大家分享学习的历程和感悟，以达到交流的目的。</p>\n<p>这两年大数据火了，机器学习、神经网络、数据挖掘、强化学习等等这些名词都火了，然而我常常在想，把这些名词挂在嘴边的我们，究竟能否在这个领域飞速发展的情况下，清楚地了解到自己说的每一个名词——谁是谁的分支，哪个和哪个又是同等关系或是没有关系的——在名词爆炸的状态下，想学什么，了解其基础概念是必不可少的。</p>\n<h1 id=\"与数据相关的概念\">与数据相关的概念</h1>\n<p>假如我们有一组天气数据，是来自全世界不同国家和地区的每日天气，内容包括最高温度、最低温度、平均湿度、风速之类的相关数据，例如数据的一部分是这样的：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>城市</th>\n<th>最高温度</th>\n<th>最低温度</th>\n<th>相对湿度</th>\n<th>某时刻风速</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>A市</td>\n<td>36℃</td>\n<td>28℃</td>\n<td>58%</td>\n<td>16.7km/h</td>\n</tr>\n<tr class=\"even\">\n<td>B市</td>\n<td>28℃</td>\n<td>17℃</td>\n<td>86%</td>\n<td>/</td>\n</tr>\n<tr class=\"odd\">\n<td>C市</td>\n<td>34℃</td>\n<td>29℃</td>\n<td>39%</td>\n<td>20.4km/h</td>\n</tr>\n</tbody>\n</table>\n<p>在这组数据中，我们将称A市、B市、C市等市以及其情况的总和称为<strong>数据集（data set）</strong>。表格中的每一行，也就是某城市和它的情况被称为一个<strong>样例（sample/instance）</strong>。表格中的每一列（不包括城市），例如最高温度、最低温度，被称为<strong>特征（feature/attribute）</strong>，而每一列中的具体数值，例如36℃ 、28℃，被称为<strong>属性值（attribute value）</strong>。数据中也可能会有<strong>缺失数据（missing data）</strong>，例如B市的某时刻风速，我们会将它视作缺失数据。</p>","more":"<p>如果我们想预测城市的天气，例如是晴朗还是阴雨天，这些数据是不够的，除了<strong>特征</strong>以外，我们还需要每个城市的具体天气情况，也就是通常语境下的结果。在机器学习中，它会被称为<strong>标签（label）</strong>，用于标记数据。值得注意的是，数据集中不一定包含标签信息，而这种区别会引起方法上的差别。我们可以给上述示例加上一组标签：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>城市</th>\n<th>天气</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>A市</td>\n<td>晴朗</td>\n</tr>\n<tr class=\"even\">\n<td>B市</td>\n<td>阴雨</td>\n</tr>\n<tr class=\"odd\">\n<td>C市</td>\n<td>晴朗</td>\n</tr>\n</tbody>\n</table>\n<p>视具体情况，用来进行机器学习的一个数据集往往会被分为两个数据集——<strong>训练数据（training data）</strong>和<strong>测试数据（testing data）</strong>。 顾名思义，训练数据在机器学习的过程中使用，目的是找出一套机器学习的方法；而测试数据用于判断找出的方法是否足够有效。如果在训练的过程中需要确定方法的准确度，有时会将训练数据分成<strong>训练集（training set）</strong>和<strong>验证集（validation set）</strong>——验证集合测试数据不同的地方在于验证集在训练过程中使用，而测试数据事实上是在模型建立后才被使用的。</p>\n<h1 id=\"与方法相关的概念\">与方法相关的概念</h1>\n<p>根据数据有没有标签，我们可以将机器学习分类为<strong>监督学习（Supervised Learning）</strong>、<strong>无监督学习（Unsupervised Learning）</strong>和<strong>半监督学习（Semi-Supervised Learning）</strong>。</p>\n<p><strong>监督学习</strong>是学习<strong>给定标签</strong>的数据集，比如说有一组病人，给出他们的详细资料，将他们是否已确诊癌症作为标签，然后预测一名（其他的）病人是否会患有癌症，就是一种典型的监督学习。监督学习中也有不同的分类，如果我们训练的结果是得癌症和不得癌症之类<strong>离散的类型</strong>，则称为<strong>分类（Classification）</strong>，如果只有两种类型的话可以进一步称为<strong>二分类（Binary Classification）</strong>；如果我们训练的结果是得癌症的概率为0.87之类<strong>连续的数字</strong>，则称为<strong>回归（Regression）</strong>。</p>\n<p><strong>无监督学习</strong>是学习<strong>没有标签的数据集</strong>，比如在分析大量语句之后，训练出一个模型将较为接近的词分为一类，而后可以根据一个新的词在句子中的用法（和其他信息）将这个词分入某一类中。其中比较微妙的地方在于，这种问题下使用<strong>聚类（Clustering）</strong>（方法）所获得的<strong>簇（Cluster）</strong>（结果），有时候是无法人为地观察出其特征的，但是在得到聚类后，可能会对数据集有新的启发。</p>\n<p><strong>半监督学习</strong>的数据集比较特殊，是部分有标签部分无标签的数据集。由于有标签的数据很多时候需要花大量人力物力去分类和生成，半监督学习也被视作当前机器学习的重要部分。半监督问题往往会<strong>利用一些假设</strong>，将半监督学习转化为传统的监督学习或非监督学习问题。</p>\n<h1 id=\"与结果相关的概念\">与结果相关的概念</h1>\n<h2 id=\"二分类问题\">二分类问题</h2>\n<p>衡量结果精度的有一些相关术语，首当其冲的是<strong>准确率（Accuracy）</strong>、<strong>精确率（Precision）</strong>和<strong>召回率（Recall）</strong>。这三个词汇应用于<strong>二分类问题</strong>：将数据分为<strong>正例（Positive Class）</strong>和<strong>反例（Negative Class）</strong></p>\n<p>一张形象的维基百科图：<img src=\"https://upload.wikimedia.org/wikipedia/commons/2/26/Precisionrecall.svg\"></p>\n<p>也就是说，<strong>准确率</strong>是预测和标签一致的样本在所有样本中所占的比例；<strong>精确率</strong>是你预测为正类的数据中，有多少确实是正类；<strong>召回率</strong>是所有正类的数据中，你预测为正类的数据有多少。这三个数据往往用来衡量一个二分类算法的优劣。</p>\n<h2 id=\"回归问题\">回归问题</h2>\n<p>回归问题往往会通过计算<strong>误差（Error）</strong>来确定模型的精确性。误差由于训练集和验证集的不同，会被分为<strong>训练误差（Training Error）</strong>和<strong>验证误差（Validation Error）</strong>。但值得注意的是，模型并不是误差越小就一定越好，因为如果仅仅基于误差，我们可能会得到一个<strong>过拟合（Overfitting）</strong>的模型；但是如果不考虑误差，我们可能会得到一个<strong>欠拟合（Underfitting）</strong>的模型，用图像来说的话大致可以这样理解：</p>\n<p><img src=\"http://pingax.com/wp-content/uploads/2014/05/underfitting-overfitting.png\"></p>\n<p>如果模型十分简单，往往会欠拟合，对于训练数据和测试数据的误差都会很大；但如果模型太过于复杂，往往会过拟合，那么训练数据的误差可能相当小，但是测试数据的误差会增大。好的模型应当平衡于这两者之间：</p>\n<p><img src=\"https://i.stack.imgur.com/S0tRm.png\"></p>\n<h2 id=\"聚类问题\">聚类问题</h2>\n<p>聚类问题的标准一般基于距离：<strong>簇内距离（Intra-cluster Distance）</strong>和<strong>簇间距离（Inter-cluster Distance）</strong>。根据常识而言，簇内距离是越小越好，也就是簇内的元素越相似越好；而簇间距离越大越好，也就是说簇间（不同簇）元素越不相同越好。一般来说，衡量聚类问题会给出一个结合簇内距离和簇间距离的公式。</p>\n<h1 id=\"总结\">总结</h1>\n<p>机器学习的基本概念并不多，但搞清楚具体每个算法适用于怎样的数据、应当怎样去评价是比较重要的一点。</p>\n<p><img src=\"http://osvlzj5nm.bkt.clouddn.com/17-7-30/20918915.jpg\"></p>\n<p>在之后的专栏中，我们将更多的讨论具体的算法，比较它们的优劣，研究它们的局限性和适用性。</p>\n<p>希望大家在了解机器学习的时候把一句话永远放在心中：</p>\n<blockquote>\n<p>All models are wrong but some are useful.</p>\n</blockquote>"},{"title":"[LeetCode] 2. Add Two Numbers","date":"2018-07-03T13:05:00.000Z","_content":"\n## 题目\n\n[LeetCode链接](https://leetcode.com/problems/add-two-numbers/description/)\n\nYou are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order** and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n**Example**\n\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n\n<!--more-->\n\n\n\n## 解题报告\n\n### 思路\n\n这题算是一个高精度加法的简化版本。简单来说，这个加法其实和列竖式的想法是一致的：先把两边的数字加起来，如果进位了就把进位写上。\n\n\n\n### 方法一：暴力相加\n\n暴力相加使用了小学时候学习的竖式方法。把两个数字加起来看作这位，如果有进位就加上进位，要是又进位了的话就再记上进位；如果一边加完了，就对另一边的数字做同样的事情，把数字加上进位；最后如果还剩下进位就再写一位。\n\n但是这种方法很不幸 TLE 了。虽然从复杂度角度看可能和第二种方法没有太大的差距（量级相同，但是比较次数会多很多次，也就是常数上的不同），说明这题还是严谨地卡了常数……（也可能是 Python 的时间比较吃紧）\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        root = ListNode((l1.val + l2.val) % 10) \n        s = (l1.val + l2.val) // 10\n        node = root\n        \n        while l1.next and l2.next :\n            l1 = l1.next\n            l2 = l2.next\n            node.next = ListNode((l1.val + l2.val + s) % 10) \n            s = (l1.val + l2.val + s) // 10\n            node = node.next\n            \n        while l1.next:\n            node.next = ListNode((l1.val + s) % 10) \n            s = (l1.val + s) // 10\n            node = node.next\n            \n        while l2.next:\n            node.next = ListNode((l2.val + s) % 10) \n            s = (l2.val + s) // 10\n            node = node.next\n        \n        if s:\n            node.next = ListNode(s)\n            \n        return root\n```\n\n\n\n### 方法二：合并循环\n\n仔细观察第一种解法会发现这四个循环是可以合并到同一个循环中的，也就是说只要两边的数字任意一个还有，或是进位还有的情况下，这个循环都需要继续。这种做法因为循环节中使用了` or` 而非上一种解法中的`and`性能有所提高（起码不 TLE 了）。\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        root = ListNode(0) \n        node = root\n        c = 0\n        while l1 or l2 or c:\n            if l1:\n                c = c + l1.val\n                l1 = l1.next\n            if l2:\n                c = c + l2.val\n                l2 = l2.next\n            node.next = ListNode(c % 10)\n            c = c // 10\n            node = node.next\n                \n        return root.next\n```\n\n\n\n## 结语\n\n了解如何使程序更快更简洁不仅是 Python 的禅，更是面试的禅呀！","source":"_posts/leetcode-2.md","raw":"---\ntitle: '[LeetCode] 2. Add Two Numbers'\ndate: 2018-07-03 21:05:00\ncategory: 解题报告\ntags: \n- 解题报告\n- LeetCode\n- Python\n- 数组\n- 模拟\n\n---\n\n## 题目\n\n[LeetCode链接](https://leetcode.com/problems/add-two-numbers/description/)\n\nYou are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order** and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n**Example**\n\n```\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n```\n\n<!--more-->\n\n\n\n## 解题报告\n\n### 思路\n\n这题算是一个高精度加法的简化版本。简单来说，这个加法其实和列竖式的想法是一致的：先把两边的数字加起来，如果进位了就把进位写上。\n\n\n\n### 方法一：暴力相加\n\n暴力相加使用了小学时候学习的竖式方法。把两个数字加起来看作这位，如果有进位就加上进位，要是又进位了的话就再记上进位；如果一边加完了，就对另一边的数字做同样的事情，把数字加上进位；最后如果还剩下进位就再写一位。\n\n但是这种方法很不幸 TLE 了。虽然从复杂度角度看可能和第二种方法没有太大的差距（量级相同，但是比较次数会多很多次，也就是常数上的不同），说明这题还是严谨地卡了常数……（也可能是 Python 的时间比较吃紧）\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        root = ListNode((l1.val + l2.val) % 10) \n        s = (l1.val + l2.val) // 10\n        node = root\n        \n        while l1.next and l2.next :\n            l1 = l1.next\n            l2 = l2.next\n            node.next = ListNode((l1.val + l2.val + s) % 10) \n            s = (l1.val + l2.val + s) // 10\n            node = node.next\n            \n        while l1.next:\n            node.next = ListNode((l1.val + s) % 10) \n            s = (l1.val + s) // 10\n            node = node.next\n            \n        while l2.next:\n            node.next = ListNode((l2.val + s) % 10) \n            s = (l2.val + s) // 10\n            node = node.next\n        \n        if s:\n            node.next = ListNode(s)\n            \n        return root\n```\n\n\n\n### 方法二：合并循环\n\n仔细观察第一种解法会发现这四个循环是可以合并到同一个循环中的，也就是说只要两边的数字任意一个还有，或是进位还有的情况下，这个循环都需要继续。这种做法因为循环节中使用了` or` 而非上一种解法中的`and`性能有所提高（起码不 TLE 了）。\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        root = ListNode(0) \n        node = root\n        c = 0\n        while l1 or l2 or c:\n            if l1:\n                c = c + l1.val\n                l1 = l1.next\n            if l2:\n                c = c + l2.val\n                l2 = l2.next\n            node.next = ListNode(c % 10)\n            c = c // 10\n            node = node.next\n                \n        return root.next\n```\n\n\n\n## 结语\n\n了解如何使程序更快更简洁不仅是 Python 的禅，更是面试的禅呀！","slug":"leetcode-2","published":1,"updated":"2018-07-03T14:47:43.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4l000pxtd3galvldet","content":"<h2 id=\"&#x9898;&#x76EE;\">&#x9898;&#x76EE;</h2>\n<p><a href=\"https://leetcode.com/problems/add-two-numbers/description/\" target=\"_blank\" rel=\"noopener\">LeetCode&#x94FE;&#x63A5;</a></p>\n<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p><strong>Example</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"&#x89E3;&#x9898;&#x62A5;&#x544A;\">&#x89E3;&#x9898;&#x62A5;&#x544A;</h2>\n<h3 id=\"&#x601D;&#x8DEF;\">&#x601D;&#x8DEF;</h3>\n<p>&#x8FD9;&#x9898;&#x7B97;&#x662F;&#x4E00;&#x4E2A;&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;&#x7684;&#x7B80;&#x5316;&#x7248;&#x672C;&#x3002;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x52A0;&#x6CD5;&#x5176;&#x5B9E;&#x548C;&#x5217;&#x7AD6;&#x5F0F;&#x7684;&#x60F3;&#x6CD5;&#x662F;&#x4E00;&#x81F4;&#x7684;&#xFF1A;&#x5148;&#x628A;&#x4E24;&#x8FB9;&#x7684;&#x6570;&#x5B57;&#x52A0;&#x8D77;&#x6765;&#xFF0C;&#x5982;&#x679C;&#x8FDB;&#x4F4D;&#x4E86;&#x5C31;&#x628A;&#x8FDB;&#x4F4D;&#x5199;&#x4E0A;&#x3002;</p>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E00;&#x66B4;&#x529B;&#x76F8;&#x52A0;\">&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;&#x66B4;&#x529B;&#x76F8;&#x52A0;</h3>\n<p>&#x66B4;&#x529B;&#x76F8;&#x52A0;&#x4F7F;&#x7528;&#x4E86;&#x5C0F;&#x5B66;&#x65F6;&#x5019;&#x5B66;&#x4E60;&#x7684;&#x7AD6;&#x5F0F;&#x65B9;&#x6CD5;&#x3002;&#x628A;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x52A0;&#x8D77;&#x6765;&#x770B;&#x4F5C;&#x8FD9;&#x4F4D;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x8FDB;&#x4F4D;&#x5C31;&#x52A0;&#x4E0A;&#x8FDB;&#x4F4D;&#xFF0C;&#x8981;&#x662F;&#x53C8;&#x8FDB;&#x4F4D;&#x4E86;&#x7684;&#x8BDD;&#x5C31;&#x518D;&#x8BB0;&#x4E0A;&#x8FDB;&#x4F4D;&#xFF1B;&#x5982;&#x679C;&#x4E00;&#x8FB9;&#x52A0;&#x5B8C;&#x4E86;&#xFF0C;&#x5C31;&#x5BF9;&#x53E6;&#x4E00;&#x8FB9;&#x7684;&#x6570;&#x5B57;&#x505A;&#x540C;&#x6837;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x628A;&#x6570;&#x5B57;&#x52A0;&#x4E0A;&#x8FDB;&#x4F4D;&#xFF1B;&#x6700;&#x540E;&#x5982;&#x679C;&#x8FD8;&#x5269;&#x4E0B;&#x8FDB;&#x4F4D;&#x5C31;&#x518D;&#x5199;&#x4E00;&#x4F4D;&#x3002;</p>\n<p>&#x4F46;&#x662F;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5F88;&#x4E0D;&#x5E78; TLE &#x4E86;&#x3002;&#x867D;&#x7136;&#x4ECE;&#x590D;&#x6742;&#x5EA6;&#x89D2;&#x5EA6;&#x770B;&#x53EF;&#x80FD;&#x548C;&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x592A;&#x5927;&#x7684;&#x5DEE;&#x8DDD;&#xFF08;&#x91CF;&#x7EA7;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x6BD4;&#x8F83;&#x6B21;&#x6570;&#x4F1A;&#x591A;&#x5F88;&#x591A;&#x6B21;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5E38;&#x6570;&#x4E0A;&#x7684;&#x4E0D;&#x540C;&#xFF09;&#xFF0C;&#x8BF4;&#x660E;&#x8FD9;&#x9898;&#x8FD8;&#x662F;&#x4E25;&#x8C28;&#x5730;&#x5361;&#x4E86;&#x5E38;&#x6570;&#x2026;&#x2026;&#xFF08;&#x4E5F;&#x53EF;&#x80FD;&#x662F; Python &#x7684;&#x65F6;&#x95F4;&#x6BD4;&#x8F83;&#x5403;&#x7D27;&#xFF09;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addTwoNumbers</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type l1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type l2: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        root = ListNode((l1.val + l2.val) % <span class=\"number\">10</span>) </span><br><span class=\"line\">        s = (l1.val + l2.val) // <span class=\"number\">10</span></span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1.next <span class=\"keyword\">and</span> l2.next :</span><br><span class=\"line\">            l1 = l1.next</span><br><span class=\"line\">            l2 = l2.next</span><br><span class=\"line\">            node.next = ListNode((l1.val + l2.val + s) % <span class=\"number\">10</span>) </span><br><span class=\"line\">            s = (l1.val + l2.val + s) // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1.next:</span><br><span class=\"line\">            node.next = ListNode((l1.val + s) % <span class=\"number\">10</span>) </span><br><span class=\"line\">            s = (l1.val + s) // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l2.next:</span><br><span class=\"line\">            node.next = ListNode((l2.val + s) % <span class=\"number\">10</span>) </span><br><span class=\"line\">            s = (l2.val + s) // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> s:</span><br><span class=\"line\">            node.next = ListNode(s)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n<h3 id=\"&#x65B9;&#x6CD5;&#x4E8C;&#x5408;&#x5E76;&#x5FAA;&#x73AF;\">&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;&#x5408;&#x5E76;&#x5FAA;&#x73AF;</h3>\n<p>&#x4ED4;&#x7EC6;&#x89C2;&#x5BDF;&#x7B2C;&#x4E00;&#x79CD;&#x89E3;&#x6CD5;&#x4F1A;&#x53D1;&#x73B0;&#x8FD9;&#x56DB;&#x4E2A;&#x5FAA;&#x73AF;&#x662F;&#x53EF;&#x4EE5;&#x5408;&#x5E76;&#x5230;&#x540C;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x4E2D;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x53EA;&#x8981;&#x4E24;&#x8FB9;&#x7684;&#x6570;&#x5B57;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x8FD8;&#x6709;&#xFF0C;&#x6216;&#x662F;&#x8FDB;&#x4F4D;&#x8FD8;&#x6709;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x5FAA;&#x73AF;&#x90FD;&#x9700;&#x8981;&#x7EE7;&#x7EED;&#x3002;&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x56E0;&#x4E3A;&#x5FAA;&#x73AF;&#x8282;&#x4E2D;&#x4F7F;&#x7528;&#x4E86;<code>or</code> &#x800C;&#x975E;&#x4E0A;&#x4E00;&#x79CD;&#x89E3;&#x6CD5;&#x4E2D;&#x7684;<code>and</code>&#x6027;&#x80FD;&#x6709;&#x6240;&#x63D0;&#x9AD8;&#xFF08;&#x8D77;&#x7801;&#x4E0D; TLE &#x4E86;&#xFF09;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addTwoNumbers</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type l1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type l2: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        root = ListNode(<span class=\"number\">0</span>) </span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        c = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1 <span class=\"keyword\">or</span> l2 <span class=\"keyword\">or</span> c:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1:</span><br><span class=\"line\">                c = c + l1.val</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l2:</span><br><span class=\"line\">                c = c + l2.val</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            node.next = ListNode(c % <span class=\"number\">10</span>)</span><br><span class=\"line\">            c = c // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x7ED3;&#x8BED;\">&#x7ED3;&#x8BED;</h2>\n<p>&#x4E86;&#x89E3;&#x5982;&#x4F55;&#x4F7F;&#x7A0B;&#x5E8F;&#x66F4;&#x5FEB;&#x66F4;&#x7B80;&#x6D01;&#x4E0D;&#x4EC5;&#x662F; Python &#x7684;&#x7985;&#xFF0C;&#x66F4;&#x662F;&#x9762;&#x8BD5;&#x7684;&#x7985;&#x5440;&#xFF01;</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\">题目</h2>\n<p><a href=\"https://leetcode.com/problems/add-two-numbers/description/\" target=\"_blank\" rel=\"noopener\">LeetCode链接</a></p>\n<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p><strong>Example</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class=\"line\">Output: 7 -&gt; 0 -&gt; 8</span><br><span class=\"line\">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"解题报告\">解题报告</h2>\n<h3 id=\"思路\">思路</h3>\n<p>这题算是一个高精度加法的简化版本。简单来说，这个加法其实和列竖式的想法是一致的：先把两边的数字加起来，如果进位了就把进位写上。</p>\n<h3 id=\"方法一暴力相加\">方法一：暴力相加</h3>\n<p>暴力相加使用了小学时候学习的竖式方法。把两个数字加起来看作这位，如果有进位就加上进位，要是又进位了的话就再记上进位；如果一边加完了，就对另一边的数字做同样的事情，把数字加上进位；最后如果还剩下进位就再写一位。</p>\n<p>但是这种方法很不幸 TLE 了。虽然从复杂度角度看可能和第二种方法没有太大的差距（量级相同，但是比较次数会多很多次，也就是常数上的不同），说明这题还是严谨地卡了常数……（也可能是 Python 的时间比较吃紧）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addTwoNumbers</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type l1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type l2: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        root = ListNode((l1.val + l2.val) % <span class=\"number\">10</span>) </span><br><span class=\"line\">        s = (l1.val + l2.val) // <span class=\"number\">10</span></span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1.next <span class=\"keyword\">and</span> l2.next :</span><br><span class=\"line\">            l1 = l1.next</span><br><span class=\"line\">            l2 = l2.next</span><br><span class=\"line\">            node.next = ListNode((l1.val + l2.val + s) % <span class=\"number\">10</span>) </span><br><span class=\"line\">            s = (l1.val + l2.val + s) // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1.next:</span><br><span class=\"line\">            node.next = ListNode((l1.val + s) % <span class=\"number\">10</span>) </span><br><span class=\"line\">            s = (l1.val + s) // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l2.next:</span><br><span class=\"line\">            node.next = ListNode((l2.val + s) % <span class=\"number\">10</span>) </span><br><span class=\"line\">            s = (l2.val + s) // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> s:</span><br><span class=\"line\">            node.next = ListNode(s)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二合并循环\">方法二：合并循环</h3>\n<p>仔细观察第一种解法会发现这四个循环是可以合并到同一个循环中的，也就是说只要两边的数字任意一个还有，或是进位还有的情况下，这个循环都需要继续。这种做法因为循环节中使用了<code>or</code> 而非上一种解法中的<code>and</code>性能有所提高（起码不 TLE 了）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addTwoNumbers</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type l1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type l2: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        root = ListNode(<span class=\"number\">0</span>) </span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        c = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1 <span class=\"keyword\">or</span> l2 <span class=\"keyword\">or</span> c:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1:</span><br><span class=\"line\">                c = c + l1.val</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l2:</span><br><span class=\"line\">                c = c + l2.val</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            node.next = ListNode(c % <span class=\"number\">10</span>)</span><br><span class=\"line\">            c = c // <span class=\"number\">10</span></span><br><span class=\"line\">            node = node.next</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>了解如何使程序更快更简洁不仅是 Python 的禅，更是面试的禅呀！</p>"},{"title":"TLDR pages：简易版的 man pages","date":"2017-09-18T16:00:00.000Z","_content":"\n\n\n# 什么是TLDR？\n\n## TLDR 它本身\n\ntl;dr 是一个网络词汇，和十动然拒这类差不多，是个缩写。它的全称是「Too Long; Don't Read」，翻译成中文的话就叫「太长不看」。它兴起于一些论坛，为了说明「楼主你的破文章又臭又长」，不过后来有许多文章的开头也用\n\n## 这个东西为啥叫太长不看？\n\n一个叫「太长不看」的命令行工具显然是解决一些令程序员一个脑袋两个大的太长的东西，而这个东西就是 **Linux man pages**。它到底有多长呢，man pages的官方压缩包是 2M 多的大小，解压后是 16M。 16M 确实不算大了，然而这 16M 可是纯文本啊。用来做类比的话，一本50万字的中文小说变成纯文本文件之后也就那么 1M 多，可想而知这甚至是全英文 man pages 有多长了。\n\n## 我们却需要它\n\n作为程序员有时又十分需要 man pages。 虽然它长，你又不得不去读它：比如说，你知道 ssh 的基本用法是\n\n```shell\nssh username@remote_host\n```\n\n然而当你想换个端口或是利用私钥登入服务器的时候就傻眼了，不得不打开 man pages：\n\n```\nSH(1)                    BSD General Commands Manual                   SSH(1)\n\nNAME\n     ssh -- OpenSSH SSH client (remote login program)\n\nSYNOPSIS\n     ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]\n         [-D [bind_address:]port] [-E log_file] [-e escape_char]\n         [-F configfile] [-I pkcs11] [-i identity_file]\n         [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]\n         [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]\n         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]\n         [user@]hostname [command]\n\nDESCRIPTION\n```\n\n以下省略一万字……\n\n<!--more-->\n\n于是想找如何使用私钥登录的你感到了一阵绝望……（虽然它确实存在于[-i identity_file]这里，你找到了吗？）\n\n## 所以就有了 TLDR\n\ntldr 很好地解决了这个问题，把 man pages 中最常用的选项用更简单的方式叙述了出来：\n\n```shell\n$ tldr ssh\n\n  ssh\n\n  Secure Shell is a protocol used to securely log onto remote systems.\n  It can be used for logging or executing commands on a remote server.\n\n  - Connect to a remote server:\n    ssh username@remote_host\n\n  - Connect to a remote server with a specific identity (private key):\n    ssh -i path/to/key_file username@remote_host\n\n  - Connect to a remote server using a specific port:\n    ssh username@remote_host -p 2222\n\n  - Run a command on a remote server:\n    ssh remote_host command -with -flags\n\n  - SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):\n    ssh -D 9999 -C username@remote_host\n\n  - SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80):\n    ssh -L 9999:slashdot.org:80 username@remote_host\n\n  - Enable the option to forward the authentication information to the remote machine (see man ssh_config for available options):\n    ssh -o \"ForwardAgent=yes\" username@remote_host\n```\n\n是的，tldr 的 ssh page 就这么长，而且你几乎还能一下就找到怎么使用私钥登录。虽然它确实非常不全，但是它可以解决你绝大部分想查 man 的问题。\n\n## 而且它是社区驱动的呀！\n\n它是一个开源的项目，每个人都可以为它贡献或修改其中的 page。如果你想去围观这个作品，可以到 [**tldr**](https://github.com/tldr-pages/tldr) 这个 GitHub 代码仓库去做出一些自己的贡献。\n\n\n\n# 安装和使用\n\n## 网页版\n\n最简单的使用方法是打开[网页版](https://tldr.ostera.io/)。在上方的搜索框中找到你想查看的命令。例如：\n\n![网页版的 tldr](http://osvlzj5nm.bkt.clouddn.com/17-9-20/91829078.jpg)\n\n\n\n## Node.js 版本\n\nTLDR 最初的版本用 Node.js 写成，所以官方最为推荐的安装方法是：\n\n```shell\nnpm install -g tldr\n```\n\n如果你不了解以下一接中提到的任何一种编程语言/包管理器（当然我觉得这种情况也不需要这个破软件就是了），我们也在这里推荐使用 npm 安装。如果你还没有 npm， 可以到[这里](https://www.npmjs.com/get-npm)下载。\n\n\n\n## 其他版本\n\nTLDR 的官网也给除了其他一些安装方式：\n\n| Client                                   | Installation instructions                |\n| ---------------------------------------- | ---------------------------------------- |\n| [Ruby client](https://github.com/YellowApple/tldrb) | `gem install tldrb`                      |\n| [Haskell client](https://github.com/psibi/tldr-hs) | `stack install tldr`                     |\n| [Python client](https://github.com/lord63/tldr.py) | `pip install tldr.py`                    |\n| [C++ client](https://github.com/tldr-pages/tldr-cpp-client) | `brew install tldr`                      |\n| [Android client](https://github.com/gianasista/tldr-viewer) | [tldr-viewer on Google Play](https://play.google.com/store/apps/details?id=de.gianasista.tldr_viewer) |\n| [iOS client](https://github.com/freesuraj/TLDR) | [TLDR Man Page in App Store](https://appsto.re/sg/IQ0-_.i) |\n| [Dash for OSX](https://github.com/Moddus/tldr-python-dash-docset) | open `Preferences > Downloads > User Contributed` and find `tldr pages` in the list |\n| [Bash client](https://github.com/pepa65/tldr-bash-client) | `bpkg install pepa65/tldr`               |\n\n##使用方法\n\n简单而言，你只要在命令行输入 `tldr` 加上任何命令即可，例如 `tldr ssh` 或是 `tldr tar`，你就可以获得在第一节中所见的简洁的介绍啦！","source":"_posts/tldr-pages.md","raw":"---\ntitle: TLDR pages：简易版的 man pages\ndate: 2017-09-19\ncategory: 软件推荐\ntags: \n- 软件\n- 命令行\n---\n\n\n\n# 什么是TLDR？\n\n## TLDR 它本身\n\ntl;dr 是一个网络词汇，和十动然拒这类差不多，是个缩写。它的全称是「Too Long; Don't Read」，翻译成中文的话就叫「太长不看」。它兴起于一些论坛，为了说明「楼主你的破文章又臭又长」，不过后来有许多文章的开头也用\n\n## 这个东西为啥叫太长不看？\n\n一个叫「太长不看」的命令行工具显然是解决一些令程序员一个脑袋两个大的太长的东西，而这个东西就是 **Linux man pages**。它到底有多长呢，man pages的官方压缩包是 2M 多的大小，解压后是 16M。 16M 确实不算大了，然而这 16M 可是纯文本啊。用来做类比的话，一本50万字的中文小说变成纯文本文件之后也就那么 1M 多，可想而知这甚至是全英文 man pages 有多长了。\n\n## 我们却需要它\n\n作为程序员有时又十分需要 man pages。 虽然它长，你又不得不去读它：比如说，你知道 ssh 的基本用法是\n\n```shell\nssh username@remote_host\n```\n\n然而当你想换个端口或是利用私钥登入服务器的时候就傻眼了，不得不打开 man pages：\n\n```\nSH(1)                    BSD General Commands Manual                   SSH(1)\n\nNAME\n     ssh -- OpenSSH SSH client (remote login program)\n\nSYNOPSIS\n     ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]\n         [-D [bind_address:]port] [-E log_file] [-e escape_char]\n         [-F configfile] [-I pkcs11] [-i identity_file]\n         [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]\n         [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]\n         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]\n         [user@]hostname [command]\n\nDESCRIPTION\n```\n\n以下省略一万字……\n\n<!--more-->\n\n于是想找如何使用私钥登录的你感到了一阵绝望……（虽然它确实存在于[-i identity_file]这里，你找到了吗？）\n\n## 所以就有了 TLDR\n\ntldr 很好地解决了这个问题，把 man pages 中最常用的选项用更简单的方式叙述了出来：\n\n```shell\n$ tldr ssh\n\n  ssh\n\n  Secure Shell is a protocol used to securely log onto remote systems.\n  It can be used for logging or executing commands on a remote server.\n\n  - Connect to a remote server:\n    ssh username@remote_host\n\n  - Connect to a remote server with a specific identity (private key):\n    ssh -i path/to/key_file username@remote_host\n\n  - Connect to a remote server using a specific port:\n    ssh username@remote_host -p 2222\n\n  - Run a command on a remote server:\n    ssh remote_host command -with -flags\n\n  - SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):\n    ssh -D 9999 -C username@remote_host\n\n  - SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80):\n    ssh -L 9999:slashdot.org:80 username@remote_host\n\n  - Enable the option to forward the authentication information to the remote machine (see man ssh_config for available options):\n    ssh -o \"ForwardAgent=yes\" username@remote_host\n```\n\n是的，tldr 的 ssh page 就这么长，而且你几乎还能一下就找到怎么使用私钥登录。虽然它确实非常不全，但是它可以解决你绝大部分想查 man 的问题。\n\n## 而且它是社区驱动的呀！\n\n它是一个开源的项目，每个人都可以为它贡献或修改其中的 page。如果你想去围观这个作品，可以到 [**tldr**](https://github.com/tldr-pages/tldr) 这个 GitHub 代码仓库去做出一些自己的贡献。\n\n\n\n# 安装和使用\n\n## 网页版\n\n最简单的使用方法是打开[网页版](https://tldr.ostera.io/)。在上方的搜索框中找到你想查看的命令。例如：\n\n![网页版的 tldr](http://osvlzj5nm.bkt.clouddn.com/17-9-20/91829078.jpg)\n\n\n\n## Node.js 版本\n\nTLDR 最初的版本用 Node.js 写成，所以官方最为推荐的安装方法是：\n\n```shell\nnpm install -g tldr\n```\n\n如果你不了解以下一接中提到的任何一种编程语言/包管理器（当然我觉得这种情况也不需要这个破软件就是了），我们也在这里推荐使用 npm 安装。如果你还没有 npm， 可以到[这里](https://www.npmjs.com/get-npm)下载。\n\n\n\n## 其他版本\n\nTLDR 的官网也给除了其他一些安装方式：\n\n| Client                                   | Installation instructions                |\n| ---------------------------------------- | ---------------------------------------- |\n| [Ruby client](https://github.com/YellowApple/tldrb) | `gem install tldrb`                      |\n| [Haskell client](https://github.com/psibi/tldr-hs) | `stack install tldr`                     |\n| [Python client](https://github.com/lord63/tldr.py) | `pip install tldr.py`                    |\n| [C++ client](https://github.com/tldr-pages/tldr-cpp-client) | `brew install tldr`                      |\n| [Android client](https://github.com/gianasista/tldr-viewer) | [tldr-viewer on Google Play](https://play.google.com/store/apps/details?id=de.gianasista.tldr_viewer) |\n| [iOS client](https://github.com/freesuraj/TLDR) | [TLDR Man Page in App Store](https://appsto.re/sg/IQ0-_.i) |\n| [Dash for OSX](https://github.com/Moddus/tldr-python-dash-docset) | open `Preferences > Downloads > User Contributed` and find `tldr pages` in the list |\n| [Bash client](https://github.com/pepa65/tldr-bash-client) | `bpkg install pepa65/tldr`               |\n\n##使用方法\n\n简单而言，你只要在命令行输入 `tldr` 加上任何命令即可，例如 `tldr ssh` 或是 `tldr tar`，你就可以获得在第一节中所见的简洁的介绍啦！","slug":"tldr-pages","published":1,"updated":"2018-07-03T13:44:30.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4n000txtd31f9zc4tc","content":"<h1 id=\"&#x4EC0;&#x4E48;&#x662F;tldr\">&#x4EC0;&#x4E48;&#x662F;TLDR&#xFF1F;</h1>\n<h2 id=\"tldr-&#x5B83;&#x672C;&#x8EAB;\">TLDR &#x5B83;&#x672C;&#x8EAB;</h2>\n<p>tl;dr &#x662F;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x8BCD;&#x6C47;&#xFF0C;&#x548C;&#x5341;&#x52A8;&#x7136;&#x62D2;&#x8FD9;&#x7C7B;&#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x662F;&#x4E2A;&#x7F29;&#x5199;&#x3002;&#x5B83;&#x7684;&#x5168;&#x79F0;&#x662F;&#x300C;Too Long; Don&#x2019;t Read&#x300D;&#xFF0C;&#x7FFB;&#x8BD1;&#x6210;&#x4E2D;&#x6587;&#x7684;&#x8BDD;&#x5C31;&#x53EB;&#x300C;&#x592A;&#x957F;&#x4E0D;&#x770B;&#x300D;&#x3002;&#x5B83;&#x5174;&#x8D77;&#x4E8E;&#x4E00;&#x4E9B;&#x8BBA;&#x575B;&#xFF0C;&#x4E3A;&#x4E86;&#x8BF4;&#x660E;&#x300C;&#x697C;&#x4E3B;&#x4F60;&#x7684;&#x7834;&#x6587;&#x7AE0;&#x53C8;&#x81ED;&#x53C8;&#x957F;&#x300D;&#xFF0C;&#x4E0D;&#x8FC7;&#x540E;&#x6765;&#x6709;&#x8BB8;&#x591A;&#x6587;&#x7AE0;&#x7684;&#x5F00;&#x5934;&#x4E5F;&#x7528;</p>\n<h2 id=\"&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#x4E3A;&#x5565;&#x53EB;&#x592A;&#x957F;&#x4E0D;&#x770B;\">&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#x4E3A;&#x5565;&#x53EB;&#x592A;&#x957F;&#x4E0D;&#x770B;&#xFF1F;</h2>\n<p>&#x4E00;&#x4E2A;&#x53EB;&#x300C;&#x592A;&#x957F;&#x4E0D;&#x770B;&#x300D;&#x7684;&#x547D;&#x4EE4;&#x884C;&#x5DE5;&#x5177;&#x663E;&#x7136;&#x662F;&#x89E3;&#x51B3;&#x4E00;&#x4E9B;&#x4EE4;&#x7A0B;&#x5E8F;&#x5458;&#x4E00;&#x4E2A;&#x8111;&#x888B;&#x4E24;&#x4E2A;&#x5927;&#x7684;&#x592A;&#x957F;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#x5C31;&#x662F; <strong>Linux man pages</strong>&#x3002;&#x5B83;&#x5230;&#x5E95;&#x6709;&#x591A;&#x957F;&#x5462;&#xFF0C;man pages&#x7684;&#x5B98;&#x65B9;&#x538B;&#x7F29;&#x5305;&#x662F; 2M &#x591A;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x89E3;&#x538B;&#x540E;&#x662F; 16M&#x3002; 16M &#x786E;&#x5B9E;&#x4E0D;&#x7B97;&#x5927;&#x4E86;&#xFF0C;&#x7136;&#x800C;&#x8FD9; 16M &#x53EF;&#x662F;&#x7EAF;&#x6587;&#x672C;&#x554A;&#x3002;&#x7528;&#x6765;&#x505A;&#x7C7B;&#x6BD4;&#x7684;&#x8BDD;&#xFF0C;&#x4E00;&#x672C;50&#x4E07;&#x5B57;&#x7684;&#x4E2D;&#x6587;&#x5C0F;&#x8BF4;&#x53D8;&#x6210;&#x7EAF;&#x6587;&#x672C;&#x6587;&#x4EF6;&#x4E4B;&#x540E;&#x4E5F;&#x5C31;&#x90A3;&#x4E48; 1M &#x591A;&#xFF0C;&#x53EF;&#x60F3;&#x800C;&#x77E5;&#x8FD9;&#x751A;&#x81F3;&#x662F;&#x5168;&#x82F1;&#x6587; man pages &#x6709;&#x591A;&#x957F;&#x4E86;&#x3002;</p>\n<h2 id=\"&#x6211;&#x4EEC;&#x5374;&#x9700;&#x8981;&#x5B83;\">&#x6211;&#x4EEC;&#x5374;&#x9700;&#x8981;&#x5B83;</h2>\n<p>&#x4F5C;&#x4E3A;&#x7A0B;&#x5E8F;&#x5458;&#x6709;&#x65F6;&#x53C8;&#x5341;&#x5206;&#x9700;&#x8981; man pages&#x3002; &#x867D;&#x7136;&#x5B83;&#x957F;&#xFF0C;&#x4F60;&#x53C8;&#x4E0D;&#x5F97;&#x4E0D;&#x53BB;&#x8BFB;&#x5B83;&#xFF1A;&#x6BD4;&#x5982;&#x8BF4;&#xFF0C;&#x4F60;&#x77E5;&#x9053; ssh &#x7684;&#x57FA;&#x672C;&#x7528;&#x6CD5;&#x662F;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@remote_host</span><br></pre></td></tr></table></figure>\n<p>&#x7136;&#x800C;&#x5F53;&#x4F60;&#x60F3;&#x6362;&#x4E2A;&#x7AEF;&#x53E3;&#x6216;&#x662F;&#x5229;&#x7528;&#x79C1;&#x94A5;&#x767B;&#x5165;&#x670D;&#x52A1;&#x5668;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x50BB;&#x773C;&#x4E86;&#xFF0C;&#x4E0D;&#x5F97;&#x4E0D;&#x6253;&#x5F00; man pages&#xFF1A;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SH(1)                    BSD General Commands Manual                   SSH(1)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">     ssh -- OpenSSH SSH client (remote login program)</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</span><br><span class=\"line\">         [-D [bind_address:]port] [-E log_file] [-e escape_char]</span><br><span class=\"line\">         [-F configfile] [-I pkcs11] [-i identity_file]</span><br><span class=\"line\">         [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]</span><br><span class=\"line\">         [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]</span><br><span class=\"line\">         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]</span><br><span class=\"line\">         [user@]hostname [command]</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br></pre></td></tr></table></figure>\n<p>&#x4EE5;&#x4E0B;&#x7701;&#x7565;&#x4E00;&#x4E07;&#x5B57;&#x2026;&#x2026;</p>\n<a id=\"more\"></a>\n<p>&#x4E8E;&#x662F;&#x60F3;&#x627E;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x79C1;&#x94A5;&#x767B;&#x5F55;&#x7684;&#x4F60;&#x611F;&#x5230;&#x4E86;&#x4E00;&#x9635;&#x7EDD;&#x671B;&#x2026;&#x2026;&#xFF08;&#x867D;&#x7136;&#x5B83;&#x786E;&#x5B9E;&#x5B58;&#x5728;&#x4E8E;[-i identity_file]&#x8FD9;&#x91CC;&#xFF0C;&#x4F60;&#x627E;&#x5230;&#x4E86;&#x5417;&#xFF1F;&#xFF09;</p>\n<h2 id=\"&#x6240;&#x4EE5;&#x5C31;&#x6709;&#x4E86;-tldr\">&#x6240;&#x4EE5;&#x5C31;&#x6709;&#x4E86; TLDR</h2>\n<p>tldr &#x5F88;&#x597D;&#x5730;&#x89E3;&#x51B3;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x628A; man pages &#x4E2D;&#x6700;&#x5E38;&#x7528;&#x7684;&#x9009;&#x9879;&#x7528;&#x66F4;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x5F0F;&#x53D9;&#x8FF0;&#x4E86;&#x51FA;&#x6765;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tldr ssh</span><br><span class=\"line\"></span><br><span class=\"line\">  ssh</span><br><span class=\"line\"></span><br><span class=\"line\">  Secure Shell is a protocol used to securely log onto remote systems.</span><br><span class=\"line\">  It can be used for logging or executing commands on a remote server.</span><br><span class=\"line\"></span><br><span class=\"line\">  - Connect to a remote server:</span><br><span class=\"line\">    ssh username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - Connect to a remote server with a specific identity (private key):</span><br><span class=\"line\">    ssh -i path/to/key_file username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - Connect to a remote server using a specific port:</span><br><span class=\"line\">    ssh username@remote_host -p 2222</span><br><span class=\"line\"></span><br><span class=\"line\">  - Run a command on a remote server:</span><br><span class=\"line\">    ssh remote_host command -with -flags</span><br><span class=\"line\"></span><br><span class=\"line\">  - SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):</span><br><span class=\"line\">    ssh -D 9999 -C username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80):</span><br><span class=\"line\">    ssh -L 9999:slashdot.org:80 username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - Enable the option to forward the authentication information to the remote machine (see man ssh_config for available options):</span><br><span class=\"line\">    ssh -o &quot;ForwardAgent=yes&quot; username@remote_host</span><br></pre></td></tr></table></figure>\n<p>&#x662F;&#x7684;&#xFF0C;tldr &#x7684; ssh page &#x5C31;&#x8FD9;&#x4E48;&#x957F;&#xFF0C;&#x800C;&#x4E14;&#x4F60;&#x51E0;&#x4E4E;&#x8FD8;&#x80FD;&#x4E00;&#x4E0B;&#x5C31;&#x627E;&#x5230;&#x600E;&#x4E48;&#x4F7F;&#x7528;&#x79C1;&#x94A5;&#x767B;&#x5F55;&#x3002;&#x867D;&#x7136;&#x5B83;&#x786E;&#x5B9E;&#x975E;&#x5E38;&#x4E0D;&#x5168;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x4F60;&#x7EDD;&#x5927;&#x90E8;&#x5206;&#x60F3;&#x67E5; man &#x7684;&#x95EE;&#x9898;&#x3002;</p>\n<h2 id=\"&#x800C;&#x4E14;&#x5B83;&#x662F;&#x793E;&#x533A;&#x9A71;&#x52A8;&#x7684;&#x5440;\">&#x800C;&#x4E14;&#x5B83;&#x662F;&#x793E;&#x533A;&#x9A71;&#x52A8;&#x7684;&#x5440;&#xFF01;</h2>\n<p>&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5F00;&#x6E90;&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x53EF;&#x4EE5;&#x4E3A;&#x5B83;&#x8D21;&#x732E;&#x6216;&#x4FEE;&#x6539;&#x5176;&#x4E2D;&#x7684; page&#x3002;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x53BB;&#x56F4;&#x89C2;&#x8FD9;&#x4E2A;&#x4F5C;&#x54C1;&#xFF0C;&#x53EF;&#x4EE5;&#x5230; <a href=\"https://github.com/tldr-pages/tldr\" target=\"_blank\" rel=\"noopener\"><strong>tldr</strong></a> &#x8FD9;&#x4E2A; GitHub &#x4EE3;&#x7801;&#x4ED3;&#x5E93;&#x53BB;&#x505A;&#x51FA;&#x4E00;&#x4E9B;&#x81EA;&#x5DF1;&#x7684;&#x8D21;&#x732E;&#x3002;</p>\n<h1 id=\"&#x5B89;&#x88C5;&#x548C;&#x4F7F;&#x7528;\">&#x5B89;&#x88C5;&#x548C;&#x4F7F;&#x7528;</h1>\n<h2 id=\"&#x7F51;&#x9875;&#x7248;\">&#x7F51;&#x9875;&#x7248;</h2>\n<p>&#x6700;&#x7B80;&#x5355;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#x662F;&#x6253;&#x5F00;<a href=\"https://tldr.ostera.io/\" target=\"_blank\" rel=\"noopener\">&#x7F51;&#x9875;&#x7248;</a>&#x3002;&#x5728;&#x4E0A;&#x65B9;&#x7684;&#x641C;&#x7D22;&#x6846;&#x4E2D;&#x627E;&#x5230;&#x4F60;&#x60F3;&#x67E5;&#x770B;&#x7684;&#x547D;&#x4EE4;&#x3002;&#x4F8B;&#x5982;&#xFF1A;</p>\n<figure>\n<img src=\"http://osvlzj5nm.bkt.clouddn.com/17-9-20/91829078.jpg\" alt=\"&#x7F51;&#x9875;&#x7248;&#x7684; tldr\"><figcaption>&#x7F51;&#x9875;&#x7248;&#x7684; tldr</figcaption>\n</figure>\n<h2 id=\"node.js-&#x7248;&#x672C;\">Node.js &#x7248;&#x672C;</h2>\n<p>TLDR &#x6700;&#x521D;&#x7684;&#x7248;&#x672C;&#x7528; Node.js &#x5199;&#x6210;&#xFF0C;&#x6240;&#x4EE5;&#x5B98;&#x65B9;&#x6700;&#x4E3A;&#x63A8;&#x8350;&#x7684;&#x5B89;&#x88C5;&#x65B9;&#x6CD5;&#x662F;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g tldr</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x4E86;&#x89E3;&#x4EE5;&#x4E0B;&#x4E00;&#x63A5;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#x4EFB;&#x4F55;&#x4E00;&#x79CD;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;/&#x5305;&#x7BA1;&#x7406;&#x5668;&#xFF08;&#x5F53;&#x7136;&#x6211;&#x89C9;&#x5F97;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x8FD9;&#x4E2A;&#x7834;&#x8F6F;&#x4EF6;&#x5C31;&#x662F;&#x4E86;&#xFF09;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x5728;&#x8FD9;&#x91CC;&#x63A8;&#x8350;&#x4F7F;&#x7528; npm &#x5B89;&#x88C5;&#x3002;&#x5982;&#x679C;&#x4F60;&#x8FD8;&#x6CA1;&#x6709; npm&#xFF0C; &#x53EF;&#x4EE5;&#x5230;<a href=\"https://www.npmjs.com/get-npm\" target=\"_blank\" rel=\"noopener\">&#x8FD9;&#x91CC;</a>&#x4E0B;&#x8F7D;&#x3002;</p>\n<h2 id=\"&#x5176;&#x4ED6;&#x7248;&#x672C;\">&#x5176;&#x4ED6;&#x7248;&#x672C;</h2>\n<p>TLDR &#x7684;&#x5B98;&#x7F51;&#x4E5F;&#x7ED9;&#x9664;&#x4E86;&#x5176;&#x4ED6;&#x4E00;&#x4E9B;&#x5B89;&#x88C5;&#x65B9;&#x5F0F;&#xFF1A;</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\">\n<col style=\"width: 50%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Client</th>\n<th>Installation instructions</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/YellowApple/tldrb\" target=\"_blank\" rel=\"noopener\">Ruby client</a></td>\n<td><code>gem install tldrb</code></td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/psibi/tldr-hs\" target=\"_blank\" rel=\"noopener\">Haskell client</a></td>\n<td><code>stack install tldr</code></td>\n</tr>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/lord63/tldr.py\" target=\"_blank\" rel=\"noopener\">Python client</a></td>\n<td><code>pip install tldr.py</code></td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/tldr-pages/tldr-cpp-client\" target=\"_blank\" rel=\"noopener\">C++ client</a></td>\n<td><code>brew install tldr</code></td>\n</tr>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/gianasista/tldr-viewer\" target=\"_blank\" rel=\"noopener\">Android client</a></td>\n<td><a href=\"https://play.google.com/store/apps/details?id=de.gianasista.tldr_viewer\" target=\"_blank\" rel=\"noopener\">tldr-viewer on Google Play</a></td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/freesuraj/TLDR\" target=\"_blank\" rel=\"noopener\">iOS client</a></td>\n<td><a href=\"https://appsto.re/sg/IQ0-_.i\" target=\"_blank\" rel=\"noopener\">TLDR Man Page in App Store</a></td>\n</tr>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/Moddus/tldr-python-dash-docset\" target=\"_blank\" rel=\"noopener\">Dash for OSX</a></td>\n<td>open <code>Preferences &gt; Downloads &gt; User Contributed</code> and find <code>tldr pages</code> in the list</td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/pepa65/tldr-bash-client\" target=\"_blank\" rel=\"noopener\">Bash client</a></td>\n<td><code>bpkg install pepa65/tldr</code></td>\n</tr>\n</tbody>\n</table>\n<p>##&#x4F7F;&#x7528;&#x65B9;&#x6CD5;</p>\n<p>&#x7B80;&#x5355;&#x800C;&#x8A00;&#xFF0C;&#x4F60;&#x53EA;&#x8981;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x8F93;&#x5165; <code>tldr</code> &#x52A0;&#x4E0A;&#x4EFB;&#x4F55;&#x547D;&#x4EE4;&#x5373;&#x53EF;&#xFF0C;&#x4F8B;&#x5982; <code>tldr ssh</code> &#x6216;&#x662F; <code>tldr tar</code>&#xFF0C;&#x4F60;&#x5C31;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x5728;&#x7B2C;&#x4E00;&#x8282;&#x4E2D;&#x6240;&#x89C1;&#x7684;&#x7B80;&#x6D01;&#x7684;&#x4ECB;&#x7ECD;&#x5566;&#xFF01;</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是tldr\">什么是TLDR？</h1>\n<h2 id=\"tldr-它本身\">TLDR 它本身</h2>\n<p>tl;dr 是一个网络词汇，和十动然拒这类差不多，是个缩写。它的全称是「Too Long; Don’t Read」，翻译成中文的话就叫「太长不看」。它兴起于一些论坛，为了说明「楼主你的破文章又臭又长」，不过后来有许多文章的开头也用</p>\n<h2 id=\"这个东西为啥叫太长不看\">这个东西为啥叫太长不看？</h2>\n<p>一个叫「太长不看」的命令行工具显然是解决一些令程序员一个脑袋两个大的太长的东西，而这个东西就是 <strong>Linux man pages</strong>。它到底有多长呢，man pages的官方压缩包是 2M 多的大小，解压后是 16M。 16M 确实不算大了，然而这 16M 可是纯文本啊。用来做类比的话，一本50万字的中文小说变成纯文本文件之后也就那么 1M 多，可想而知这甚至是全英文 man pages 有多长了。</p>\n<h2 id=\"我们却需要它\">我们却需要它</h2>\n<p>作为程序员有时又十分需要 man pages。 虽然它长，你又不得不去读它：比如说，你知道 ssh 的基本用法是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@remote_host</span><br></pre></td></tr></table></figure>\n<p>然而当你想换个端口或是利用私钥登入服务器的时候就傻眼了，不得不打开 man pages：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SH(1)                    BSD General Commands Manual                   SSH(1)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">     ssh -- OpenSSH SSH client (remote login program)</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</span><br><span class=\"line\">         [-D [bind_address:]port] [-E log_file] [-e escape_char]</span><br><span class=\"line\">         [-F configfile] [-I pkcs11] [-i identity_file]</span><br><span class=\"line\">         [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]</span><br><span class=\"line\">         [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]</span><br><span class=\"line\">         [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]</span><br><span class=\"line\">         [user@]hostname [command]</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br></pre></td></tr></table></figure>\n<p>以下省略一万字……</p>","more":"<p>于是想找如何使用私钥登录的你感到了一阵绝望……（虽然它确实存在于[-i identity_file]这里，你找到了吗？）</p>\n<h2 id=\"所以就有了-tldr\">所以就有了 TLDR</h2>\n<p>tldr 很好地解决了这个问题，把 man pages 中最常用的选项用更简单的方式叙述了出来：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> tldr ssh</span><br><span class=\"line\"></span><br><span class=\"line\">  ssh</span><br><span class=\"line\"></span><br><span class=\"line\">  Secure Shell is a protocol used to securely log onto remote systems.</span><br><span class=\"line\">  It can be used for logging or executing commands on a remote server.</span><br><span class=\"line\"></span><br><span class=\"line\">  - Connect to a remote server:</span><br><span class=\"line\">    ssh username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - Connect to a remote server with a specific identity (private key):</span><br><span class=\"line\">    ssh -i path/to/key_file username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - Connect to a remote server using a specific port:</span><br><span class=\"line\">    ssh username@remote_host -p 2222</span><br><span class=\"line\"></span><br><span class=\"line\">  - Run a command on a remote server:</span><br><span class=\"line\">    ssh remote_host command -with -flags</span><br><span class=\"line\"></span><br><span class=\"line\">  - SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999):</span><br><span class=\"line\">    ssh -D 9999 -C username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - SSH tunneling: Forward a specific port (localhost:9999 to slashdot.org:80):</span><br><span class=\"line\">    ssh -L 9999:slashdot.org:80 username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">  - Enable the option to forward the authentication information to the remote machine (see man ssh_config for available options):</span><br><span class=\"line\">    ssh -o \"ForwardAgent=yes\" username@remote_host</span><br></pre></td></tr></table></figure>\n<p>是的，tldr 的 ssh page 就这么长，而且你几乎还能一下就找到怎么使用私钥登录。虽然它确实非常不全，但是它可以解决你绝大部分想查 man 的问题。</p>\n<h2 id=\"而且它是社区驱动的呀\">而且它是社区驱动的呀！</h2>\n<p>它是一个开源的项目，每个人都可以为它贡献或修改其中的 page。如果你想去围观这个作品，可以到 <a href=\"https://github.com/tldr-pages/tldr\" target=\"_blank\" rel=\"noopener\"><strong>tldr</strong></a> 这个 GitHub 代码仓库去做出一些自己的贡献。</p>\n<h1 id=\"安装和使用\">安装和使用</h1>\n<h2 id=\"网页版\">网页版</h2>\n<p>最简单的使用方法是打开<a href=\"https://tldr.ostera.io/\" target=\"_blank\" rel=\"noopener\">网页版</a>。在上方的搜索框中找到你想查看的命令。例如：</p>\n<figure>\n<img src=\"http://osvlzj5nm.bkt.clouddn.com/17-9-20/91829078.jpg\" alt=\"网页版的 tldr\"><figcaption>网页版的 tldr</figcaption>\n</figure>\n<h2 id=\"node.js-版本\">Node.js 版本</h2>\n<p>TLDR 最初的版本用 Node.js 写成，所以官方最为推荐的安装方法是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g tldr</span><br></pre></td></tr></table></figure>\n<p>如果你不了解以下一接中提到的任何一种编程语言/包管理器（当然我觉得这种情况也不需要这个破软件就是了），我们也在这里推荐使用 npm 安装。如果你还没有 npm， 可以到<a href=\"https://www.npmjs.com/get-npm\" target=\"_blank\" rel=\"noopener\">这里</a>下载。</p>\n<h2 id=\"其他版本\">其他版本</h2>\n<p>TLDR 的官网也给除了其他一些安装方式：</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\">\n<col style=\"width: 50%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Client</th>\n<th>Installation instructions</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/YellowApple/tldrb\" target=\"_blank\" rel=\"noopener\">Ruby client</a></td>\n<td><code>gem install tldrb</code></td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/psibi/tldr-hs\" target=\"_blank\" rel=\"noopener\">Haskell client</a></td>\n<td><code>stack install tldr</code></td>\n</tr>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/lord63/tldr.py\" target=\"_blank\" rel=\"noopener\">Python client</a></td>\n<td><code>pip install tldr.py</code></td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/tldr-pages/tldr-cpp-client\" target=\"_blank\" rel=\"noopener\">C++ client</a></td>\n<td><code>brew install tldr</code></td>\n</tr>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/gianasista/tldr-viewer\" target=\"_blank\" rel=\"noopener\">Android client</a></td>\n<td><a href=\"https://play.google.com/store/apps/details?id=de.gianasista.tldr_viewer\" target=\"_blank\" rel=\"noopener\">tldr-viewer on Google Play</a></td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/freesuraj/TLDR\" target=\"_blank\" rel=\"noopener\">iOS client</a></td>\n<td><a href=\"https://appsto.re/sg/IQ0-_.i\" target=\"_blank\" rel=\"noopener\">TLDR Man Page in App Store</a></td>\n</tr>\n<tr class=\"odd\">\n<td><a href=\"https://github.com/Moddus/tldr-python-dash-docset\" target=\"_blank\" rel=\"noopener\">Dash for OSX</a></td>\n<td>open <code>Preferences &gt; Downloads &gt; User Contributed</code> and find <code>tldr pages</code> in the list</td>\n</tr>\n<tr class=\"even\">\n<td><a href=\"https://github.com/pepa65/tldr-bash-client\" target=\"_blank\" rel=\"noopener\">Bash client</a></td>\n<td><code>bpkg install pepa65/tldr</code></td>\n</tr>\n</tbody>\n</table>\n<p>##使用方法</p>\n<p>简单而言，你只要在命令行输入 <code>tldr</code> 加上任何命令即可，例如 <code>tldr ssh</code> 或是 <code>tldr tar</code>，你就可以获得在第一节中所见的简洁的介绍啦！</p>"},{"title":"[TopCoder-SRM 726] Unpacking","date":"2018-07-03T14:46:50.000Z","_content":"\n## 题目\n\n[TopCoder链接](http://community.topcoder.com/stat?c=problem_statement&pm=14759)\n\n### Problem Statement\n\nThe holidays are near. Hero would like to buy some candies, so he went to the store. In the store he found some boxes. Each box has a label with three positive integers **a**[i], **b**[i], and **cost**[i]. Their meaning is as follows: Obviously, **cost**[i] is the amount Hero has to pay to buy this box. The other two numbers promise that the box will contain exactly **a**[i] red candies and exactly **b**[i] blue candies (and nothing else). Hero knows that the total number of candies always matches the label, but the colors sometimes don't. Sometimes, exactly one candy in the box has the opposite color. Thus, for each box we have three possibilities: instead of (**a**[i] red, **b**[i] blue) we can also get (**a**[i]+1 red, **b**[i]-1 blue) or (**a**[i]-1 red, **b**[i]+1 blue). Hero is going to buy some of the boxes. Then, he will bring them home, he will unpack all boxes and pool all candies together. Hero will be happy if the final pile of candies will contain at least **K** candies of the same color. Find the cheapest set of boxes such that it is guaranteed that Hero will be happy if he buys these boxes. Return the cost of that set of boxes. If it is impossible to guarantee Hero's happiness, return -1 instead.\n\n<!--more-->\n\n### Constraints\n\n- **a**, **b** and **cost** will contain the same number of elements.\n- **a** will contain between 1 and 50 elements, inclusive.\n- Each element in **a**, **b** and **cost** will be between 1 and 10,000, inclusive.\n- **K** will be between 1 and 10,000, inclusive.\n\n### Test cases\n\n太长了，请去原网站看吧……\n\n\n\n## 解题报告\n\n事实上这一题用来面别人了（虽然其实要求只要做基础的背包就够了，这我还是写得出的），但是面试的途中发现自己对这道题的领悟确实也不够深，因此把思路写下来提示自己。（代码也没有写的，拆分了之后用普通背包问题的代码就可以做，不赘述了）\n\n### 思路\n\n乍一看是背包，确实是背包，但却是非常特殊的背包。由于设定上的盒子中的糖果可能有不稳定的情况，没有办法简单用一个背包写出来。\n\n比较容易想到的是把不同颜色的糖果分开处理。也就是对红色做背包时，我们的做法保证“拆开所有盒子的时候，红色糖果的数量一定超过 K”，绿色亦然。因为不稳定，每一种糖果都需要用最差情况来考虑。我们是对 a-1（或 b-1） 数组进行背包算法。\n\n但是这是全部情况吗？不是。\n\n反例：a = {2, 2, 2}; b = {2, 2, 2}; cost = {1, 2, 3}; k = 4。这个数据如果只考虑最坏情况的话，我们会无法选出任何一组盒子（因为 -1 后 a 和 b 都变成了 {1, 1, 1}，加起来无法构成 4），但是我们只要买前两个盒子就可以一定保证它拆开会至少有四颗某种颜色的糖（思考：为什么？）。\n\n这种时候我们如何保证两种颜色中的一种有 k 个呢？会想一下抽屉原理吧：如果在四个抽屉里放五个球，至少会有一个抽屉有两个球。由于我们无法控制红绿各有多少个（因为可以以 1 为单位变化），我们只需要控制总数有不小于 2k - 1 个，那么一定能保证其中的某种颜色有超过 k 个。\n\n那么有了这种情况可以涵盖前面分别的状况吗？不能。\n\n反例：a = {1}; b = {10}; cost = {1}; k = 9。如果只看总和，这个盒子一共只有 11 颗糖，无法满足 2k - 1 = 17 的糖果数，但显然买这个盒子是可以满足 k = 9 的条件的。\n\n或者反过来思考，只要红色和绿色中的某种糖果永远达不到 k 个，总数的条件便不用符合 2k - 1，这种情况就会退化成分别背包的情况。（思考：为什么？）\n\n因此，我们可以使用三次背包来解决这个问题。\n","source":"_posts/topcoder-srm-726-div1-unpacking.md","raw":"---\ntitle: '[TopCoder-SRM 726] Unpacking'\ndate: 2018-07-03 22:46:50\ncategory: 解题报告\ntags: \n- 解题报告\n- TopCoder\n- 动态规划\n- 背包问题\n---\n\n## 题目\n\n[TopCoder链接](http://community.topcoder.com/stat?c=problem_statement&pm=14759)\n\n### Problem Statement\n\nThe holidays are near. Hero would like to buy some candies, so he went to the store. In the store he found some boxes. Each box has a label with three positive integers **a**[i], **b**[i], and **cost**[i]. Their meaning is as follows: Obviously, **cost**[i] is the amount Hero has to pay to buy this box. The other two numbers promise that the box will contain exactly **a**[i] red candies and exactly **b**[i] blue candies (and nothing else). Hero knows that the total number of candies always matches the label, but the colors sometimes don't. Sometimes, exactly one candy in the box has the opposite color. Thus, for each box we have three possibilities: instead of (**a**[i] red, **b**[i] blue) we can also get (**a**[i]+1 red, **b**[i]-1 blue) or (**a**[i]-1 red, **b**[i]+1 blue). Hero is going to buy some of the boxes. Then, he will bring them home, he will unpack all boxes and pool all candies together. Hero will be happy if the final pile of candies will contain at least **K** candies of the same color. Find the cheapest set of boxes such that it is guaranteed that Hero will be happy if he buys these boxes. Return the cost of that set of boxes. If it is impossible to guarantee Hero's happiness, return -1 instead.\n\n<!--more-->\n\n### Constraints\n\n- **a**, **b** and **cost** will contain the same number of elements.\n- **a** will contain between 1 and 50 elements, inclusive.\n- Each element in **a**, **b** and **cost** will be between 1 and 10,000, inclusive.\n- **K** will be between 1 and 10,000, inclusive.\n\n### Test cases\n\n太长了，请去原网站看吧……\n\n\n\n## 解题报告\n\n事实上这一题用来面别人了（虽然其实要求只要做基础的背包就够了，这我还是写得出的），但是面试的途中发现自己对这道题的领悟确实也不够深，因此把思路写下来提示自己。（代码也没有写的，拆分了之后用普通背包问题的代码就可以做，不赘述了）\n\n### 思路\n\n乍一看是背包，确实是背包，但却是非常特殊的背包。由于设定上的盒子中的糖果可能有不稳定的情况，没有办法简单用一个背包写出来。\n\n比较容易想到的是把不同颜色的糖果分开处理。也就是对红色做背包时，我们的做法保证“拆开所有盒子的时候，红色糖果的数量一定超过 K”，绿色亦然。因为不稳定，每一种糖果都需要用最差情况来考虑。我们是对 a-1（或 b-1） 数组进行背包算法。\n\n但是这是全部情况吗？不是。\n\n反例：a = {2, 2, 2}; b = {2, 2, 2}; cost = {1, 2, 3}; k = 4。这个数据如果只考虑最坏情况的话，我们会无法选出任何一组盒子（因为 -1 后 a 和 b 都变成了 {1, 1, 1}，加起来无法构成 4），但是我们只要买前两个盒子就可以一定保证它拆开会至少有四颗某种颜色的糖（思考：为什么？）。\n\n这种时候我们如何保证两种颜色中的一种有 k 个呢？会想一下抽屉原理吧：如果在四个抽屉里放五个球，至少会有一个抽屉有两个球。由于我们无法控制红绿各有多少个（因为可以以 1 为单位变化），我们只需要控制总数有不小于 2k - 1 个，那么一定能保证其中的某种颜色有超过 k 个。\n\n那么有了这种情况可以涵盖前面分别的状况吗？不能。\n\n反例：a = {1}; b = {10}; cost = {1}; k = 9。如果只看总和，这个盒子一共只有 11 颗糖，无法满足 2k - 1 = 17 的糖果数，但显然买这个盒子是可以满足 k = 9 的条件的。\n\n或者反过来思考，只要红色和绿色中的某种糖果永远达不到 k 个，总数的条件便不用符合 2k - 1，这种情况就会退化成分别背包的情况。（思考：为什么？）\n\n因此，我们可以使用三次背包来解决这个问题。\n","slug":"topcoder-srm-726-div1-unpacking","published":1,"updated":"2018-07-04T12:47:22.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4q000vxtd3dmvfxn3h","content":"<h2 id=\"&#x9898;&#x76EE;\">&#x9898;&#x76EE;</h2>\n<p><a href=\"http://community.topcoder.com/stat?c=problem_statement&amp;pm=14759\" target=\"_blank\" rel=\"noopener\">TopCoder&#x94FE;&#x63A5;</a></p>\n<h3 id=\"problem-statement\">Problem Statement</h3>\n<p>The holidays are near. Hero would like to buy some candies, so he went to the store. In the store he found some boxes. Each box has a label with three positive integers <strong>a</strong>[i], <strong>b</strong>[i], and <strong>cost</strong>[i]. Their meaning is as follows: Obviously, <strong>cost</strong>[i] is the amount Hero has to pay to buy this box. The other two numbers promise that the box will contain exactly <strong>a</strong>[i] red candies and exactly <strong>b</strong>[i] blue candies (and nothing else). Hero knows that the total number of candies always matches the label, but the colors sometimes don&#x2019;t. Sometimes, exactly one candy in the box has the opposite color. Thus, for each box we have three possibilities: instead of (<strong>a</strong>[i] red, <strong>b</strong>[i] blue) we can also get (<strong>a</strong>[i]+1 red, <strong>b</strong>[i]-1 blue) or (<strong>a</strong>[i]-1 red, <strong>b</strong>[i]+1 blue). Hero is going to buy some of the boxes. Then, he will bring them home, he will unpack all boxes and pool all candies together. Hero will be happy if the final pile of candies will contain at least <strong>K</strong> candies of the same color. Find the cheapest set of boxes such that it is guaranteed that Hero will be happy if he buys these boxes. Return the cost of that set of boxes. If it is impossible to guarantee Hero&#x2019;s happiness, return -1 instead.</p>\n<a id=\"more\"></a>\n<h3 id=\"constraints\">Constraints</h3>\n<ul>\n<li><strong>a</strong>, <strong>b</strong> and <strong>cost</strong> will contain the same number of elements.</li>\n<li><strong>a</strong> will contain between 1 and 50 elements, inclusive.</li>\n<li>Each element in <strong>a</strong>, <strong>b</strong> and <strong>cost</strong> will be between 1 and 10,000, inclusive.</li>\n<li><strong>K</strong> will be between 1 and 10,000, inclusive.</li>\n</ul>\n<h3 id=\"test-cases\">Test cases</h3>\n<p>&#x592A;&#x957F;&#x4E86;&#xFF0C;&#x8BF7;&#x53BB;&#x539F;&#x7F51;&#x7AD9;&#x770B;&#x5427;&#x2026;&#x2026;</p>\n<h2 id=\"&#x89E3;&#x9898;&#x62A5;&#x544A;\">&#x89E3;&#x9898;&#x62A5;&#x544A;</h2>\n<p>&#x4E8B;&#x5B9E;&#x4E0A;&#x8FD9;&#x4E00;&#x9898;&#x7528;&#x6765;&#x9762;&#x522B;&#x4EBA;&#x4E86;&#xFF08;&#x867D;&#x7136;&#x5176;&#x5B9E;&#x8981;&#x6C42;&#x53EA;&#x8981;&#x505A;&#x57FA;&#x7840;&#x7684;&#x80CC;&#x5305;&#x5C31;&#x591F;&#x4E86;&#xFF0C;&#x8FD9;&#x6211;&#x8FD8;&#x662F;&#x5199;&#x5F97;&#x51FA;&#x7684;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x9762;&#x8BD5;&#x7684;&#x9014;&#x4E2D;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x5BF9;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x9886;&#x609F;&#x786E;&#x5B9E;&#x4E5F;&#x4E0D;&#x591F;&#x6DF1;&#xFF0C;&#x56E0;&#x6B64;&#x628A;&#x601D;&#x8DEF;&#x5199;&#x4E0B;&#x6765;&#x63D0;&#x793A;&#x81EA;&#x5DF1;&#x3002;&#xFF08;&#x4EE3;&#x7801;&#x4E5F;&#x6CA1;&#x6709;&#x5199;&#x7684;&#xFF0C;&#x62C6;&#x5206;&#x4E86;&#x4E4B;&#x540E;&#x7528;&#x666E;&#x901A;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x7684;&#x4EE3;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x505A;&#xFF0C;&#x4E0D;&#x8D58;&#x8FF0;&#x4E86;&#xFF09;</p>\n<h3 id=\"&#x601D;&#x8DEF;\">&#x601D;&#x8DEF;</h3>\n<p>&#x4E4D;&#x4E00;&#x770B;&#x662F;&#x80CC;&#x5305;&#xFF0C;&#x786E;&#x5B9E;&#x662F;&#x80CC;&#x5305;&#xFF0C;&#x4F46;&#x5374;&#x662F;&#x975E;&#x5E38;&#x7279;&#x6B8A;&#x7684;&#x80CC;&#x5305;&#x3002;&#x7531;&#x4E8E;&#x8BBE;&#x5B9A;&#x4E0A;&#x7684;&#x76D2;&#x5B50;&#x4E2D;&#x7684;&#x7CD6;&#x679C;&#x53EF;&#x80FD;&#x6709;&#x4E0D;&#x7A33;&#x5B9A;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x6CA1;&#x6709;&#x529E;&#x6CD5;&#x7B80;&#x5355;&#x7528;&#x4E00;&#x4E2A;&#x80CC;&#x5305;&#x5199;&#x51FA;&#x6765;&#x3002;</p>\n<p>&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x7684;&#x662F;&#x628A;&#x4E0D;&#x540C;&#x989C;&#x8272;&#x7684;&#x7CD6;&#x679C;&#x5206;&#x5F00;&#x5904;&#x7406;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x5BF9;&#x7EA2;&#x8272;&#x505A;&#x80CC;&#x5305;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x505A;&#x6CD5;&#x4FDD;&#x8BC1;&#x201C;&#x62C6;&#x5F00;&#x6240;&#x6709;&#x76D2;&#x5B50;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7EA2;&#x8272;&#x7CD6;&#x679C;&#x7684;&#x6570;&#x91CF;&#x4E00;&#x5B9A;&#x8D85;&#x8FC7; K&#x201D;&#xFF0C;&#x7EFF;&#x8272;&#x4EA6;&#x7136;&#x3002;&#x56E0;&#x4E3A;&#x4E0D;&#x7A33;&#x5B9A;&#xFF0C;&#x6BCF;&#x4E00;&#x79CD;&#x7CD6;&#x679C;&#x90FD;&#x9700;&#x8981;&#x7528;&#x6700;&#x5DEE;&#x60C5;&#x51B5;&#x6765;&#x8003;&#x8651;&#x3002;&#x6211;&#x4EEC;&#x662F;&#x5BF9; a-1&#xFF08;&#x6216; b-1&#xFF09; &#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x80CC;&#x5305;&#x7B97;&#x6CD5;&#x3002;</p>\n<p>&#x4F46;&#x662F;&#x8FD9;&#x662F;&#x5168;&#x90E8;&#x60C5;&#x51B5;&#x5417;&#xFF1F;&#x4E0D;&#x662F;&#x3002;</p>\n<p>&#x53CD;&#x4F8B;&#xFF1A;a = {2, 2, 2}; b = {2, 2, 2}; cost = {1, 2, 3}; k = 4&#x3002;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x5982;&#x679C;&#x53EA;&#x8003;&#x8651;&#x6700;&#x574F;&#x60C5;&#x51B5;&#x7684;&#x8BDD;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x65E0;&#x6CD5;&#x9009;&#x51FA;&#x4EFB;&#x4F55;&#x4E00;&#x7EC4;&#x76D2;&#x5B50;&#xFF08;&#x56E0;&#x4E3A; -1 &#x540E; a &#x548C; b &#x90FD;&#x53D8;&#x6210;&#x4E86; {1, 1, 1}&#xFF0C;&#x52A0;&#x8D77;&#x6765;&#x65E0;&#x6CD5;&#x6784;&#x6210; 4&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EA;&#x8981;&#x4E70;&#x524D;&#x4E24;&#x4E2A;&#x76D2;&#x5B50;&#x5C31;&#x53EF;&#x4EE5;&#x4E00;&#x5B9A;&#x4FDD;&#x8BC1;&#x5B83;&#x62C6;&#x5F00;&#x4F1A;&#x81F3;&#x5C11;&#x6709;&#x56DB;&#x9897;&#x67D0;&#x79CD;&#x989C;&#x8272;&#x7684;&#x7CD6;&#xFF08;&#x601D;&#x8003;&#xFF1A;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#xFF09;&#x3002;</p>\n<p>&#x8FD9;&#x79CD;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5982;&#x4F55;&#x4FDD;&#x8BC1;&#x4E24;&#x79CD;&#x989C;&#x8272;&#x4E2D;&#x7684;&#x4E00;&#x79CD;&#x6709; k &#x4E2A;&#x5462;&#xFF1F;&#x4F1A;&#x60F3;&#x4E00;&#x4E0B;&#x62BD;&#x5C49;&#x539F;&#x7406;&#x5427;&#xFF1A;&#x5982;&#x679C;&#x5728;&#x56DB;&#x4E2A;&#x62BD;&#x5C49;&#x91CC;&#x653E;&#x4E94;&#x4E2A;&#x7403;&#xFF0C;&#x81F3;&#x5C11;&#x4F1A;&#x6709;&#x4E00;&#x4E2A;&#x62BD;&#x5C49;&#x6709;&#x4E24;&#x4E2A;&#x7403;&#x3002;&#x7531;&#x4E8E;&#x6211;&#x4EEC;&#x65E0;&#x6CD5;&#x63A7;&#x5236;&#x7EA2;&#x7EFF;&#x5404;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#xFF08;&#x56E0;&#x4E3A;&#x53EF;&#x4EE5;&#x4EE5; 1 &#x4E3A;&#x5355;&#x4F4D;&#x53D8;&#x5316;&#xFF09;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x63A7;&#x5236;&#x603B;&#x6570;&#x6709;&#x4E0D;&#x5C0F;&#x4E8E; 2k - 1 &#x4E2A;&#xFF0C;&#x90A3;&#x4E48;&#x4E00;&#x5B9A;&#x80FD;&#x4FDD;&#x8BC1;&#x5176;&#x4E2D;&#x7684;&#x67D0;&#x79CD;&#x989C;&#x8272;&#x6709;&#x8D85;&#x8FC7; k &#x4E2A;&#x3002;</p>\n<p>&#x90A3;&#x4E48;&#x6709;&#x4E86;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x53EF;&#x4EE5;&#x6DB5;&#x76D6;&#x524D;&#x9762;&#x5206;&#x522B;&#x7684;&#x72B6;&#x51B5;&#x5417;&#xFF1F;&#x4E0D;&#x80FD;&#x3002;</p>\n<p>&#x53CD;&#x4F8B;&#xFF1A;a = {1}; b = {10}; cost = {1}; k = 9&#x3002;&#x5982;&#x679C;&#x53EA;&#x770B;&#x603B;&#x548C;&#xFF0C;&#x8FD9;&#x4E2A;&#x76D2;&#x5B50;&#x4E00;&#x5171;&#x53EA;&#x6709; 11 &#x9897;&#x7CD6;&#xFF0C;&#x65E0;&#x6CD5;&#x6EE1;&#x8DB3; 2k - 1 = 17 &#x7684;&#x7CD6;&#x679C;&#x6570;&#xFF0C;&#x4F46;&#x663E;&#x7136;&#x4E70;&#x8FD9;&#x4E2A;&#x76D2;&#x5B50;&#x662F;&#x53EF;&#x4EE5;&#x6EE1;&#x8DB3; k = 9 &#x7684;&#x6761;&#x4EF6;&#x7684;&#x3002;</p>\n<p>&#x6216;&#x8005;&#x53CD;&#x8FC7;&#x6765;&#x601D;&#x8003;&#xFF0C;&#x53EA;&#x8981;&#x7EA2;&#x8272;&#x548C;&#x7EFF;&#x8272;&#x4E2D;&#x7684;&#x67D0;&#x79CD;&#x7CD6;&#x679C;&#x6C38;&#x8FDC;&#x8FBE;&#x4E0D;&#x5230; k &#x4E2A;&#xFF0C;&#x603B;&#x6570;&#x7684;&#x6761;&#x4EF6;&#x4FBF;&#x4E0D;&#x7528;&#x7B26;&#x5408; 2k - 1&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x5C31;&#x4F1A;&#x9000;&#x5316;&#x6210;&#x5206;&#x522B;&#x80CC;&#x5305;&#x7684;&#x60C5;&#x51B5;&#x3002;&#xFF08;&#x601D;&#x8003;&#xFF1A;&#x4E3A;&#x4EC0;&#x4E48;&#xFF1F;&#xFF09;</p>\n<p>&#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E09;&#x6B21;&#x80CC;&#x5305;&#x6765;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002;</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\">题目</h2>\n<p><a href=\"http://community.topcoder.com/stat?c=problem_statement&amp;pm=14759\" target=\"_blank\" rel=\"noopener\">TopCoder链接</a></p>\n<h3 id=\"problem-statement\">Problem Statement</h3>\n<p>The holidays are near. Hero would like to buy some candies, so he went to the store. In the store he found some boxes. Each box has a label with three positive integers <strong>a</strong>[i], <strong>b</strong>[i], and <strong>cost</strong>[i]. Their meaning is as follows: Obviously, <strong>cost</strong>[i] is the amount Hero has to pay to buy this box. The other two numbers promise that the box will contain exactly <strong>a</strong>[i] red candies and exactly <strong>b</strong>[i] blue candies (and nothing else). Hero knows that the total number of candies always matches the label, but the colors sometimes don’t. Sometimes, exactly one candy in the box has the opposite color. Thus, for each box we have three possibilities: instead of (<strong>a</strong>[i] red, <strong>b</strong>[i] blue) we can also get (<strong>a</strong>[i]+1 red, <strong>b</strong>[i]-1 blue) or (<strong>a</strong>[i]-1 red, <strong>b</strong>[i]+1 blue). Hero is going to buy some of the boxes. Then, he will bring them home, he will unpack all boxes and pool all candies together. Hero will be happy if the final pile of candies will contain at least <strong>K</strong> candies of the same color. Find the cheapest set of boxes such that it is guaranteed that Hero will be happy if he buys these boxes. Return the cost of that set of boxes. If it is impossible to guarantee Hero’s happiness, return -1 instead.</p>","more":"<h3 id=\"constraints\">Constraints</h3>\n<ul>\n<li><strong>a</strong>, <strong>b</strong> and <strong>cost</strong> will contain the same number of elements.</li>\n<li><strong>a</strong> will contain between 1 and 50 elements, inclusive.</li>\n<li>Each element in <strong>a</strong>, <strong>b</strong> and <strong>cost</strong> will be between 1 and 10,000, inclusive.</li>\n<li><strong>K</strong> will be between 1 and 10,000, inclusive.</li>\n</ul>\n<h3 id=\"test-cases\">Test cases</h3>\n<p>太长了，请去原网站看吧……</p>\n<h2 id=\"解题报告\">解题报告</h2>\n<p>事实上这一题用来面别人了（虽然其实要求只要做基础的背包就够了，这我还是写得出的），但是面试的途中发现自己对这道题的领悟确实也不够深，因此把思路写下来提示自己。（代码也没有写的，拆分了之后用普通背包问题的代码就可以做，不赘述了）</p>\n<h3 id=\"思路\">思路</h3>\n<p>乍一看是背包，确实是背包，但却是非常特殊的背包。由于设定上的盒子中的糖果可能有不稳定的情况，没有办法简单用一个背包写出来。</p>\n<p>比较容易想到的是把不同颜色的糖果分开处理。也就是对红色做背包时，我们的做法保证“拆开所有盒子的时候，红色糖果的数量一定超过 K”，绿色亦然。因为不稳定，每一种糖果都需要用最差情况来考虑。我们是对 a-1（或 b-1） 数组进行背包算法。</p>\n<p>但是这是全部情况吗？不是。</p>\n<p>反例：a = {2, 2, 2}; b = {2, 2, 2}; cost = {1, 2, 3}; k = 4。这个数据如果只考虑最坏情况的话，我们会无法选出任何一组盒子（因为 -1 后 a 和 b 都变成了 {1, 1, 1}，加起来无法构成 4），但是我们只要买前两个盒子就可以一定保证它拆开会至少有四颗某种颜色的糖（思考：为什么？）。</p>\n<p>这种时候我们如何保证两种颜色中的一种有 k 个呢？会想一下抽屉原理吧：如果在四个抽屉里放五个球，至少会有一个抽屉有两个球。由于我们无法控制红绿各有多少个（因为可以以 1 为单位变化），我们只需要控制总数有不小于 2k - 1 个，那么一定能保证其中的某种颜色有超过 k 个。</p>\n<p>那么有了这种情况可以涵盖前面分别的状况吗？不能。</p>\n<p>反例：a = {1}; b = {10}; cost = {1}; k = 9。如果只看总和，这个盒子一共只有 11 颗糖，无法满足 2k - 1 = 17 的糖果数，但显然买这个盒子是可以满足 k = 9 的条件的。</p>\n<p>或者反过来思考，只要红色和绿色中的某种糖果永远达不到 k 个，总数的条件便不用符合 2k - 1，这种情况就会退化成分别背包的情况。（思考：为什么？）</p>\n<p>因此，我们可以使用三次背包来解决这个问题。</p>"},{"title":"猴子都能学会的20行代码登录微博","date":"2017-07-13T16:00:00.000Z","_content":"\n如何登录新浪微博是令许多数据新手（包括我）头疼的大问题。由于新浪的反爬虫策略，网上的教程往往撑不过几个月，查阅到的资料在半年前或是一年前——而它们早就无法使用了，在你想开始爬虫的时候被活生生卡在了第一步。\n\n简单而言，我使用的方法是通过 Selenium 模拟浏览器的行为，直接在浏览器中输入用户名和密码并登录，然后直接从浏览器中获取 Cookies。虽然听起来十分简单（实际上也十分简单），但是确实是十分有效的方式。只要一个网站能通过浏览器登陆，我们就可以简单改造这个程序来登录并获得想要的资料。\n\n\n\n# 什么是Selenium？如何使用？\n\nSelenium 是一个项目的名称，都与浏览器和网页测试相关。主要的工具也就是今天我们所要使用的，是WebDriver，是一个浏览器自动化工具。它为很多不同的语言提供了库，包括 Python、Java、Ruby 等。本文中我选择使用 Python 来进行操作，当然你也可以使用你熟悉的语言来进行操作。\n\n在 Python中使用 Selenium 只需要通过`pip`安装 Selenium 提供的 Python 库。\n\n```shell\npip3 install selenium  # 如果你使用 Python 2 ，请使用 pip install selenium\n```\n\n仅仅安装 Selenium 本身是不够的，你同时还需要安装 Driver 。你可以将 Driver 理解为浏览器本身的『驱动』，在程序中使用 Driver 就相当于你打开了一个浏览器做了些什么事情。\n\n<!--more-->\n\n在这里我们推荐几个 Driver ：\n\n1. Firefox: https://github.com/mozilla/geckodriver/releases\n2. Chrome: https://sites.google.com/a/chromium.org/chromedriver/downloads\n3. PhantomJS: http://phantomjs.org/download.html\n\n（如果你是Windows用户，这部分内容也需要参考：http://selenium-python.readthedocs.io/installation.html#detailed-instructions-for-windows-users）\n\n下载后，我建议将可执行文件加入环境中，以备使用。\n\nFirefox 和 Chrome 相信大家都比较熟悉。PhantomJS 是一个可以让你无需浏览器就进行网页相关操作的[WebKit](https://zh.wikipedia.org/wiki/WebKit)，它也没有图形界面。个人比较推荐在调试程序期间使用 Firefox 或是 Chrome ，这样你可以通过观察发现自己哪里出了错。在调试完成后使用 PhantomJS ，来避免多余的可视化渲染。\n\n\n\n# 创建一个 WebDriver\n\n利用 Selenium 创建 WebDriver 十分简单粗暴：\n\n```python\nfrom selenium import webdriver\ndriver = webdriver.Firefox()  # 如果 Firefox 所时使用的 geckodriver 在环境中\n# driver = webdriver.PhantomJS()  # 如果你想使用 PhantomJS\n```\n\n如果你需要自定义路径，你可以通过传入参数 `executable_path`：\n\n```python\ndriver = webdriver.Firefox(executable_path=\"/path/to/geckodriver\")\n```\n\n如果你使用 Firefox 或 Chrome，你会看到这个操作打开一个浏览器。\n\n\n\n# 观察网页本身\n\n为了方便演示，我们使用新浪的移动版进行登录。如果想决定如何操作一个网页，首先我们要观察网页本身。\n\n右键登录的地方并审查元素，你会发现用户名和密码其实是简单的输入框，而登录按钮是一个链接而已。\n\n![](http://osvlzj5nm.bkt.clouddn.com/17-7-14/91396431.jpg)\n\n因此我们简单规划之后要做的事情：\n\n1. 输入用户名和密码\n2. 点击登录按钮（或摁回车）\n\n\n\n# 利用 Selenium 进行登录操作\n\n## 打开网页\n\nSelenium 提供了方法的`get`方法用以获取网页：\n\n```python\ndriver.get('https://passport.weibo.cn/signin/login')\n```\n\n如果你使用 Firefox 或 Chrome，你会看到这个操作打开微博手机版的登录页面。\n\n## 定位元素\n\n由网页本身的结构我们发现，这两个输入框和登录链接元素的`id`属性都是页面中独一无二的，我们便可以利用这一特点寻找到元素本身。\n\n```python\nname_field = driver.find_element_by_id('loginName')  # 用户名输入框\npassword_field = driver.find_element_by_id('loginPassword')  # 密码输入框\nsubmit_button = driver.find_element_by_id('loginAction')  # 登录键\n```\n\n## 输入内容\n\nSelenium 提供了为元素输入的方法 `send_keys()`，直接调用这一方法就可以把内容输入到网页中的输入框内：\n\n```python\nname_field.send_keys('你的用户名')\npassword_field.send_keys('你的密码')\n```\n\n如果你使用 Firefox 或 Chrome ，你会看到页面中的两个输入框被填入你在程序中输入的文字。\n\n点击按钮的方法也很简单，如果你已经获取了元素，只要使用`click()`方法：\n\n```python\nsubmit_button.click()  # 单击元素\n```\n\n如果你需要使用回车键，可以使用`send_keys()`来发送回车（`Keys.RETURN`），我在这里不展开描述。\n\n如果你担心两个输入框在你输入前就已经有了其他内容而影响操作，你可以使用`clear()`方法，并且我在这里也更加推荐这样的做法：\n\n```python\nname_field.clear()  # 清除用户名区域\nname_field.send_keys('你的用户名')\n\npassword_field.clear()  # 清除密码区域\npassword_field.send_keys('你的密码')\n```\n\n## 获取 Cookies\n\n从 WebDriver 获取 Cookies 只需要一个操作 `get_cookies()`：\n\n```python\ndriver.get_cookies()\n```\n\n它是一个字典文件的列表，每一个字典文件是一个 Cookie。如果你们要在其他 WebDriver 或浏览器中使用这组 Cookies ，使用一个循环来给 WebDriver 利用`add_cookie`方法添加是比较标准的方法：\n\n```python\nfor cookie in driver.get_cookies():\n    another_driver.add_cookie(cookie)\n```\n\n## 等待网页载入\n\n如果你仅仅执行上述代码，你会发现如果你的网速不够快，或是电脑不够好，就非常容易在元素出现前就进行操作，然后出现无法找到元素或是元素不可见等错误，我们可以通过等待一段时间来解决这个问题：\n\n```python\nimport time\n\n# 在获取网页后\ntime.sleep(2) # 等待2秒\n```\n\n这种做法比较简单，但也十分粗暴：因为你无法确定2秒时间足够让网页加载完成。每次打开网页的时间受限于许多因素，你可能很难用一个固定的时间来决定。而 Selenium 本身也提供了一些好用的方法：\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# 在获取网页后\nWebDriverWait(driver, 20).until(\n    EC.presence_of_element_located((By.ID, 'loginName'))) \n# 等待 id 为 loginName的元素出现，最多20秒\n```\n\n\n\n# 结语\n\n如何登录网站对于收集数据的人而言是个不大不小的问题。通过使用 Selenium，我们几乎可以通过各种方法模拟浏览器的操作，而且这种方法是只要浏览器存在就可以使用的。我相信如何观察网页的结构以及利用是非常有用的技能。\n\n## 完整代码\n\n```python\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.PhantomJS()\ndriver.get('https://passport.weibo.cn/signin/login')\nWebDriverWait(driver, 20).until(\n    EC.presence_of_element_located((By.ID, 'loginName')))\ntime.sleep(1)\n\nname_field = driver.find_element_by_id('loginName')\nname_field.clear()\nname_field.send_keys('你的用户名')\npassword_field = driver.find_element_by_id('loginPassword')\npassword_field.clear()\npassword_field.send_keys('你的密码')\nsubmit_button = driver.find_element_by_id('loginAction')\nsubmit_button.click()\n\nprint(driver.get_cookies())\n```\n\n","source":"_posts/weibo-login-20lines.md","raw":"---\ntitle: 猴子都能学会的20行代码登录微博\ndate: 2017-07-14\ncategory: 计算机课堂\ntags: \n- Python\n- 爬虫\n---\n\n如何登录新浪微博是令许多数据新手（包括我）头疼的大问题。由于新浪的反爬虫策略，网上的教程往往撑不过几个月，查阅到的资料在半年前或是一年前——而它们早就无法使用了，在你想开始爬虫的时候被活生生卡在了第一步。\n\n简单而言，我使用的方法是通过 Selenium 模拟浏览器的行为，直接在浏览器中输入用户名和密码并登录，然后直接从浏览器中获取 Cookies。虽然听起来十分简单（实际上也十分简单），但是确实是十分有效的方式。只要一个网站能通过浏览器登陆，我们就可以简单改造这个程序来登录并获得想要的资料。\n\n\n\n# 什么是Selenium？如何使用？\n\nSelenium 是一个项目的名称，都与浏览器和网页测试相关。主要的工具也就是今天我们所要使用的，是WebDriver，是一个浏览器自动化工具。它为很多不同的语言提供了库，包括 Python、Java、Ruby 等。本文中我选择使用 Python 来进行操作，当然你也可以使用你熟悉的语言来进行操作。\n\n在 Python中使用 Selenium 只需要通过`pip`安装 Selenium 提供的 Python 库。\n\n```shell\npip3 install selenium  # 如果你使用 Python 2 ，请使用 pip install selenium\n```\n\n仅仅安装 Selenium 本身是不够的，你同时还需要安装 Driver 。你可以将 Driver 理解为浏览器本身的『驱动』，在程序中使用 Driver 就相当于你打开了一个浏览器做了些什么事情。\n\n<!--more-->\n\n在这里我们推荐几个 Driver ：\n\n1. Firefox: https://github.com/mozilla/geckodriver/releases\n2. Chrome: https://sites.google.com/a/chromium.org/chromedriver/downloads\n3. PhantomJS: http://phantomjs.org/download.html\n\n（如果你是Windows用户，这部分内容也需要参考：http://selenium-python.readthedocs.io/installation.html#detailed-instructions-for-windows-users）\n\n下载后，我建议将可执行文件加入环境中，以备使用。\n\nFirefox 和 Chrome 相信大家都比较熟悉。PhantomJS 是一个可以让你无需浏览器就进行网页相关操作的[WebKit](https://zh.wikipedia.org/wiki/WebKit)，它也没有图形界面。个人比较推荐在调试程序期间使用 Firefox 或是 Chrome ，这样你可以通过观察发现自己哪里出了错。在调试完成后使用 PhantomJS ，来避免多余的可视化渲染。\n\n\n\n# 创建一个 WebDriver\n\n利用 Selenium 创建 WebDriver 十分简单粗暴：\n\n```python\nfrom selenium import webdriver\ndriver = webdriver.Firefox()  # 如果 Firefox 所时使用的 geckodriver 在环境中\n# driver = webdriver.PhantomJS()  # 如果你想使用 PhantomJS\n```\n\n如果你需要自定义路径，你可以通过传入参数 `executable_path`：\n\n```python\ndriver = webdriver.Firefox(executable_path=\"/path/to/geckodriver\")\n```\n\n如果你使用 Firefox 或 Chrome，你会看到这个操作打开一个浏览器。\n\n\n\n# 观察网页本身\n\n为了方便演示，我们使用新浪的移动版进行登录。如果想决定如何操作一个网页，首先我们要观察网页本身。\n\n右键登录的地方并审查元素，你会发现用户名和密码其实是简单的输入框，而登录按钮是一个链接而已。\n\n![](http://osvlzj5nm.bkt.clouddn.com/17-7-14/91396431.jpg)\n\n因此我们简单规划之后要做的事情：\n\n1. 输入用户名和密码\n2. 点击登录按钮（或摁回车）\n\n\n\n# 利用 Selenium 进行登录操作\n\n## 打开网页\n\nSelenium 提供了方法的`get`方法用以获取网页：\n\n```python\ndriver.get('https://passport.weibo.cn/signin/login')\n```\n\n如果你使用 Firefox 或 Chrome，你会看到这个操作打开微博手机版的登录页面。\n\n## 定位元素\n\n由网页本身的结构我们发现，这两个输入框和登录链接元素的`id`属性都是页面中独一无二的，我们便可以利用这一特点寻找到元素本身。\n\n```python\nname_field = driver.find_element_by_id('loginName')  # 用户名输入框\npassword_field = driver.find_element_by_id('loginPassword')  # 密码输入框\nsubmit_button = driver.find_element_by_id('loginAction')  # 登录键\n```\n\n## 输入内容\n\nSelenium 提供了为元素输入的方法 `send_keys()`，直接调用这一方法就可以把内容输入到网页中的输入框内：\n\n```python\nname_field.send_keys('你的用户名')\npassword_field.send_keys('你的密码')\n```\n\n如果你使用 Firefox 或 Chrome ，你会看到页面中的两个输入框被填入你在程序中输入的文字。\n\n点击按钮的方法也很简单，如果你已经获取了元素，只要使用`click()`方法：\n\n```python\nsubmit_button.click()  # 单击元素\n```\n\n如果你需要使用回车键，可以使用`send_keys()`来发送回车（`Keys.RETURN`），我在这里不展开描述。\n\n如果你担心两个输入框在你输入前就已经有了其他内容而影响操作，你可以使用`clear()`方法，并且我在这里也更加推荐这样的做法：\n\n```python\nname_field.clear()  # 清除用户名区域\nname_field.send_keys('你的用户名')\n\npassword_field.clear()  # 清除密码区域\npassword_field.send_keys('你的密码')\n```\n\n## 获取 Cookies\n\n从 WebDriver 获取 Cookies 只需要一个操作 `get_cookies()`：\n\n```python\ndriver.get_cookies()\n```\n\n它是一个字典文件的列表，每一个字典文件是一个 Cookie。如果你们要在其他 WebDriver 或浏览器中使用这组 Cookies ，使用一个循环来给 WebDriver 利用`add_cookie`方法添加是比较标准的方法：\n\n```python\nfor cookie in driver.get_cookies():\n    another_driver.add_cookie(cookie)\n```\n\n## 等待网页载入\n\n如果你仅仅执行上述代码，你会发现如果你的网速不够快，或是电脑不够好，就非常容易在元素出现前就进行操作，然后出现无法找到元素或是元素不可见等错误，我们可以通过等待一段时间来解决这个问题：\n\n```python\nimport time\n\n# 在获取网页后\ntime.sleep(2) # 等待2秒\n```\n\n这种做法比较简单，但也十分粗暴：因为你无法确定2秒时间足够让网页加载完成。每次打开网页的时间受限于许多因素，你可能很难用一个固定的时间来决定。而 Selenium 本身也提供了一些好用的方法：\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# 在获取网页后\nWebDriverWait(driver, 20).until(\n    EC.presence_of_element_located((By.ID, 'loginName'))) \n# 等待 id 为 loginName的元素出现，最多20秒\n```\n\n\n\n# 结语\n\n如何登录网站对于收集数据的人而言是个不大不小的问题。通过使用 Selenium，我们几乎可以通过各种方法模拟浏览器的操作，而且这种方法是只要浏览器存在就可以使用的。我相信如何观察网页的结构以及利用是非常有用的技能。\n\n## 完整代码\n\n```python\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.PhantomJS()\ndriver.get('https://passport.weibo.cn/signin/login')\nWebDriverWait(driver, 20).until(\n    EC.presence_of_element_located((By.ID, 'loginName')))\ntime.sleep(1)\n\nname_field = driver.find_element_by_id('loginName')\nname_field.clear()\nname_field.send_keys('你的用户名')\npassword_field = driver.find_element_by_id('loginPassword')\npassword_field.clear()\npassword_field.send_keys('你的密码')\nsubmit_button = driver.find_element_by_id('loginAction')\nsubmit_button.click()\n\nprint(driver.get_cookies())\n```\n\n","slug":"weibo-login-20lines","published":1,"updated":"2018-07-03T13:44:30.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4s0010xtd389xwivxs","content":"<p>&#x5982;&#x4F55;&#x767B;&#x5F55;&#x65B0;&#x6D6A;&#x5FAE;&#x535A;&#x662F;&#x4EE4;&#x8BB8;&#x591A;&#x6570;&#x636E;&#x65B0;&#x624B;&#xFF08;&#x5305;&#x62EC;&#x6211;&#xFF09;&#x5934;&#x75BC;&#x7684;&#x5927;&#x95EE;&#x9898;&#x3002;&#x7531;&#x4E8E;&#x65B0;&#x6D6A;&#x7684;&#x53CD;&#x722C;&#x866B;&#x7B56;&#x7565;&#xFF0C;&#x7F51;&#x4E0A;&#x7684;&#x6559;&#x7A0B;&#x5F80;&#x5F80;&#x6491;&#x4E0D;&#x8FC7;&#x51E0;&#x4E2A;&#x6708;&#xFF0C;&#x67E5;&#x9605;&#x5230;&#x7684;&#x8D44;&#x6599;&#x5728;&#x534A;&#x5E74;&#x524D;&#x6216;&#x662F;&#x4E00;&#x5E74;&#x524D;&#x2014;&#x2014;&#x800C;&#x5B83;&#x4EEC;&#x65E9;&#x5C31;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#x4E86;&#xFF0C;&#x5728;&#x4F60;&#x60F3;&#x5F00;&#x59CB;&#x722C;&#x866B;&#x7684;&#x65F6;&#x5019;&#x88AB;&#x6D3B;&#x751F;&#x751F;&#x5361;&#x5728;&#x4E86;&#x7B2C;&#x4E00;&#x6B65;&#x3002;</p>\n<p>&#x7B80;&#x5355;&#x800C;&#x8A00;&#xFF0C;&#x6211;&#x4F7F;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x901A;&#x8FC7; Selenium &#x6A21;&#x62DF;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x884C;&#x4E3A;&#xFF0C;&#x76F4;&#x63A5;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x8F93;&#x5165;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x5E76;&#x767B;&#x5F55;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x4ECE;&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x83B7;&#x53D6; Cookies&#x3002;&#x867D;&#x7136;&#x542C;&#x8D77;&#x6765;&#x5341;&#x5206;&#x7B80;&#x5355;&#xFF08;&#x5B9E;&#x9645;&#x4E0A;&#x4E5F;&#x5341;&#x5206;&#x7B80;&#x5355;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x786E;&#x5B9E;&#x662F;&#x5341;&#x5206;&#x6709;&#x6548;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x53EA;&#x8981;&#x4E00;&#x4E2A;&#x7F51;&#x7AD9;&#x80FD;&#x901A;&#x8FC7;&#x6D4F;&#x89C8;&#x5668;&#x767B;&#x9646;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x6539;&#x9020;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x6765;&#x767B;&#x5F55;&#x5E76;&#x83B7;&#x5F97;&#x60F3;&#x8981;&#x7684;&#x8D44;&#x6599;&#x3002;</p>\n<h1 id=\"&#x4EC0;&#x4E48;&#x662F;selenium&#x5982;&#x4F55;&#x4F7F;&#x7528;\">&#x4EC0;&#x4E48;&#x662F;Selenium&#xFF1F;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#xFF1F;</h1>\n<p>Selenium &#x662F;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x90FD;&#x4E0E;&#x6D4F;&#x89C8;&#x5668;&#x548C;&#x7F51;&#x9875;&#x6D4B;&#x8BD5;&#x76F8;&#x5173;&#x3002;&#x4E3B;&#x8981;&#x7684;&#x5DE5;&#x5177;&#x4E5F;&#x5C31;&#x662F;&#x4ECA;&#x5929;&#x6211;&#x4EEC;&#x6240;&#x8981;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x662F;WebDriver&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x6D4F;&#x89C8;&#x5668;&#x81EA;&#x52A8;&#x5316;&#x5DE5;&#x5177;&#x3002;&#x5B83;&#x4E3A;&#x5F88;&#x591A;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x8A00;&#x63D0;&#x4F9B;&#x4E86;&#x5E93;&#xFF0C;&#x5305;&#x62EC; Python&#x3001;Java&#x3001;Ruby &#x7B49;&#x3002;&#x672C;&#x6587;&#x4E2D;&#x6211;&#x9009;&#x62E9;&#x4F7F;&#x7528; Python &#x6765;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x5F53;&#x7136;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4F60;&#x719F;&#x6089;&#x7684;&#x8BED;&#x8A00;&#x6765;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;</p>\n<p>&#x5728; Python&#x4E2D;&#x4F7F;&#x7528; Selenium &#x53EA;&#x9700;&#x8981;&#x901A;&#x8FC7;<code>pip</code>&#x5B89;&#x88C5; Selenium &#x63D0;&#x4F9B;&#x7684; Python &#x5E93;&#x3002;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install selenium  # &#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528; Python 2 &#xFF0C;&#x8BF7;&#x4F7F;&#x7528; pip install selenium</span><br></pre></td></tr></table></figure>\n<p>&#x4EC5;&#x4EC5;&#x5B89;&#x88C5; Selenium &#x672C;&#x8EAB;&#x662F;&#x4E0D;&#x591F;&#x7684;&#xFF0C;&#x4F60;&#x540C;&#x65F6;&#x8FD8;&#x9700;&#x8981;&#x5B89;&#x88C5; Driver &#x3002;&#x4F60;&#x53EF;&#x4EE5;&#x5C06; Driver &#x7406;&#x89E3;&#x4E3A;&#x6D4F;&#x89C8;&#x5668;&#x672C;&#x8EAB;&#x7684;&#x300E;&#x9A71;&#x52A8;&#x300F;&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x4E2D;&#x4F7F;&#x7528; Driver &#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x4F60;&#x6253;&#x5F00;&#x4E86;&#x4E00;&#x4E2A;&#x6D4F;&#x89C8;&#x5668;&#x505A;&#x4E86;&#x4E9B;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;&#x3002;</p>\n<a id=\"more\"></a>\n<p>&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x63A8;&#x8350;&#x51E0;&#x4E2A; Driver &#xFF1A;</p>\n<ol type=\"1\">\n<li>Firefox: https://github.com/mozilla/geckodriver/releases</li>\n<li>Chrome: https://sites.google.com/a/chromium.org/chromedriver/downloads</li>\n<li>PhantomJS: http://phantomjs.org/download.html</li>\n</ol>\n<p>&#xFF08;&#x5982;&#x679C;&#x4F60;&#x662F;Windows&#x7528;&#x6237;&#xFF0C;&#x8FD9;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#x4E5F;&#x9700;&#x8981;&#x53C2;&#x8003;&#xFF1A;http://selenium-python.readthedocs.io/installation.html#detailed-instructions-for-windows-users&#xFF09;</p>\n<p>&#x4E0B;&#x8F7D;&#x540E;&#xFF0C;&#x6211;&#x5EFA;&#x8BAE;&#x5C06;&#x53EF;&#x6267;&#x884C;&#x6587;&#x4EF6;&#x52A0;&#x5165;&#x73AF;&#x5883;&#x4E2D;&#xFF0C;&#x4EE5;&#x5907;&#x4F7F;&#x7528;&#x3002;</p>\n<p>Firefox &#x548C; Chrome &#x76F8;&#x4FE1;&#x5927;&#x5BB6;&#x90FD;&#x6BD4;&#x8F83;&#x719F;&#x6089;&#x3002;PhantomJS &#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x8BA9;&#x4F60;&#x65E0;&#x9700;&#x6D4F;&#x89C8;&#x5668;&#x5C31;&#x8FDB;&#x884C;&#x7F51;&#x9875;&#x76F8;&#x5173;&#x64CD;&#x4F5C;&#x7684;<a href=\"https://zh.wikipedia.org/wiki/WebKit\" target=\"_blank\" rel=\"noopener\">WebKit</a>&#xFF0C;&#x5B83;&#x4E5F;&#x6CA1;&#x6709;&#x56FE;&#x5F62;&#x754C;&#x9762;&#x3002;&#x4E2A;&#x4EBA;&#x6BD4;&#x8F83;&#x63A8;&#x8350;&#x5728;&#x8C03;&#x8BD5;&#x7A0B;&#x5E8F;&#x671F;&#x95F4;&#x4F7F;&#x7528; Firefox &#x6216;&#x662F; Chrome &#xFF0C;&#x8FD9;&#x6837;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x89C2;&#x5BDF;&#x53D1;&#x73B0;&#x81EA;&#x5DF1;&#x54EA;&#x91CC;&#x51FA;&#x4E86;&#x9519;&#x3002;&#x5728;&#x8C03;&#x8BD5;&#x5B8C;&#x6210;&#x540E;&#x4F7F;&#x7528; PhantomJS &#xFF0C;&#x6765;&#x907F;&#x514D;&#x591A;&#x4F59;&#x7684;&#x53EF;&#x89C6;&#x5316;&#x6E32;&#x67D3;&#x3002;</p>\n<h1 id=\"&#x521B;&#x5EFA;&#x4E00;&#x4E2A;-webdriver\">&#x521B;&#x5EFA;&#x4E00;&#x4E2A; WebDriver</h1>\n<p>&#x5229;&#x7528; Selenium &#x521B;&#x5EFA; WebDriver &#x5341;&#x5206;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">driver = webdriver.Firefox()  <span class=\"comment\"># &#x5982;&#x679C; Firefox &#x6240;&#x65F6;&#x4F7F;&#x7528;&#x7684; geckodriver &#x5728;&#x73AF;&#x5883;&#x4E2D;</span></span><br><span class=\"line\"><span class=\"comment\"># driver = webdriver.PhantomJS()  # &#x5982;&#x679C;&#x4F60;&#x60F3;&#x4F7F;&#x7528; PhantomJS</span></span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x81EA;&#x5B9A;&#x4E49;&#x8DEF;&#x5F84;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F20;&#x5165;&#x53C2;&#x6570; <code>executable_path</code>&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = webdriver.Firefox(executable_path=<span class=\"string\">&quot;/path/to/geckodriver&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528; Firefox &#x6216; Chrome&#xFF0C;&#x4F60;&#x4F1A;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x6253;&#x5F00;&#x4E00;&#x4E2A;&#x6D4F;&#x89C8;&#x5668;&#x3002;</p>\n<h1 id=\"&#x89C2;&#x5BDF;&#x7F51;&#x9875;&#x672C;&#x8EAB;\">&#x89C2;&#x5BDF;&#x7F51;&#x9875;&#x672C;&#x8EAB;</h1>\n<p>&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6F14;&#x793A;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x65B0;&#x6D6A;&#x7684;&#x79FB;&#x52A8;&#x7248;&#x8FDB;&#x884C;&#x767B;&#x5F55;&#x3002;&#x5982;&#x679C;&#x60F3;&#x51B3;&#x5B9A;&#x5982;&#x4F55;&#x64CD;&#x4F5C;&#x4E00;&#x4E2A;&#x7F51;&#x9875;&#xFF0C;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x8981;&#x89C2;&#x5BDF;&#x7F51;&#x9875;&#x672C;&#x8EAB;&#x3002;</p>\n<p>&#x53F3;&#x952E;&#x767B;&#x5F55;&#x7684;&#x5730;&#x65B9;&#x5E76;&#x5BA1;&#x67E5;&#x5143;&#x7D20;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x5176;&#x5B9E;&#x662F;&#x7B80;&#x5355;&#x7684;&#x8F93;&#x5165;&#x6846;&#xFF0C;&#x800C;&#x767B;&#x5F55;&#x6309;&#x94AE;&#x662F;&#x4E00;&#x4E2A;&#x94FE;&#x63A5;&#x800C;&#x5DF2;&#x3002;</p>\n<p><img src=\"http://osvlzj5nm.bkt.clouddn.com/17-7-14/91396431.jpg\"></p>\n<p>&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x7B80;&#x5355;&#x89C4;&#x5212;&#x4E4B;&#x540E;&#x8981;&#x505A;&#x7684;&#x4E8B;&#x60C5;&#xFF1A;</p>\n<ol type=\"1\">\n<li>&#x8F93;&#x5165;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;</li>\n<li>&#x70B9;&#x51FB;&#x767B;&#x5F55;&#x6309;&#x94AE;&#xFF08;&#x6216;&#x6441;&#x56DE;&#x8F66;&#xFF09;</li>\n</ol>\n<h1 id=\"&#x5229;&#x7528;-selenium-&#x8FDB;&#x884C;&#x767B;&#x5F55;&#x64CD;&#x4F5C;\">&#x5229;&#x7528; Selenium &#x8FDB;&#x884C;&#x767B;&#x5F55;&#x64CD;&#x4F5C;</h1>\n<h2 id=\"&#x6253;&#x5F00;&#x7F51;&#x9875;\">&#x6253;&#x5F00;&#x7F51;&#x9875;</h2>\n<p>Selenium &#x63D0;&#x4F9B;&#x4E86;&#x65B9;&#x6CD5;&#x7684;<code>get</code>&#x65B9;&#x6CD5;&#x7528;&#x4EE5;&#x83B7;&#x53D6;&#x7F51;&#x9875;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get(<span class=\"string\">&apos;https://passport.weibo.cn/signin/login&apos;</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528; Firefox &#x6216; Chrome&#xFF0C;&#x4F60;&#x4F1A;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x6253;&#x5F00;&#x5FAE;&#x535A;&#x624B;&#x673A;&#x7248;&#x7684;&#x767B;&#x5F55;&#x9875;&#x9762;&#x3002;</p>\n<h2 id=\"&#x5B9A;&#x4F4D;&#x5143;&#x7D20;\">&#x5B9A;&#x4F4D;&#x5143;&#x7D20;</h2>\n<p>&#x7531;&#x7F51;&#x9875;&#x672C;&#x8EAB;&#x7684;&#x7ED3;&#x6784;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x8F93;&#x5165;&#x6846;&#x548C;&#x767B;&#x5F55;&#x94FE;&#x63A5;&#x5143;&#x7D20;&#x7684;<code>id</code>&#x5C5E;&#x6027;&#x90FD;&#x662F;&#x9875;&#x9762;&#x4E2D;&#x72EC;&#x4E00;&#x65E0;&#x4E8C;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x4FBF;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x8FD9;&#x4E00;&#x7279;&#x70B9;&#x5BFB;&#x627E;&#x5230;&#x5143;&#x7D20;&#x672C;&#x8EAB;&#x3002;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_field = driver.find_element_by_id(<span class=\"string\">&apos;loginName&apos;</span>)  <span class=\"comment\"># &#x7528;&#x6237;&#x540D;&#x8F93;&#x5165;&#x6846;</span></span><br><span class=\"line\">password_field = driver.find_element_by_id(<span class=\"string\">&apos;loginPassword&apos;</span>)  <span class=\"comment\"># &#x5BC6;&#x7801;&#x8F93;&#x5165;&#x6846;</span></span><br><span class=\"line\">submit_button = driver.find_element_by_id(<span class=\"string\">&apos;loginAction&apos;</span>)  <span class=\"comment\"># &#x767B;&#x5F55;&#x952E;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x8F93;&#x5165;&#x5185;&#x5BB9;\">&#x8F93;&#x5165;&#x5185;&#x5BB9;</h2>\n<p>Selenium &#x63D0;&#x4F9B;&#x4E86;&#x4E3A;&#x5143;&#x7D20;&#x8F93;&#x5165;&#x7684;&#x65B9;&#x6CD5; <code>send_keys()</code>&#xFF0C;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x8FD9;&#x4E00;&#x65B9;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5;&#x628A;&#x5185;&#x5BB9;&#x8F93;&#x5165;&#x5230;&#x7F51;&#x9875;&#x4E2D;&#x7684;&#x8F93;&#x5165;&#x6846;&#x5185;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_field.send_keys(<span class=\"string\">&apos;&#x4F60;&#x7684;&#x7528;&#x6237;&#x540D;&apos;</span>)</span><br><span class=\"line\">password_field.send_keys(<span class=\"string\">&apos;&#x4F60;&#x7684;&#x5BC6;&#x7801;&apos;</span>)</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528; Firefox &#x6216; Chrome &#xFF0C;&#x4F60;&#x4F1A;&#x770B;&#x5230;&#x9875;&#x9762;&#x4E2D;&#x7684;&#x4E24;&#x4E2A;&#x8F93;&#x5165;&#x6846;&#x88AB;&#x586B;&#x5165;&#x4F60;&#x5728;&#x7A0B;&#x5E8F;&#x4E2D;&#x8F93;&#x5165;&#x7684;&#x6587;&#x5B57;&#x3002;</p>\n<p>&#x70B9;&#x51FB;&#x6309;&#x94AE;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x5DF2;&#x7ECF;&#x83B7;&#x53D6;&#x4E86;&#x5143;&#x7D20;&#xFF0C;&#x53EA;&#x8981;&#x4F7F;&#x7528;<code>click()</code>&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">submit_button.click()  <span class=\"comment\"># &#x5355;&#x51FB;&#x5143;&#x7D20;</span></span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x56DE;&#x8F66;&#x952E;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;<code>send_keys()</code>&#x6765;&#x53D1;&#x9001;&#x56DE;&#x8F66;&#xFF08;<code>Keys.RETURN</code>&#xFF09;&#xFF0C;&#x6211;&#x5728;&#x8FD9;&#x91CC;&#x4E0D;&#x5C55;&#x5F00;&#x63CF;&#x8FF0;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x62C5;&#x5FC3;&#x4E24;&#x4E2A;&#x8F93;&#x5165;&#x6846;&#x5728;&#x4F60;&#x8F93;&#x5165;&#x524D;&#x5C31;&#x5DF2;&#x7ECF;&#x6709;&#x4E86;&#x5176;&#x4ED6;&#x5185;&#x5BB9;&#x800C;&#x5F71;&#x54CD;&#x64CD;&#x4F5C;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;<code>clear()</code>&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x4E14;&#x6211;&#x5728;&#x8FD9;&#x91CC;&#x4E5F;&#x66F4;&#x52A0;&#x63A8;&#x8350;&#x8FD9;&#x6837;&#x7684;&#x505A;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_field.clear()  <span class=\"comment\"># &#x6E05;&#x9664;&#x7528;&#x6237;&#x540D;&#x533A;&#x57DF;</span></span><br><span class=\"line\">name_field.send_keys(<span class=\"string\">&apos;&#x4F60;&#x7684;&#x7528;&#x6237;&#x540D;&apos;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">password_field.clear()  <span class=\"comment\"># &#x6E05;&#x9664;&#x5BC6;&#x7801;&#x533A;&#x57DF;</span></span><br><span class=\"line\">password_field.send_keys(<span class=\"string\">&apos;&#x4F60;&#x7684;&#x5BC6;&#x7801;&apos;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x83B7;&#x53D6;-cookies\">&#x83B7;&#x53D6; Cookies</h2>\n<p>&#x4ECE; WebDriver &#x83B7;&#x53D6; Cookies &#x53EA;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C; <code>get_cookies()</code>&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get_cookies()</span><br></pre></td></tr></table></figure>\n<p>&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x6587;&#x4EF6;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x5B57;&#x5178;&#x6587;&#x4EF6;&#x662F;&#x4E00;&#x4E2A; Cookie&#x3002;&#x5982;&#x679C;&#x4F60;&#x4EEC;&#x8981;&#x5728;&#x5176;&#x4ED6; WebDriver &#x6216;&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x4F7F;&#x7528;&#x8FD9;&#x7EC4; Cookies &#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x6765;&#x7ED9; WebDriver &#x5229;&#x7528;<code>add_cookie</code>&#x65B9;&#x6CD5;&#x6DFB;&#x52A0;&#x662F;&#x6BD4;&#x8F83;&#x6807;&#x51C6;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> driver.get_cookies():</span><br><span class=\"line\">    another_driver.add_cookie(cookie)</span><br></pre></td></tr></table></figure>\n<h2 id=\"&#x7B49;&#x5F85;&#x7F51;&#x9875;&#x8F7D;&#x5165;\">&#x7B49;&#x5F85;&#x7F51;&#x9875;&#x8F7D;&#x5165;</h2>\n<p>&#x5982;&#x679C;&#x4F60;&#x4EC5;&#x4EC5;&#x6267;&#x884C;&#x4E0A;&#x8FF0;&#x4EE3;&#x7801;&#xFF0C;&#x4F60;&#x4F1A;&#x53D1;&#x73B0;&#x5982;&#x679C;&#x4F60;&#x7684;&#x7F51;&#x901F;&#x4E0D;&#x591F;&#x5FEB;&#xFF0C;&#x6216;&#x662F;&#x7535;&#x8111;&#x4E0D;&#x591F;&#x597D;&#xFF0C;&#x5C31;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x5728;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x524D;&#x5C31;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x7136;&#x540E;&#x51FA;&#x73B0;&#x65E0;&#x6CD5;&#x627E;&#x5230;&#x5143;&#x7D20;&#x6216;&#x662F;&#x5143;&#x7D20;&#x4E0D;&#x53EF;&#x89C1;&#x7B49;&#x9519;&#x8BEF;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7B49;&#x5F85;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x6765;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#x5728;&#x83B7;&#x53D6;&#x7F51;&#x9875;&#x540E;</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># &#x7B49;&#x5F85;2&#x79D2;</span></span><br></pre></td></tr></table></figure>\n<p>&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x4E5F;&#x5341;&#x5206;&#x7C97;&#x66B4;&#xFF1A;&#x56E0;&#x4E3A;&#x4F60;&#x65E0;&#x6CD5;&#x786E;&#x5B9A;2&#x79D2;&#x65F6;&#x95F4;&#x8DB3;&#x591F;&#x8BA9;&#x7F51;&#x9875;&#x52A0;&#x8F7D;&#x5B8C;&#x6210;&#x3002;&#x6BCF;&#x6B21;&#x6253;&#x5F00;&#x7F51;&#x9875;&#x7684;&#x65F6;&#x95F4;&#x53D7;&#x9650;&#x4E8E;&#x8BB8;&#x591A;&#x56E0;&#x7D20;&#xFF0C;&#x4F60;&#x53EF;&#x80FD;&#x5F88;&#x96BE;&#x7528;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x6765;&#x51B3;&#x5B9A;&#x3002;&#x800C; Selenium &#x672C;&#x8EAB;&#x4E5F;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x597D;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#x5728;&#x83B7;&#x53D6;&#x7F51;&#x9875;&#x540E;</span></span><br><span class=\"line\">WebDriverWait(driver, <span class=\"number\">20</span>).until(</span><br><span class=\"line\">    EC.presence_of_element_located((By.ID, <span class=\"string\">&apos;loginName&apos;</span>))) </span><br><span class=\"line\"><span class=\"comment\"># &#x7B49;&#x5F85; id &#x4E3A; loginName&#x7684;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#xFF0C;&#x6700;&#x591A;20&#x79D2;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"&#x7ED3;&#x8BED;\">&#x7ED3;&#x8BED;</h1>\n<p>&#x5982;&#x4F55;&#x767B;&#x5F55;&#x7F51;&#x7AD9;&#x5BF9;&#x4E8E;&#x6536;&#x96C6;&#x6570;&#x636E;&#x7684;&#x4EBA;&#x800C;&#x8A00;&#x662F;&#x4E2A;&#x4E0D;&#x5927;&#x4E0D;&#x5C0F;&#x7684;&#x95EE;&#x9898;&#x3002;&#x901A;&#x8FC7;&#x4F7F;&#x7528; Selenium&#xFF0C;&#x6211;&#x4EEC;&#x51E0;&#x4E4E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5404;&#x79CD;&#x65B9;&#x6CD5;&#x6A21;&#x62DF;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x800C;&#x4E14;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#x53EA;&#x8981;&#x6D4F;&#x89C8;&#x5668;&#x5B58;&#x5728;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;&#x3002;&#x6211;&#x76F8;&#x4FE1;&#x5982;&#x4F55;&#x89C2;&#x5BDF;&#x7F51;&#x9875;&#x7684;&#x7ED3;&#x6784;&#x4EE5;&#x53CA;&#x5229;&#x7528;&#x662F;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#x6280;&#x80FD;&#x3002;</p>\n<h2 id=\"&#x5B8C;&#x6574;&#x4EE3;&#x7801;\">&#x5B8C;&#x6574;&#x4EE3;&#x7801;</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.PhantomJS()</span><br><span class=\"line\">driver.get(<span class=\"string\">&apos;https://passport.weibo.cn/signin/login&apos;</span>)</span><br><span class=\"line\">WebDriverWait(driver, <span class=\"number\">20</span>).until(</span><br><span class=\"line\">    EC.presence_of_element_located((By.ID, <span class=\"string\">&apos;loginName&apos;</span>)))</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name_field = driver.find_element_by_id(<span class=\"string\">&apos;loginName&apos;</span>)</span><br><span class=\"line\">name_field.clear()</span><br><span class=\"line\">name_field.send_keys(<span class=\"string\">&apos;&#x4F60;&#x7684;&#x7528;&#x6237;&#x540D;&apos;</span>)</span><br><span class=\"line\">password_field = driver.find_element_by_id(<span class=\"string\">&apos;loginPassword&apos;</span>)</span><br><span class=\"line\">password_field.clear()</span><br><span class=\"line\">password_field.send_keys(<span class=\"string\">&apos;&#x4F60;&#x7684;&#x5BC6;&#x7801;&apos;</span>)</span><br><span class=\"line\">submit_button = driver.find_element_by_id(<span class=\"string\">&apos;loginAction&apos;</span>)</span><br><span class=\"line\">submit_button.click()</span><br><span class=\"line\"></span><br><span class=\"line\">print(driver.get_cookies())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>如何登录新浪微博是令许多数据新手（包括我）头疼的大问题。由于新浪的反爬虫策略，网上的教程往往撑不过几个月，查阅到的资料在半年前或是一年前——而它们早就无法使用了，在你想开始爬虫的时候被活生生卡在了第一步。</p>\n<p>简单而言，我使用的方法是通过 Selenium 模拟浏览器的行为，直接在浏览器中输入用户名和密码并登录，然后直接从浏览器中获取 Cookies。虽然听起来十分简单（实际上也十分简单），但是确实是十分有效的方式。只要一个网站能通过浏览器登陆，我们就可以简单改造这个程序来登录并获得想要的资料。</p>\n<h1 id=\"什么是selenium如何使用\">什么是Selenium？如何使用？</h1>\n<p>Selenium 是一个项目的名称，都与浏览器和网页测试相关。主要的工具也就是今天我们所要使用的，是WebDriver，是一个浏览器自动化工具。它为很多不同的语言提供了库，包括 Python、Java、Ruby 等。本文中我选择使用 Python 来进行操作，当然你也可以使用你熟悉的语言来进行操作。</p>\n<p>在 Python中使用 Selenium 只需要通过<code>pip</code>安装 Selenium 提供的 Python 库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install selenium  # 如果你使用 Python 2 ，请使用 pip install selenium</span><br></pre></td></tr></table></figure>\n<p>仅仅安装 Selenium 本身是不够的，你同时还需要安装 Driver 。你可以将 Driver 理解为浏览器本身的『驱动』，在程序中使用 Driver 就相当于你打开了一个浏览器做了些什么事情。</p>","more":"<p>在这里我们推荐几个 Driver ：</p>\n<ol type=\"1\">\n<li>Firefox: https://github.com/mozilla/geckodriver/releases</li>\n<li>Chrome: https://sites.google.com/a/chromium.org/chromedriver/downloads</li>\n<li>PhantomJS: http://phantomjs.org/download.html</li>\n</ol>\n<p>（如果你是Windows用户，这部分内容也需要参考：http://selenium-python.readthedocs.io/installation.html#detailed-instructions-for-windows-users）</p>\n<p>下载后，我建议将可执行文件加入环境中，以备使用。</p>\n<p>Firefox 和 Chrome 相信大家都比较熟悉。PhantomJS 是一个可以让你无需浏览器就进行网页相关操作的<a href=\"https://zh.wikipedia.org/wiki/WebKit\" target=\"_blank\" rel=\"noopener\">WebKit</a>，它也没有图形界面。个人比较推荐在调试程序期间使用 Firefox 或是 Chrome ，这样你可以通过观察发现自己哪里出了错。在调试完成后使用 PhantomJS ，来避免多余的可视化渲染。</p>\n<h1 id=\"创建一个-webdriver\">创建一个 WebDriver</h1>\n<p>利用 Selenium 创建 WebDriver 十分简单粗暴：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\">driver = webdriver.Firefox()  <span class=\"comment\"># 如果 Firefox 所时使用的 geckodriver 在环境中</span></span><br><span class=\"line\"><span class=\"comment\"># driver = webdriver.PhantomJS()  # 如果你想使用 PhantomJS</span></span><br></pre></td></tr></table></figure>\n<p>如果你需要自定义路径，你可以通过传入参数 <code>executable_path</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = webdriver.Firefox(executable_path=<span class=\"string\">\"/path/to/geckodriver\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你使用 Firefox 或 Chrome，你会看到这个操作打开一个浏览器。</p>\n<h1 id=\"观察网页本身\">观察网页本身</h1>\n<p>为了方便演示，我们使用新浪的移动版进行登录。如果想决定如何操作一个网页，首先我们要观察网页本身。</p>\n<p>右键登录的地方并审查元素，你会发现用户名和密码其实是简单的输入框，而登录按钮是一个链接而已。</p>\n<p><img src=\"http://osvlzj5nm.bkt.clouddn.com/17-7-14/91396431.jpg\"></p>\n<p>因此我们简单规划之后要做的事情：</p>\n<ol type=\"1\">\n<li>输入用户名和密码</li>\n<li>点击登录按钮（或摁回车）</li>\n</ol>\n<h1 id=\"利用-selenium-进行登录操作\">利用 Selenium 进行登录操作</h1>\n<h2 id=\"打开网页\">打开网页</h2>\n<p>Selenium 提供了方法的<code>get</code>方法用以获取网页：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get(<span class=\"string\">'https://passport.weibo.cn/signin/login'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你使用 Firefox 或 Chrome，你会看到这个操作打开微博手机版的登录页面。</p>\n<h2 id=\"定位元素\">定位元素</h2>\n<p>由网页本身的结构我们发现，这两个输入框和登录链接元素的<code>id</code>属性都是页面中独一无二的，我们便可以利用这一特点寻找到元素本身。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_field = driver.find_element_by_id(<span class=\"string\">'loginName'</span>)  <span class=\"comment\"># 用户名输入框</span></span><br><span class=\"line\">password_field = driver.find_element_by_id(<span class=\"string\">'loginPassword'</span>)  <span class=\"comment\"># 密码输入框</span></span><br><span class=\"line\">submit_button = driver.find_element_by_id(<span class=\"string\">'loginAction'</span>)  <span class=\"comment\"># 登录键</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输入内容\">输入内容</h2>\n<p>Selenium 提供了为元素输入的方法 <code>send_keys()</code>，直接调用这一方法就可以把内容输入到网页中的输入框内：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_field.send_keys(<span class=\"string\">'你的用户名'</span>)</span><br><span class=\"line\">password_field.send_keys(<span class=\"string\">'你的密码'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你使用 Firefox 或 Chrome ，你会看到页面中的两个输入框被填入你在程序中输入的文字。</p>\n<p>点击按钮的方法也很简单，如果你已经获取了元素，只要使用<code>click()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">submit_button.click()  <span class=\"comment\"># 单击元素</span></span><br></pre></td></tr></table></figure>\n<p>如果你需要使用回车键，可以使用<code>send_keys()</code>来发送回车（<code>Keys.RETURN</code>），我在这里不展开描述。</p>\n<p>如果你担心两个输入框在你输入前就已经有了其他内容而影响操作，你可以使用<code>clear()</code>方法，并且我在这里也更加推荐这样的做法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_field.clear()  <span class=\"comment\"># 清除用户名区域</span></span><br><span class=\"line\">name_field.send_keys(<span class=\"string\">'你的用户名'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">password_field.clear()  <span class=\"comment\"># 清除密码区域</span></span><br><span class=\"line\">password_field.send_keys(<span class=\"string\">'你的密码'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取-cookies\">获取 Cookies</h2>\n<p>从 WebDriver 获取 Cookies 只需要一个操作 <code>get_cookies()</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get_cookies()</span><br></pre></td></tr></table></figure>\n<p>它是一个字典文件的列表，每一个字典文件是一个 Cookie。如果你们要在其他 WebDriver 或浏览器中使用这组 Cookies ，使用一个循环来给 WebDriver 利用<code>add_cookie</code>方法添加是比较标准的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> driver.get_cookies():</span><br><span class=\"line\">    another_driver.add_cookie(cookie)</span><br></pre></td></tr></table></figure>\n<h2 id=\"等待网页载入\">等待网页载入</h2>\n<p>如果你仅仅执行上述代码，你会发现如果你的网速不够快，或是电脑不够好，就非常容易在元素出现前就进行操作，然后出现无法找到元素或是元素不可见等错误，我们可以通过等待一段时间来解决这个问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在获取网页后</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># 等待2秒</span></span><br></pre></td></tr></table></figure>\n<p>这种做法比较简单，但也十分粗暴：因为你无法确定2秒时间足够让网页加载完成。每次打开网页的时间受限于许多因素，你可能很难用一个固定的时间来决定。而 Selenium 本身也提供了一些好用的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在获取网页后</span></span><br><span class=\"line\">WebDriverWait(driver, <span class=\"number\">20</span>).until(</span><br><span class=\"line\">    EC.presence_of_element_located((By.ID, <span class=\"string\">'loginName'</span>))) </span><br><span class=\"line\"><span class=\"comment\"># 等待 id 为 loginName的元素出现，最多20秒</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"结语\">结语</h1>\n<p>如何登录网站对于收集数据的人而言是个不大不小的问题。通过使用 Selenium，我们几乎可以通过各种方法模拟浏览器的操作，而且这种方法是只要浏览器存在就可以使用的。我相信如何观察网页的结构以及利用是非常有用的技能。</p>\n<h2 id=\"完整代码\">完整代码</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.PhantomJS()</span><br><span class=\"line\">driver.get(<span class=\"string\">'https://passport.weibo.cn/signin/login'</span>)</span><br><span class=\"line\">WebDriverWait(driver, <span class=\"number\">20</span>).until(</span><br><span class=\"line\">    EC.presence_of_element_located((By.ID, <span class=\"string\">'loginName'</span>)))</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name_field = driver.find_element_by_id(<span class=\"string\">'loginName'</span>)</span><br><span class=\"line\">name_field.clear()</span><br><span class=\"line\">name_field.send_keys(<span class=\"string\">'你的用户名'</span>)</span><br><span class=\"line\">password_field = driver.find_element_by_id(<span class=\"string\">'loginPassword'</span>)</span><br><span class=\"line\">password_field.clear()</span><br><span class=\"line\">password_field.send_keys(<span class=\"string\">'你的密码'</span>)</span><br><span class=\"line\">submit_button = driver.find_element_by_id(<span class=\"string\">'loginAction'</span>)</span><br><span class=\"line\">submit_button.click()</span><br><span class=\"line\"></span><br><span class=\"line\">print(driver.get_cookies())</span><br></pre></td></tr></table></figure>"},{"title":"youtube-dl：一个命令行视频下载利器","date":"2017-07-05T16:00:00.000Z","_content":"\nyoutube-dl 的官网：http://rg3.github.io/youtube-dl/index.html\n\nyoutube-dl 的 GitHub 页面：https://github.com/rg3/youtube-dl（喜欢的话给作者star哦~）\n\n## Youtube-dl 有什么用？\n\nyoutube-dl 是一个命令行工具，对我所知的[大部分视频网站](https://github.com/rg3/youtube-dl/tree/master/youtube_dl/extractor)有不错的支持，你可以选择下载视频，或是将视频流直接导出到自己想使用的播放器中，也可以以JSON的形式获取可下载资源的URL。\n\n使用方便、足够简洁，这是我在这里推荐的理由。\n\n\n\n## 安装 Youtube-dl\n\nYoutube-dl 通过 PyPi 分发，如果你的系统安装有 `pip3` 或 `pip` ，请直接使用：\n\n```shell\nsudo pip install --upgrade youtube_dl # 或pip3\n```\n\n如果你是 macOS 用户，也可以使用：\n\n```shell\nbrew install youtube-dl\n```\n\n官网上的[这个页面](http://rg3.github.io/youtube-dl/download.html)还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。\n\n\n\n## 利用 Youtube-dl 下载\n\n#### 普通下载\n\n通过 Youtube-dl 下载视频十分简洁，例如你需要下载http://www.bilibili.com/video/av11728123/ 你可以这样：\n\n```shell\nyoutube-dl 'http://www.bilibili.com/video/av11728123/'\n```\n\n<!--more-->\n\n你会得到这样的结果：\n\n```\n[BiliBili] 11728123: Downloading webpage\n[BiliBili] 11728123: Downloading video info page\n[download] Destination: 【全明星freestyle】音浪-11728123.mp4\n[download] 100% of 9.07MiB in 00:01\n```\n\n如果你不进行任何特殊的指定，它会分析网页、自动选择默认画质并下载至`Destination`显示的文件中。\n\n\n\n#### 输出文件的名字\n\n如果你想指定输出文件的名字（有时对批量下载的人来说十分重要），你可以使用`-o`：\n\n```shell\nyoutube-dl 'http://www.bilibili.com/video/av11728123/' -o '你要的名字'\n# 下载至文件：你要的名字 (无后缀)\n```\n\n当然，请注意你选择的名字的拓展名，youtube-dl 并不会自动修改你所指定的后缀名。youtube-dl 同时也支持 [OUTPUT TEMPLATE](https://github.com/rg3/youtube-dl#output-template)，你可以利用 `%(title)s`等参数（参考 Python 的字符串形式）将文件命名，例如：\n\n```shell\nyoutube-dl 'http://www.bilibili.com/video/av11728123/' -o '%(title)s.%(ext)s'\n# 下载至文件：【全明星freestyle】音浪.mp4\n```\n\n\n\n#### 使用代理下载\n\nyoutube-dl 提供了使用代理的参数，你可以简单地将自己代理的地址填入：\n\n```shell\nyoutube-dl --proxy 127.0.0.1:1087 'https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4'\n# 成功通过ss在国内下载某不存在网站的视频\n```\n\n如果你不清楚如何使用自己的代理网址，请询问你的代理提供商。\n\n\n\n#### 将流文件直接转发到播放器\n\n你可以使用标准输入输出进行这一操作，下面是使用 vlc 播放的方法：\n\n```shell\nyoutube-dl -o - \"https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4\" | vlc -\n```\n\n\n\n#### 其他下载选项\n\nyoutube-dl 还提供很多其他的下载选项，如挑选合适的分辨率，下载一个播放列表等，你可以研究并自定义如何下载一个文件。\n\n\n\n## 国内的 youtube-dl： You-Get\n\nYou-Get的GitHub地址：https://github.com/soimort/you-get\n\n事实上而言，我发现You-Get对国内视频网站的支持更加全面，但是由于作者已经有大约两个月的时间没有维护了，我在这里不作推荐。但是如果你遇到无法使用youtube-dl下载的视频页面，不妨试试这个同类小工具。","source":"_posts/youtube-dl.md","raw":"---\ntitle: youtube-dl：一个命令行视频下载利器\ndate: 2017-07-06\ncategory: 软件推荐\ntags: \n- 软件\n- 命令行\n---\n\nyoutube-dl 的官网：http://rg3.github.io/youtube-dl/index.html\n\nyoutube-dl 的 GitHub 页面：https://github.com/rg3/youtube-dl（喜欢的话给作者star哦~）\n\n## Youtube-dl 有什么用？\n\nyoutube-dl 是一个命令行工具，对我所知的[大部分视频网站](https://github.com/rg3/youtube-dl/tree/master/youtube_dl/extractor)有不错的支持，你可以选择下载视频，或是将视频流直接导出到自己想使用的播放器中，也可以以JSON的形式获取可下载资源的URL。\n\n使用方便、足够简洁，这是我在这里推荐的理由。\n\n\n\n## 安装 Youtube-dl\n\nYoutube-dl 通过 PyPi 分发，如果你的系统安装有 `pip3` 或 `pip` ，请直接使用：\n\n```shell\nsudo pip install --upgrade youtube_dl # 或pip3\n```\n\n如果你是 macOS 用户，也可以使用：\n\n```shell\nbrew install youtube-dl\n```\n\n官网上的[这个页面](http://rg3.github.io/youtube-dl/download.html)还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。\n\n\n\n## 利用 Youtube-dl 下载\n\n#### 普通下载\n\n通过 Youtube-dl 下载视频十分简洁，例如你需要下载http://www.bilibili.com/video/av11728123/ 你可以这样：\n\n```shell\nyoutube-dl 'http://www.bilibili.com/video/av11728123/'\n```\n\n<!--more-->\n\n你会得到这样的结果：\n\n```\n[BiliBili] 11728123: Downloading webpage\n[BiliBili] 11728123: Downloading video info page\n[download] Destination: 【全明星freestyle】音浪-11728123.mp4\n[download] 100% of 9.07MiB in 00:01\n```\n\n如果你不进行任何特殊的指定，它会分析网页、自动选择默认画质并下载至`Destination`显示的文件中。\n\n\n\n#### 输出文件的名字\n\n如果你想指定输出文件的名字（有时对批量下载的人来说十分重要），你可以使用`-o`：\n\n```shell\nyoutube-dl 'http://www.bilibili.com/video/av11728123/' -o '你要的名字'\n# 下载至文件：你要的名字 (无后缀)\n```\n\n当然，请注意你选择的名字的拓展名，youtube-dl 并不会自动修改你所指定的后缀名。youtube-dl 同时也支持 [OUTPUT TEMPLATE](https://github.com/rg3/youtube-dl#output-template)，你可以利用 `%(title)s`等参数（参考 Python 的字符串形式）将文件命名，例如：\n\n```shell\nyoutube-dl 'http://www.bilibili.com/video/av11728123/' -o '%(title)s.%(ext)s'\n# 下载至文件：【全明星freestyle】音浪.mp4\n```\n\n\n\n#### 使用代理下载\n\nyoutube-dl 提供了使用代理的参数，你可以简单地将自己代理的地址填入：\n\n```shell\nyoutube-dl --proxy 127.0.0.1:1087 'https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4'\n# 成功通过ss在国内下载某不存在网站的视频\n```\n\n如果你不清楚如何使用自己的代理网址，请询问你的代理提供商。\n\n\n\n#### 将流文件直接转发到播放器\n\n你可以使用标准输入输出进行这一操作，下面是使用 vlc 播放的方法：\n\n```shell\nyoutube-dl -o - \"https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4\" | vlc -\n```\n\n\n\n#### 其他下载选项\n\nyoutube-dl 还提供很多其他的下载选项，如挑选合适的分辨率，下载一个播放列表等，你可以研究并自定义如何下载一个文件。\n\n\n\n## 国内的 youtube-dl： You-Get\n\nYou-Get的GitHub地址：https://github.com/soimort/you-get\n\n事实上而言，我发现You-Get对国内视频网站的支持更加全面，但是由于作者已经有大约两个月的时间没有维护了，我在这里不作推荐。但是如果你遇到无法使用youtube-dl下载的视频页面，不妨试试这个同类小工具。","slug":"youtube-dl","published":1,"updated":"2018-07-03T13:44:30.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjatgi4t0012xtd3cjwx78dc","content":"<p>youtube-dl &#x7684;&#x5B98;&#x7F51;&#xFF1A;http://rg3.github.io/youtube-dl/index.html</p>\n<p>youtube-dl &#x7684; GitHub &#x9875;&#x9762;&#xFF1A;https://github.com/rg3/youtube-dl&#xFF08;&#x559C;&#x6B22;&#x7684;&#x8BDD;&#x7ED9;&#x4F5C;&#x8005;star&#x54E6;~&#xFF09;</p>\n<h2 id=\"youtube-dl-&#x6709;&#x4EC0;&#x4E48;&#x7528;\">Youtube-dl &#x6709;&#x4EC0;&#x4E48;&#x7528;&#xFF1F;</h2>\n<p>youtube-dl &#x662F;&#x4E00;&#x4E2A;&#x547D;&#x4EE4;&#x884C;&#x5DE5;&#x5177;&#xFF0C;&#x5BF9;&#x6211;&#x6240;&#x77E5;&#x7684;<a href=\"https://github.com/rg3/youtube-dl/tree/master/youtube_dl/extractor\" target=\"_blank\" rel=\"noopener\">&#x5927;&#x90E8;&#x5206;&#x89C6;&#x9891;&#x7F51;&#x7AD9;</a>&#x6709;&#x4E0D;&#x9519;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x4E0B;&#x8F7D;&#x89C6;&#x9891;&#xFF0C;&#x6216;&#x662F;&#x5C06;&#x89C6;&#x9891;&#x6D41;&#x76F4;&#x63A5;&#x5BFC;&#x51FA;&#x5230;&#x81EA;&#x5DF1;&#x60F3;&#x4F7F;&#x7528;&#x7684;&#x64AD;&#x653E;&#x5668;&#x4E2D;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4EE5;JSON&#x7684;&#x5F62;&#x5F0F;&#x83B7;&#x53D6;&#x53EF;&#x4E0B;&#x8F7D;&#x8D44;&#x6E90;&#x7684;URL&#x3002;</p>\n<p>&#x4F7F;&#x7528;&#x65B9;&#x4FBF;&#x3001;&#x8DB3;&#x591F;&#x7B80;&#x6D01;&#xFF0C;&#x8FD9;&#x662F;&#x6211;&#x5728;&#x8FD9;&#x91CC;&#x63A8;&#x8350;&#x7684;&#x7406;&#x7531;&#x3002;</p>\n<h2 id=\"&#x5B89;&#x88C5;-youtube-dl\">&#x5B89;&#x88C5; Youtube-dl</h2>\n<p>Youtube-dl &#x901A;&#x8FC7; PyPi &#x5206;&#x53D1;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x7684;&#x7CFB;&#x7EDF;&#x5B89;&#x88C5;&#x6709; <code>pip3</code> &#x6216; <code>pip</code> &#xFF0C;&#x8BF7;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install --upgrade youtube_dl # &#x6216;pip3</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x662F; macOS &#x7528;&#x6237;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install youtube-dl</span><br></pre></td></tr></table></figure>\n<p>&#x5B98;&#x7F51;&#x4E0A;&#x7684;<a href=\"http://rg3.github.io/youtube-dl/download.html\" target=\"_blank\" rel=\"noopener\">&#x8FD9;&#x4E2A;&#x9875;&#x9762;</a>&#x8FD8;&#x63D0;&#x4F9B;&#x4E86; Windows &#x53EF;&#x7528;&#x7684; exe &#x548C;&#x76F4;&#x63A5;&#x901A;&#x8FC7; curl &#x6216; wget &#x5B89;&#x88C5;&#x7684;&#x65B9;&#x6CD5;&#x3002;</p>\n<h2 id=\"&#x5229;&#x7528;-youtube-dl-&#x4E0B;&#x8F7D;\">&#x5229;&#x7528; Youtube-dl &#x4E0B;&#x8F7D;</h2>\n<h4 id=\"&#x666E;&#x901A;&#x4E0B;&#x8F7D;\">&#x666E;&#x901A;&#x4E0B;&#x8F7D;</h4>\n<p>&#x901A;&#x8FC7; Youtube-dl &#x4E0B;&#x8F7D;&#x89C6;&#x9891;&#x5341;&#x5206;&#x7B80;&#x6D01;&#xFF0C;&#x4F8B;&#x5982;&#x4F60;&#x9700;&#x8981;&#x4E0B;&#x8F7D;http://www.bilibili.com/video/av11728123/ &#x4F60;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl &apos;http://www.bilibili.com/video/av11728123/&apos;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>&#x4F60;&#x4F1A;&#x5F97;&#x5230;&#x8FD9;&#x6837;&#x7684;&#x7ED3;&#x679C;&#xFF1A;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[BiliBili] 11728123: Downloading webpage</span><br><span class=\"line\">[BiliBili] 11728123: Downloading video info page</span><br><span class=\"line\">[download] Destination: &#x3010;&#x5168;&#x660E;&#x661F;freestyle&#x3011;&#x97F3;&#x6D6A;-11728123.mp4</span><br><span class=\"line\">[download] 100% of 9.07MiB in 00:01</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x8FDB;&#x884C;&#x4EFB;&#x4F55;&#x7279;&#x6B8A;&#x7684;&#x6307;&#x5B9A;&#xFF0C;&#x5B83;&#x4F1A;&#x5206;&#x6790;&#x7F51;&#x9875;&#x3001;&#x81EA;&#x52A8;&#x9009;&#x62E9;&#x9ED8;&#x8BA4;&#x753B;&#x8D28;&#x5E76;&#x4E0B;&#x8F7D;&#x81F3;<code>Destination</code>&#x663E;&#x793A;&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#x3002;</p>\n<h4 id=\"&#x8F93;&#x51FA;&#x6587;&#x4EF6;&#x7684;&#x540D;&#x5B57;\">&#x8F93;&#x51FA;&#x6587;&#x4EF6;&#x7684;&#x540D;&#x5B57;</h4>\n<p>&#x5982;&#x679C;&#x4F60;&#x60F3;&#x6307;&#x5B9A;&#x8F93;&#x51FA;&#x6587;&#x4EF6;&#x7684;&#x540D;&#x5B57;&#xFF08;&#x6709;&#x65F6;&#x5BF9;&#x6279;&#x91CF;&#x4E0B;&#x8F7D;&#x7684;&#x4EBA;&#x6765;&#x8BF4;&#x5341;&#x5206;&#x91CD;&#x8981;&#xFF09;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;<code>-o</code>&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl &apos;http://www.bilibili.com/video/av11728123/&apos; -o &apos;&#x4F60;&#x8981;&#x7684;&#x540D;&#x5B57;&apos;</span><br><span class=\"line\"><span class=\"meta\">#</span> &#x4E0B;&#x8F7D;&#x81F3;&#x6587;&#x4EF6;&#xFF1A;&#x4F60;&#x8981;&#x7684;&#x540D;&#x5B57; (&#x65E0;&#x540E;&#x7F00;)</span><br></pre></td></tr></table></figure>\n<p>&#x5F53;&#x7136;&#xFF0C;&#x8BF7;&#x6CE8;&#x610F;&#x4F60;&#x9009;&#x62E9;&#x7684;&#x540D;&#x5B57;&#x7684;&#x62D3;&#x5C55;&#x540D;&#xFF0C;youtube-dl &#x5E76;&#x4E0D;&#x4F1A;&#x81EA;&#x52A8;&#x4FEE;&#x6539;&#x4F60;&#x6240;&#x6307;&#x5B9A;&#x7684;&#x540E;&#x7F00;&#x540D;&#x3002;youtube-dl &#x540C;&#x65F6;&#x4E5F;&#x652F;&#x6301; <a href=\"https://github.com/rg3/youtube-dl#output-template\" target=\"_blank\" rel=\"noopener\">OUTPUT TEMPLATE</a>&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5229;&#x7528; <code>%(title)s</code>&#x7B49;&#x53C2;&#x6570;&#xFF08;&#x53C2;&#x8003; Python &#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F;&#xFF09;&#x5C06;&#x6587;&#x4EF6;&#x547D;&#x540D;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl &apos;http://www.bilibili.com/video/av11728123/&apos; -o &apos;%(title)s.%(ext)s&apos;</span><br><span class=\"line\"><span class=\"meta\">#</span> &#x4E0B;&#x8F7D;&#x81F3;&#x6587;&#x4EF6;&#xFF1A;&#x3010;&#x5168;&#x660E;&#x661F;freestyle&#x3011;&#x97F3;&#x6D6A;.mp4</span><br></pre></td></tr></table></figure>\n<h4 id=\"&#x4F7F;&#x7528;&#x4EE3;&#x7406;&#x4E0B;&#x8F7D;\">&#x4F7F;&#x7528;&#x4EE3;&#x7406;&#x4E0B;&#x8F7D;</h4>\n<p>youtube-dl &#x63D0;&#x4F9B;&#x4E86;&#x4F7F;&#x7528;&#x4EE3;&#x7406;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x5730;&#x5C06;&#x81EA;&#x5DF1;&#x4EE3;&#x7406;&#x7684;&#x5730;&#x5740;&#x586B;&#x5165;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl --proxy 127.0.0.1:1087 &apos;https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4&apos;</span><br><span class=\"line\"><span class=\"meta\">#</span> &#x6210;&#x529F;&#x901A;&#x8FC7;ss&#x5728;&#x56FD;&#x5185;&#x4E0B;&#x8F7D;&#x67D0;&#x4E0D;&#x5B58;&#x5728;&#x7F51;&#x7AD9;&#x7684;&#x89C6;&#x9891;</span><br></pre></td></tr></table></figure>\n<p>&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x6E05;&#x695A;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x81EA;&#x5DF1;&#x7684;&#x4EE3;&#x7406;&#x7F51;&#x5740;&#xFF0C;&#x8BF7;&#x8BE2;&#x95EE;&#x4F60;&#x7684;&#x4EE3;&#x7406;&#x63D0;&#x4F9B;&#x5546;&#x3002;</p>\n<h4 id=\"&#x5C06;&#x6D41;&#x6587;&#x4EF6;&#x76F4;&#x63A5;&#x8F6C;&#x53D1;&#x5230;&#x64AD;&#x653E;&#x5668;\">&#x5C06;&#x6D41;&#x6587;&#x4EF6;&#x76F4;&#x63A5;&#x8F6C;&#x53D1;&#x5230;&#x64AD;&#x653E;&#x5668;</h4>\n<p>&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x8FDB;&#x884C;&#x8FD9;&#x4E00;&#x64CD;&#x4F5C;&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x4F7F;&#x7528; vlc &#x64AD;&#x653E;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl -o - &quot;https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4&quot; | vlc -</span><br></pre></td></tr></table></figure>\n<h4 id=\"&#x5176;&#x4ED6;&#x4E0B;&#x8F7D;&#x9009;&#x9879;\">&#x5176;&#x4ED6;&#x4E0B;&#x8F7D;&#x9009;&#x9879;</h4>\n<p>youtube-dl &#x8FD8;&#x63D0;&#x4F9B;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x7684;&#x4E0B;&#x8F7D;&#x9009;&#x9879;&#xFF0C;&#x5982;&#x6311;&#x9009;&#x5408;&#x9002;&#x7684;&#x5206;&#x8FA8;&#x7387;&#xFF0C;&#x4E0B;&#x8F7D;&#x4E00;&#x4E2A;&#x64AD;&#x653E;&#x5217;&#x8868;&#x7B49;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x7814;&#x7A76;&#x5E76;&#x81EA;&#x5B9A;&#x4E49;&#x5982;&#x4F55;&#x4E0B;&#x8F7D;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x3002;</p>\n<h2 id=\"&#x56FD;&#x5185;&#x7684;-youtube-dl-you-get\">&#x56FD;&#x5185;&#x7684; youtube-dl&#xFF1A; You-Get</h2>\n<p>You-Get&#x7684;GitHub&#x5730;&#x5740;&#xFF1A;https://github.com/soimort/you-get</p>\n<p>&#x4E8B;&#x5B9E;&#x4E0A;&#x800C;&#x8A00;&#xFF0C;&#x6211;&#x53D1;&#x73B0;You-Get&#x5BF9;&#x56FD;&#x5185;&#x89C6;&#x9891;&#x7F51;&#x7AD9;&#x7684;&#x652F;&#x6301;&#x66F4;&#x52A0;&#x5168;&#x9762;&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x4F5C;&#x8005;&#x5DF2;&#x7ECF;&#x6709;&#x5927;&#x7EA6;&#x4E24;&#x4E2A;&#x6708;&#x7684;&#x65F6;&#x95F4;&#x6CA1;&#x6709;&#x7EF4;&#x62A4;&#x4E86;&#xFF0C;&#x6211;&#x5728;&#x8FD9;&#x91CC;&#x4E0D;&#x4F5C;&#x63A8;&#x8350;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4F60;&#x9047;&#x5230;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;youtube-dl&#x4E0B;&#x8F7D;&#x7684;&#x89C6;&#x9891;&#x9875;&#x9762;&#xFF0C;&#x4E0D;&#x59A8;&#x8BD5;&#x8BD5;&#x8FD9;&#x4E2A;&#x540C;&#x7C7B;&#x5C0F;&#x5DE5;&#x5177;&#x3002;</p>\n","site":{"data":{}},"excerpt":"<p>youtube-dl 的官网：http://rg3.github.io/youtube-dl/index.html</p>\n<p>youtube-dl 的 GitHub 页面：https://github.com/rg3/youtube-dl（喜欢的话给作者star哦~）</p>\n<h2 id=\"youtube-dl-有什么用\">Youtube-dl 有什么用？</h2>\n<p>youtube-dl 是一个命令行工具，对我所知的<a href=\"https://github.com/rg3/youtube-dl/tree/master/youtube_dl/extractor\" target=\"_blank\" rel=\"noopener\">大部分视频网站</a>有不错的支持，你可以选择下载视频，或是将视频流直接导出到自己想使用的播放器中，也可以以JSON的形式获取可下载资源的URL。</p>\n<p>使用方便、足够简洁，这是我在这里推荐的理由。</p>\n<h2 id=\"安装-youtube-dl\">安装 Youtube-dl</h2>\n<p>Youtube-dl 通过 PyPi 分发，如果你的系统安装有 <code>pip3</code> 或 <code>pip</code> ，请直接使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install --upgrade youtube_dl # 或pip3</span><br></pre></td></tr></table></figure>\n<p>如果你是 macOS 用户，也可以使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install youtube-dl</span><br></pre></td></tr></table></figure>\n<p>官网上的<a href=\"http://rg3.github.io/youtube-dl/download.html\" target=\"_blank\" rel=\"noopener\">这个页面</a>还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。</p>\n<h2 id=\"利用-youtube-dl-下载\">利用 Youtube-dl 下载</h2>\n<h4 id=\"普通下载\">普通下载</h4>\n<p>通过 Youtube-dl 下载视频十分简洁，例如你需要下载http://www.bilibili.com/video/av11728123/ 你可以这样：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl 'http://www.bilibili.com/video/av11728123/'</span><br></pre></td></tr></table></figure>","more":"<p>你会得到这样的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[BiliBili] 11728123: Downloading webpage</span><br><span class=\"line\">[BiliBili] 11728123: Downloading video info page</span><br><span class=\"line\">[download] Destination: 【全明星freestyle】音浪-11728123.mp4</span><br><span class=\"line\">[download] 100% of 9.07MiB in 00:01</span><br></pre></td></tr></table></figure>\n<p>如果你不进行任何特殊的指定，它会分析网页、自动选择默认画质并下载至<code>Destination</code>显示的文件中。</p>\n<h4 id=\"输出文件的名字\">输出文件的名字</h4>\n<p>如果你想指定输出文件的名字（有时对批量下载的人来说十分重要），你可以使用<code>-o</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl 'http://www.bilibili.com/video/av11728123/' -o '你要的名字'</span><br><span class=\"line\"><span class=\"meta\">#</span> 下载至文件：你要的名字 (无后缀)</span><br></pre></td></tr></table></figure>\n<p>当然，请注意你选择的名字的拓展名，youtube-dl 并不会自动修改你所指定的后缀名。youtube-dl 同时也支持 <a href=\"https://github.com/rg3/youtube-dl#output-template\" target=\"_blank\" rel=\"noopener\">OUTPUT TEMPLATE</a>，你可以利用 <code>%(title)s</code>等参数（参考 Python 的字符串形式）将文件命名，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl 'http://www.bilibili.com/video/av11728123/' -o '%(title)s.%(ext)s'</span><br><span class=\"line\"><span class=\"meta\">#</span> 下载至文件：【全明星freestyle】音浪.mp4</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用代理下载\">使用代理下载</h4>\n<p>youtube-dl 提供了使用代理的参数，你可以简单地将自己代理的地址填入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl --proxy 127.0.0.1:1087 'https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4'</span><br><span class=\"line\"><span class=\"meta\">#</span> 成功通过ss在国内下载某不存在网站的视频</span><br></pre></td></tr></table></figure>\n<p>如果你不清楚如何使用自己的代理网址，请询问你的代理提供商。</p>\n<h4 id=\"将流文件直接转发到播放器\">将流文件直接转发到播放器</h4>\n<p>你可以使用标准输入输出进行这一操作，下面是使用 vlc 播放的方法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youtube-dl -o - \"https://www.youtube.com/watch\\?v\\=_fc_TLg3eQ4\" | vlc -</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他下载选项\">其他下载选项</h4>\n<p>youtube-dl 还提供很多其他的下载选项，如挑选合适的分辨率，下载一个播放列表等，你可以研究并自定义如何下载一个文件。</p>\n<h2 id=\"国内的-youtube-dl-you-get\">国内的 youtube-dl： You-Get</h2>\n<p>You-Get的GitHub地址：https://github.com/soimort/you-get</p>\n<p>事实上而言，我发现You-Get对国内视频网站的支持更加全面，但是由于作者已经有大约两个月的时间没有维护了，我在这里不作推荐。但是如果你遇到无法使用youtube-dl下载的视频页面，不妨试试这个同类小工具。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjatgi440006xtd3a7kiexgc","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4a000cxtd3sgohssok"},{"post_id":"cjjatgi3q0000xtd39n7kw2lk","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4c000gxtd3agxc25h1"},{"post_id":"cjjatgi450007xtd3ewpignpj","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4h000jxtd310vrsegy"},{"post_id":"cjjatgi3w0002xtd3fel56bwe","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4k000oxtd3qloz9twp"},{"post_id":"cjjatgi430005xtd3vjmeubo8","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4m000qxtd3gshlr4kc"},{"post_id":"cjjatgi4j000nxtd32094y8m5","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4q000wxtd3xyitjihr"},{"post_id":"cjjatgi47000axtd33t24dsgu","category_id":"cjjatgi4h000kxtd31otol34l","_id":"cjjatgi4s0011xtd3it2ymert"},{"post_id":"cjjatgi4l000pxtd3galvldet","category_id":"cjjatgi4h000kxtd31otol34l","_id":"cjjatgi4u0013xtd3465fn9tz"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","category_id":"cjjatgi4h000kxtd31otol34l","_id":"cjjatgi4w0016xtd39zh58epu"},{"post_id":"cjjatgi4q000vxtd3dmvfxn3h","category_id":"cjjatgi4h000kxtd31otol34l","_id":"cjjatgi4w0018xtd3jk625awj"},{"post_id":"cjjatgi4s0010xtd389xwivxs","category_id":"cjjatgi3z0003xtd30xi1k6vs","_id":"cjjatgi4x001cxtd3u2f5xqin"},{"post_id":"cjjatgi4b000fxtd3xs11nz3l","category_id":"cjjatgi4h000kxtd31otol34l","_id":"cjjatgi4y001dxtd3v49ixx25"},{"post_id":"cjjatgi4d000ixtd3qsvzvqgg","category_id":"cjjatgi4h000kxtd31otol34l","_id":"cjjatgi50001gxtd3xx87rd9m"},{"post_id":"cjjatgi4n000txtd31f9zc4tc","category_id":"cjjatgi4w0019xtd3krjoguv3","_id":"cjjatgi51001ixtd3poz0b65p"},{"post_id":"cjjatgi4t0012xtd3cjwx78dc","category_id":"cjjatgi4w0019xtd3krjoguv3","_id":"cjjatgi52001lxtd3htmr0idf"}],"PostTag":[{"post_id":"cjjatgi3q0000xtd39n7kw2lk","tag_id":"cjjatgi420004xtd38a6byzlw","_id":"cjjatgi4c000hxtd3h6om3jxm"},{"post_id":"cjjatgi3q0000xtd39n7kw2lk","tag_id":"cjjatgi460009xtd3bg87bsgg","_id":"cjjatgi4h000lxtd3uib3nk6u"},{"post_id":"cjjatgi3w0002xtd3fel56bwe","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi4p000uxtd36is4uugc"},{"post_id":"cjjatgi3w0002xtd3fel56bwe","tag_id":"cjjatgi4i000mxtd3jl8h9r3s","_id":"cjjatgi4r000yxtd3lugi07ny"},{"post_id":"cjjatgi430005xtd3vjmeubo8","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi4w0017xtd3czws8e4s"},{"post_id":"cjjatgi430005xtd3vjmeubo8","tag_id":"cjjatgi4i000mxtd3jl8h9r3s","_id":"cjjatgi4x001axtd3jrgenjao"},{"post_id":"cjjatgi440006xtd3a7kiexgc","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi51001hxtd3qnfhv27w"},{"post_id":"cjjatgi440006xtd3a7kiexgc","tag_id":"cjjatgi4i000mxtd3jl8h9r3s","_id":"cjjatgi51001jxtd368rl6agz"},{"post_id":"cjjatgi450007xtd3ewpignpj","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi52001nxtd3al1hjr82"},{"post_id":"cjjatgi450007xtd3ewpignpj","tag_id":"cjjatgi4i000mxtd3jl8h9r3s","_id":"cjjatgi52001oxtd335a19fvd"},{"post_id":"cjjatgi47000axtd33t24dsgu","tag_id":"cjjatgi52001mxtd3h5mhmf0i","_id":"cjjatgi54001uxtd3x2shpwqj"},{"post_id":"cjjatgi47000axtd33t24dsgu","tag_id":"cjjatgi52001pxtd3otole3wo","_id":"cjjatgi54001vxtd3j6ve8ccp"},{"post_id":"cjjatgi47000axtd33t24dsgu","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi55001xxtd3li7kht3q"},{"post_id":"cjjatgi47000axtd33t24dsgu","tag_id":"cjjatgi53001rxtd33m4zs8xe","_id":"cjjatgi55001yxtd3l5zrye89"},{"post_id":"cjjatgi47000axtd33t24dsgu","tag_id":"cjjatgi53001sxtd3iu5p204g","_id":"cjjatgi550020xtd3iirdm0nx"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","tag_id":"cjjatgi52001mxtd3h5mhmf0i","_id":"cjjatgi560025xtd3d7mxpteb"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","tag_id":"cjjatgi52001pxtd3otole3wo","_id":"cjjatgi570026xtd32g4n026v"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi570028xtd3o6pgvhdr"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","tag_id":"cjjatgi550021xtd3p6kwfb89","_id":"cjjatgi570029xtd3t1pi84fu"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","tag_id":"cjjatgi560022xtd305xpponx","_id":"cjjatgi57002bxtd34w0315d6"},{"post_id":"cjjatgi49000bxtd3uslqj1x1","tag_id":"cjjatgi560023xtd3y93dzhex","_id":"cjjatgi58002cxtd3xzk81gbf"},{"post_id":"cjjatgi4b000fxtd3xs11nz3l","tag_id":"cjjatgi52001mxtd3h5mhmf0i","_id":"cjjatgi58002extd3k35ann1h"},{"post_id":"cjjatgi4b000fxtd3xs11nz3l","tag_id":"cjjatgi52001pxtd3otole3wo","_id":"cjjatgi59002fxtd37rob2io3"},{"post_id":"cjjatgi4b000fxtd3xs11nz3l","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi59002hxtd3s0ew7yjd"},{"post_id":"cjjatgi4b000fxtd3xs11nz3l","tag_id":"cjjatgi57002axtd389bvk6cp","_id":"cjjatgi59002ixtd3uln52yda"},{"post_id":"cjjatgi4d000ixtd3qsvzvqgg","tag_id":"cjjatgi52001mxtd3h5mhmf0i","_id":"cjjatgi5a002mxtd3hmus7b97"},{"post_id":"cjjatgi4d000ixtd3qsvzvqgg","tag_id":"cjjatgi52001pxtd3otole3wo","_id":"cjjatgi5a002nxtd3crttgrxd"},{"post_id":"cjjatgi4d000ixtd3qsvzvqgg","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi5b002pxtd3p33ze1r5"},{"post_id":"cjjatgi4d000ixtd3qsvzvqgg","tag_id":"cjjatgi59002jxtd3ts9bhu0l","_id":"cjjatgi5b002qxtd3dh1cth3k"},{"post_id":"cjjatgi4d000ixtd3qsvzvqgg","tag_id":"cjjatgi5a002kxtd3fjyv3enq","_id":"cjjatgi5c002sxtd3grboximo"},{"post_id":"cjjatgi4j000nxtd32094y8m5","tag_id":"cjjatgi5a002lxtd35dxxgy3m","_id":"cjjatgi5c002txtd3iil7463e"},{"post_id":"cjjatgi4l000pxtd3galvldet","tag_id":"cjjatgi52001mxtd3h5mhmf0i","_id":"cjjatgi5e002xxtd3f997z0mq"},{"post_id":"cjjatgi4l000pxtd3galvldet","tag_id":"cjjatgi52001pxtd3otole3wo","_id":"cjjatgi5f002yxtd3206bmb6m"},{"post_id":"cjjatgi4l000pxtd3galvldet","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi5f0030xtd3iago5i2w"},{"post_id":"cjjatgi4l000pxtd3galvldet","tag_id":"cjjatgi550021xtd3p6kwfb89","_id":"cjjatgi5f0031xtd358k5qnv2"},{"post_id":"cjjatgi4l000pxtd3galvldet","tag_id":"cjjatgi560022xtd305xpponx","_id":"cjjatgi5g0033xtd3o006hki9"},{"post_id":"cjjatgi4n000txtd31f9zc4tc","tag_id":"cjjatgi5e002wxtd3epquo0q1","_id":"cjjatgi5g0034xtd36vxqx6uj"},{"post_id":"cjjatgi4n000txtd31f9zc4tc","tag_id":"cjjatgi5f002zxtd368j1mqoq","_id":"cjjatgi5h0036xtd3gtt2y08w"},{"post_id":"cjjatgi4q000vxtd3dmvfxn3h","tag_id":"cjjatgi52001mxtd3h5mhmf0i","_id":"cjjatgi5i003axtd3xdmbisjs"},{"post_id":"cjjatgi4q000vxtd3dmvfxn3h","tag_id":"cjjatgi5h0035xtd3hgte95oq","_id":"cjjatgi5i003bxtd3xsk8eodf"},{"post_id":"cjjatgi4q000vxtd3dmvfxn3h","tag_id":"cjjatgi5h0037xtd3iwpq3zyr","_id":"cjjatgi5j003dxtd3bbwg2ep0"},{"post_id":"cjjatgi4q000vxtd3dmvfxn3h","tag_id":"cjjatgi5h0038xtd3vf9ltx9a","_id":"cjjatgi5j003extd3dvihuk1z"},{"post_id":"cjjatgi4s0010xtd389xwivxs","tag_id":"cjjatgi4a000extd3kllf2geo","_id":"cjjatgi5k003gxtd3gh5x725r"},{"post_id":"cjjatgi4s0010xtd389xwivxs","tag_id":"cjjatgi5h0039xtd335g3i1zb","_id":"cjjatgi5k003hxtd3xbhizzq5"},{"post_id":"cjjatgi4t0012xtd3cjwx78dc","tag_id":"cjjatgi5e002wxtd3epquo0q1","_id":"cjjatgi5l003ixtd3fjy7b93q"},{"post_id":"cjjatgi4t0012xtd3cjwx78dc","tag_id":"cjjatgi5f002zxtd368j1mqoq","_id":"cjjatgi5l003jxtd3581xwze9"}],"Tag":[{"name":"概率论","_id":"cjjatgi420004xtd38a6byzlw"},{"name":"统计学","_id":"cjjatgi460009xtd3bg87bsgg"},{"name":"Python","_id":"cjjatgi4a000extd3kllf2geo"},{"name":"聊天机器人","_id":"cjjatgi4i000mxtd3jl8h9r3s"},{"name":"解题报告","_id":"cjjatgi52001mxtd3h5mhmf0i"},{"name":"LeetCode","_id":"cjjatgi52001pxtd3otole3wo"},{"name":"树","_id":"cjjatgi53001rxtd33m4zs8xe"},{"name":"递归","_id":"cjjatgi53001sxtd3iu5p204g"},{"name":"数组","_id":"cjjatgi550021xtd3p6kwfb89"},{"name":"模拟","_id":"cjjatgi560022xtd305xpponx"},{"name":"数论","_id":"cjjatgi560023xtd3y93dzhex"},{"name":"图论","_id":"cjjatgi57002axtd389bvk6cp"},{"name":"字符串","_id":"cjjatgi59002jxtd3ts9bhu0l"},{"name":"贪心","_id":"cjjatgi5a002kxtd3fjyv3enq"},{"name":"机器学习","_id":"cjjatgi5a002lxtd35dxxgy3m"},{"name":"软件","_id":"cjjatgi5e002wxtd3epquo0q1"},{"name":"命令行","_id":"cjjatgi5f002zxtd368j1mqoq"},{"name":"TopCoder","_id":"cjjatgi5h0035xtd3hgte95oq"},{"name":"动态规划","_id":"cjjatgi5h0037xtd3iwpq3zyr"},{"name":"背包问题","_id":"cjjatgi5h0038xtd3vf9ltx9a"},{"name":"爬虫","_id":"cjjatgi5h0039xtd335g3i1zb"}]}}